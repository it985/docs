(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var a,o,s=e[0],l=e[1],c=e[2],p=0,d=[];p<s.length;p++)o=s[p],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&d.push(r[o][0]),r[o]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(n[a]=l[a]);for(u&&u(e);d.length;)d.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],a=!0,s=1;s<t.length;s++){var l=t[s];0!==r[l]&&(a=!1)}a&&(i.splice(e--,1),n=o(o.s=t[0]))}return n}var a={},r={1:0},i=[];function o(e){if(a[e])return a[e].exports;var t=a[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var a=new Promise((function(e,a){t=r[n]=[e,a]}));e.push(t[2]=a);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({}[n]||n)+"."+{2:"a4791f69",3:"47f77408",4:"c2e3e96b",5:"0fbf58fa",6:"2a27d653",7:"3475694e",8:"436f007f",9:"48d1d3ba",10:"946855a4",11:"d3af7d6d",12:"0749dd3c",13:"030226f4",14:"a7e88ce9",15:"c4e94717",16:"62ff03cd",17:"d55d6664",18:"e29f5bd1",19:"e623c427",20:"e52da6d2",21:"00bf58ff",22:"7bf04e6e",23:"c6790062",24:"323feccf",25:"6537a707",26:"fa629e87",27:"5228a8cd",28:"adc1c264",29:"e20c1d49",30:"3177de79",31:"cf2f7144",32:"e8a5684f",33:"a809a527",34:"f76515d7",35:"66b8753b",36:"01c30e39",37:"1012c2f9",38:"0e07dde9",39:"1ce96cb1",40:"07c178d7",41:"9aa7c859",42:"d44a7bf3",43:"562ad682",44:"246fdadc",45:"a23440d8",46:"31d33c11"}[n]+".js"}(n);var l=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=r[n];if(0!==t){if(t){var a=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+a+": "+i+")",l.name="ChunkLoadError",l.type=a,l.request=i,t[1](l)}r[n]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=n,o.c=a,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var a in n)o.d(t,a,function(e){return n[e]}.bind(null,a));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;i.push([103,0]),t()}([function(n,e,t){var a=t(55),r=a.all;n.exports=a.IS_HTMLDDA?function(n){return"function"==typeof n||n===r}:function(n){return"function"==typeof n}},function(n,e,t){var a=t(27),r=Function.prototype,i=r.call,o=a&&r.bind.bind(i,i);n.exports=a?o:function(n){return function(){return i.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";function a(n,e,t,a,r,i,o,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),a&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),o?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),r&&r.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},c._ssrRegister=l):r&&(l=s?function(){r.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:r),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return a}))},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var a=t(2);n.exports=!a((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var a=t(69),r="object"==typeof self&&self&&self.Object===Object&&self,i=a||r||Function("return this")();n.exports=i},function(n,e,t){var a=t(1),r=t(32),i=a({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(r(n),e)}},function(n,e,t){var a=t(0),r=t(55),i=r.all;n.exports=r.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:a(n)||n===i}:function(n){return"object"==typeof n?null!==n:a(n)}},function(n,e,t){var a=t(164),r=t(167);n.exports=function(n,e){var t=r(n,e);return a(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return a})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return o})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return h})),t.d(e,"m",(function(){return g})),t.d(e,"d",(function(){return f})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));t(13);const a=/#.*$/,r=/\.(md|html)$/,i=/\/$/,o=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(a,"").replace(r,"")}function l(n){return o.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(a),t=e?e[0]:"",r=s(n);return i.test(r)?n:r+".html"+t}function d(n,e){const t=n.hash,r=function(n){const e=n&&n.match(a);if(e)return e[0]}(e);if(r&&t!==r)return!1;return s(n.path)===s(e)}function h(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const a=n.charAt(0);if("/"===a)return n;if("?"===a||"#"===a)return e+n;const r=e.split("/");t&&r[r.length-1]||r.pop();const i=n.replace(/^\//,"").split("/");for(let n=0;n<i.length;n++){const e=i[n];".."===e?r.pop():"."!==e&&r.push(e)}""!==r[0]&&r.unshift("");return r.join("/")}(e,t));const a=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===a)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function g(n,e,t,a){const{pages:r,themeConfig:i}=t,o=a&&i.locales&&i.locales[a]||i;if("auto"===(n.frontmatter.sidebar||o.sidebar||i.sidebar))return m(n);const s=o.sidebar||i.sidebar;if(s){const{base:t,config:a}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const a in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(a)))return{base:a,config:e[a]};var t;return{}}(e,s);return"auto"===a?m(n):a?a.map(n=>function n(e,t,a,r=1){if("string"==typeof e)return h(t,e,a);if(Array.isArray(e))return Object.assign(h(t,e[0],a),{title:e[1]});{r>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const i=e.children||[];return 0===i.length&&e.path?Object.assign(h(t,e.path,a),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map(e=>n(e,t,a,r+1)),collapsable:!1!==e.collapsable}}}(n,r,t)):[]}return[]}function m(n){const e=f(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function f(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){"use strict";var a=t(26),r=t(32),i=t(33),o=t(128),s=t(130);a({target:"Array",proto:!0,arity:1,forced:t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=r(this),t=i(e),a=arguments.length;s(t+a);for(var l=0;l<a;l++)e[t]=arguments[l],t++;return o(e,t),t}})},function(n,e,t){var a=t(16),r=t(149),i=t(150),o=a?a.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?r(n):i(n)}},function(n,e,t){var a=t(5),r=t(17),i=t(35);n.exports=a?function(n,e,t){return r.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var a=t(7).Symbol;n.exports=a},function(n,e,t){var a=t(5),r=t(64),i=t(99),o=t(25),s=t(54),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=a?i?function(n,e,t){if(o(n),e=s(e),o(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var a=u(n,e);a&&a.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:a.configurable,enumerable:"enumerable"in t?t.enumerable:a.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(o(n),e=s(e),o(t),r)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var a=t(1),r=a({}.toString),i=a("".slice);n.exports=function(n){return i(r(n),8,-1)}},function(n,e,t){var a=t(154),r=t(155),i=t(156),o=t(157),s=t(158);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var a=n[e];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var a=t(71);n.exports=function(n,e){for(var t=n.length;t--;)if(a(n[t][0],e))return t;return-1}},function(n,e,t){var a=t(10)(Object,"create");n.exports=a},function(n,e,t){var a=t(176);n.exports=function(n,e){var t=n.__data__;return a(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var a=t(45);n.exports=function(n){if("string"==typeof n||a(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var a,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(a=function(){var n,e,t={version:"0.2.0"},a=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(a[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=r(n,a.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(a.barSelector),u=a.speed,p=a.easing;return l.offsetWidth,o((function(e){""===a.positionUsing&&(a.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var r;return(r="translate3d"===a.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===a.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,r}(n,u,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),a.trickleSpeed)};return a.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*r(Math.random()*e,.1,.95)),e=r(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*a.trickleRate)},n=0,e=0,t.promise=function(a){return a&&"resolved"!==a.state()?(0===e&&t.start(),n++,e++,a.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=a.template;var r,o=e.querySelector(a.barSelector),l=n?"-100":i(t.status||0),u=document.querySelector(a.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),a.showSpinner||(r=e.querySelector(a.spinnerSelector))&&d(r),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(a.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var a,r=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);r--;)if((a=n[r]+i)in t)return a;return e}(t))}function a(n,e,a){e=t(e),n.style[e]=a}return function(n,e){var t,r,i=arguments;if(2==i.length)for(t in e)void 0!==(r=e[t])&&e.hasOwnProperty(t)&&a(n,t,r);else a(n,i[1],i[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),a=t+e;l(t,e)||(n.className=a.substring(1))}function u(n,e){var t,a=p(n);l(n,e)&&(t=a.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?a.call(e,t,e,n):a)||(n.exports=r)},function(n,e,t){var a=t(9),r=String,i=TypeError;n.exports=function(n){if(a(n))return n;throw i(r(n)+" is not an object")}},function(n,e,t){var a=t(4),r=t(51).f,i=t(15),o=t(111),s=t(37),l=t(65),c=t(124);n.exports=function(n,e){var t,u,p,d,h,g=n.target,m=n.global,f=n.stat;if(t=m?a:f?a[g]||s(g,{}):(a[g]||{}).prototype)for(u in e){if(d=e[u],p=n.dontCallGetSet?(h=r(t,u))&&h.value:t[u],!c(m?u:g+(f?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),o(t,u,d,n)}}},function(n,e,t){var a=t(2);n.exports=!a((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var a=t(47),r=t(52);n.exports=function(n){return a(r(n))}},function(n,e,t){var a=t(4),r=t(0),i=function(n){return r(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(a[n]):a[n]&&a[n][e]}},function(n,e,t){var a=t(0),r=t(109),i=TypeError;n.exports=function(n){if(a(n))return n;throw i(r(n)+" is not a function")}},function(n,e,t){var a=t(4),r=t(61),i=t(8),o=t(63),s=t(59),l=t(58),c=a.Symbol,u=r("wks"),p=l?c.for||c:c&&c.withoutSetter||o;n.exports=function(n){return i(u,n)||(u[n]=s&&i(c,n)?c[n]:p("Symbol."+n)),u[n]}},function(n,e,t){var a=t(52),r=Object;n.exports=function(n){return r(a(n))}},function(n,e,t){var a=t(122);n.exports=function(n){return a(n.length)}},function(n,e,t){var a=t(27),r=Function.prototype.call;n.exports=a?r.bind(r):function(){return r.apply(r,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var a=t(4),r=t(37),i=a["__core-js_shared__"]||r("__core-js_shared__",{});n.exports=i},function(n,e,t){var a=t(4),r=Object.defineProperty;n.exports=function(n,e){try{r(a,n,{value:e,configurable:!0,writable:!0})}catch(t){a[n]=e}return e}},function(n,e,t){var a=t(148),r=t(12),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,l=a(function(){return arguments}())?a:function(n){return r(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var a=t(10)(t(7),"Map");n.exports=a},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var a=t(168),r=t(175),i=t(177),o=t(178),s=t(179);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var a=n[e];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var a=t(6),r=t(45),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,e){if(a(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!r(n))||(o.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var a=t(14),r=t(12);n.exports=function(n){return"symbol"==typeof n||r(n)&&"[object Symbol]"==a(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var a=t(1),r=t(2),i=t(18),o=Object,s=a("".split);n.exports=r((function(){return!o("z").propertyIsEnumerable(0)}))?function(n){return"String"==i(n)?s(n,""):o(n)}:o},function(n,e){n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,h=function(){return c.Date.now()};function g(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function m(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(g(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=g(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=r.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):a.test(n)?NaN:+n}n.exports=function(n,e,t){var a,r,i,o,s,l,c=0,u=!1,f=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=a,i=r;return a=r=void 0,c=e,o=n.apply(i,t)}function y(n){return c=n,s=setTimeout(w,e),u?b(n):o}function x(n){var t=n-l;return void 0===l||t>=e||t<0||f&&n-c>=i}function w(){var n=h();if(x(n))return j(n);s=setTimeout(w,function(n){var t=e-(n-l);return f?d(t,i-(n-c)):t}(n))}function j(n){return s=void 0,v&&a?b(n):(a=r=void 0,o)}function k(){var n=h(),t=x(n);if(a=arguments,r=this,l=n,t){if(void 0===s)return y(l);if(f)return s=setTimeout(w,e),b(l)}return void 0===s&&(s=setTimeout(w,e)),o}return e=m(e)||0,g(t)&&(u=!!t.leading,i=(f="maxWait"in t)?p(m(t.maxWait)||0,e):i,v="trailing"in t?!!t.trailing:v),k.cancel=function(){void 0!==s&&clearTimeout(s),c=0,a=l=r=s=void 0},k.flush=function(){return void 0===s?o:j(h())},k}},function(n,e,t){var a=t(5),r=t(34),i=t(105),o=t(35),s=t(28),l=t(54),c=t(8),u=t(64),p=Object.getOwnPropertyDescriptor;e.f=a?p:function(n,e){if(n=s(n),e=l(e),u)try{return p(n,e)}catch(n){}if(c(n,e))return o(!r(i.f,n,e),n[e])}},function(n,e,t){var a=t(53),r=TypeError;n.exports=function(n){if(a(n))throw r("Can't call method on "+n);return n}},function(n,e){n.exports=function(n){return null==n}},function(n,e,t){var a=t(106),r=t(56);n.exports=function(n){var e=a(n,"string");return r(e)?e:e+""}},function(n,e){var t="object"==typeof document&&document.all,a=void 0===t&&void 0!==t;n.exports={all:t,IS_HTMLDDA:a}},function(n,e,t){var a=t(29),r=t(0),i=t(57),o=t(58),s=Object;n.exports=o?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return r(e)&&i(e.prototype,s(n))}},function(n,e,t){var a=t(1);n.exports=a({}.isPrototypeOf)},function(n,e,t){var a=t(59);n.exports=a&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var a=t(60),r=t(2);n.exports=!!Object.getOwnPropertySymbols&&!r((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&a&&a<41}))},function(n,e,t){var a,r,i=t(4),o=t(107),s=i.process,l=i.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(r=(a=u.split("."))[0]>0&&a[0]<4?1:+(a[0]+a[1])),!r&&o&&(!(a=o.match(/Edge\/(\d+)/))||a[1]>=74)&&(a=o.match(/Chrome\/(\d+)/))&&(r=+a[1]),n.exports=r},function(n,e,t){var a=t(62),r=t(36);(n.exports=function(n,e){return r[n]||(r[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.29.0",mode:a?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.29.0/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var a=t(1),r=0,i=Math.random(),o=a(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+o(++r+i,36)}},function(n,e,t){var a=t(5),r=t(2),i=t(98);n.exports=!a&&!r((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var a=t(8),r=t(117),i=t(51),o=t(17);n.exports=function(n,e,t){for(var s=r(e),l=o.f,c=i.f,u=0;u<s.length;u++){var p=s[u];a(n,p)||t&&a(t,p)||l(n,p,c(e,p))}}},function(n,e,t){var a=t(121);n.exports=function(n){var e=+n;return e!=e||0===e?0:a(e)}},function(n,e,t){var a=t(134),r=t(25),i=t(135);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=a(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,a){return r(t),i(a),e?n(t,a):t.__proto__=a,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,a=e.length,r=n.length;++t<a;)n[r+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var a=t(19),r=t(159),i=t(160),o=t(161),s=t(162),l=t(163);function c(n){var e=this.__data__=new a(n);this.size=e.size}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var a=t(14),r=t(40);n.exports=function(n){if(!r(n))return!1;var e=a(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var a=t(180),r=t(12);n.exports=function n(e,t,i,o,s){return e===t||(null==e||null==t||!r(e)&&!r(t)?e!=e&&t!=t:a(e,t,i,o,n,s))}},function(n,e,t){var a=t(76),r=t(183),i=t(77);n.exports=function(n,e,t,o,s,l){var c=1&t,u=n.length,p=e.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(n),h=l.get(e);if(d&&h)return d==e&&h==n;var g=-1,m=!0,f=2&t?new a:void 0;for(l.set(n,e),l.set(e,n);++g<u;){var v=n[g],b=e[g];if(o)var y=c?o(b,v,g,e,n,l):o(v,b,g,n,e,l);if(void 0!==y){if(y)continue;m=!1;break}if(f){if(!r(e,(function(n,e){if(!i(f,e)&&(v===n||s(v,n,t,o,l)))return f.push(e)}))){m=!1;break}}else if(v!==b&&!s(v,b,t,o,l)){m=!1;break}}return l.delete(n),l.delete(e),m}},function(n,e,t){var a=t(41),r=t(181),i=t(182);function o(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new a;++e<t;)this.add(n[e])}o.prototype.add=o.prototype.push=r,o.prototype.has=i,n.exports=o},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var a=t(193),r=t(199),i=t(82);n.exports=function(n){return i(n)?a(n):r(n)}},function(n,e,t){(function(n){var a=t(7),r=t(195),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?a.Buffer:void 0,l=(s?s.isBuffer:void 0)||r;n.exports=l}).call(this,t(49)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var a=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==a||"symbol"!=a&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var a=t(196),r=t(197),i=t(198),o=i&&i.isTypedArray,s=o?r(o):a;n.exports=s},function(n,e,t){var a=t(72),r=t(43);n.exports=function(n){return null!=n&&r(n.length)&&!a(n)}},function(n,e,t){var a=t(10)(t(7),"Set");n.exports=a},function(n,e,t){var a=t(40);n.exports=function(n){return n==n&&!a(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var a=t(87),r=t(23);n.exports=function(n,e){for(var t=0,i=(e=a(e,n)).length;null!=n&&t<i;)n=n[r(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var a=t(6),r=t(44),i=t(210),o=t(213);n.exports=function(n,e){return a(n)?n:r(n,e)?[n]:i(o(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var a=t(146),r=t(151),i=t(222),o=t(230),s=t(239),l=t(102),c=i((function(n){var e=l(n);return s(e)&&(e=void 0),o(a(n,1,s,!0),r(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var a=/["'&<>]/;n.exports=function(n){var e,t=""+n,r=a.exec(t);if(!r)return t;var i="",o=0,s=0;for(o=r.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=e}return s!==o?i+t.substring(s,o):i}},function(n,e,t){"use strict";t.r(e);var a={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},r=(t(242),t(3)),i=Object(r.a)(a,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);var a={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},r=(t(243),t(3)),i=Object(r.a)(a,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,a){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":a===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(a)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var a=t(4),r=t(9),i=a.document,o=r(i)&&r(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,e,t){var a=t(5),r=t(2);n.exports=a&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var a=t(61),r=t(63),i=a("keys");n.exports=function(n){return i[n]||(i[n]=r(n))}},function(n,e,t){var a=t(1),r=t(8),i=t(28),o=t(119).indexOf,s=t(48),l=a([].push);n.exports=function(n,e){var t,a=i(n),c=0,u=[];for(t in a)!r(s,t)&&r(a,t)&&l(u,t);for(;e.length>c;)r(a,t=e[c++])&&(~o(u,t)||l(u,t));return u}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(249)},function(n,e,t){"use strict";var a=t(26),r=t(125).left,i=t(126),o=t(60);a({target:"Array",proto:!0,forced:!t(127)&&o>79&&o<83||!i("reduce")},{reduce:function(n){var e=arguments.length;return r(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var a={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!a.call({1:2},1);e.f=i?function(n){var e=r(this,n);return!!e&&e.enumerable}:a},function(n,e,t){var a=t(34),r=t(9),i=t(56),o=t(108),s=t(110),l=t(31),c=TypeError,u=l("toPrimitive");n.exports=function(n,e){if(!r(n)||i(n))return n;var t,l=o(n,u);if(l){if(void 0===e&&(e="default"),t=a(l,n,e),!r(t)||i(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e){n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){var a=t(30),r=t(53);n.exports=function(n,e){var t=n[e];return r(t)?void 0:a(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var a=t(34),r=t(0),i=t(9),o=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&r(t=n.toString)&&!i(s=a(t,n)))return s;if(r(t=n.valueOf)&&!i(s=a(t,n)))return s;if("string"!==e&&r(t=n.toString)&&!i(s=a(t,n)))return s;throw o("Can't convert object to primitive value")}},function(n,e,t){var a=t(0),r=t(17),i=t(112),o=t(37);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:e;if(a(t)&&i(t,c,s),s.global)l?n[e]=t:o(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:r.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){var a=t(1),r=t(2),i=t(0),o=t(8),s=t(5),l=t(113).CONFIGURABLE,c=t(114),u=t(115),p=u.enforce,d=u.get,h=String,g=Object.defineProperty,m=a("".slice),f=a("".replace),v=a([].join),b=s&&!r((function(){return 8!==g((function(){}),"length",{value:8}).length})),y=String(String).split("String"),x=n.exports=function(n,e,t){"Symbol("===m(h(e),0,7)&&(e="["+f(h(e),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!o(n,"name")||l&&n.name!==e)&&(s?g(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&o(t,"arity")&&n.length!==t.arity&&g(n,"length",{value:t.arity});try{t&&o(t,"constructor")&&t.constructor?s&&g(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var a=p(n);return o(a,"source")||(a.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=x((function(){return i(this)&&d(this).source||c(this)}),"toString")},function(n,e,t){var a=t(5),r=t(8),i=Function.prototype,o=a&&Object.getOwnPropertyDescriptor,s=r(i,"name"),l=s&&"something"===function(){}.name,c=s&&(!a||a&&o(i,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var a=t(1),r=t(0),i=t(36),o=a(Function.toString);r(i.inspectSource)||(i.inspectSource=function(n){return o(n)}),n.exports=i.inspectSource},function(n,e,t){var a,r,i,o=t(116),s=t(4),l=t(9),c=t(15),u=t(8),p=t(36),d=t(100),h=t(48),g=s.TypeError,m=s.WeakMap;if(o||p.state){var f=p.state||(p.state=new m);f.get=f.get,f.has=f.has,f.set=f.set,a=function(n,e){if(f.has(n))throw g("Object already initialized");return e.facade=n,f.set(n,e),e},r=function(n){return f.get(n)||{}},i=function(n){return f.has(n)}}else{var v=d("state");h[v]=!0,a=function(n,e){if(u(n,v))throw g("Object already initialized");return e.facade=n,c(n,v,e),e},r=function(n){return u(n,v)?n[v]:{}},i=function(n){return u(n,v)}}n.exports={set:a,get:r,has:i,enforce:function(n){return i(n)?r(n):a(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=r(e)).type!==n)throw g("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var a=t(4),r=t(0),i=a.WeakMap;n.exports=r(i)&&/native code/.test(String(i))},function(n,e,t){var a=t(29),r=t(1),i=t(118),o=t(123),s=t(25),l=r([].concat);n.exports=a("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?l(e,t(n)):e}},function(n,e,t){var a=t(101),r=t(97).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return a(n,r)}},function(n,e,t){var a=t(28),r=t(120),i=t(33),o=function(n){return function(e,t,o){var s,l=a(e),c=i(l),u=r(o,c);if(n&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((n||u in l)&&l[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,e,t){var a=t(66),r=Math.max,i=Math.min;n.exports=function(n,e){var t=a(n);return t<0?r(t+e,0):i(t,e)}},function(n,e){var t=Math.ceil,a=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?a:t)(e)}},function(n,e,t){var a=t(66),r=Math.min;n.exports=function(n){return n>0?r(a(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var a=t(2),r=t(0),i=/#|\.prototype\./,o=function(n,e){var t=l[s(n)];return t==u||t!=c&&(r(e)?a(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},l=o.data={},c=o.NATIVE="N",u=o.POLYFILL="P";n.exports=o},function(n,e,t){var a=t(30),r=t(32),i=t(47),o=t(33),s=TypeError,l=function(n){return function(e,t,l,c){a(t);var u=r(e),p=i(u),d=o(u),h=n?d-1:0,g=n?-1:1;if(l<2)for(;;){if(h in p){c=p[h],h+=g;break}if(h+=g,n?h<0:d<=h)throw s("Reduce of empty array with no initial value")}for(;n?h>=0:d>h;h+=g)h in p&&(c=t(c,p[h],h,u));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var a=t(2);n.exports=function(n,e){var t=[][n];return!!t&&a((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var a=t(18);n.exports="undefined"!=typeof process&&"process"==a(process)},function(n,e,t){"use strict";var a=t(5),r=t(129),i=TypeError,o=Object.getOwnPropertyDescriptor,s=a&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(r(n)&&!o(n,"length").writable)throw i("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){var a=t(18);n.exports=Array.isArray||function(n){return"Array"==a(n)}},function(n,e){var t=TypeError;n.exports=function(n){if(n>9007199254740991)throw t("Maximum allowed index exceeded");return n}},function(n,e,t){var a=t(26),r=t(4),i=t(132),o=t(133),s=r.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=o(n,e,l),a({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=o("WebAssembly."+n,e,l),a({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return i(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),c("URIError",(function(n){return function(e){return i(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var a=t(27),r=Function.prototype,i=r.apply,o=r.call;n.exports="object"==typeof Reflect&&Reflect.apply||(a?o.bind(i):function(){return o.apply(i,arguments)})},function(n,e,t){"use strict";var a=t(29),r=t(8),i=t(15),o=t(57),s=t(67),l=t(65),c=t(136),u=t(137),p=t(138),d=t(142),h=t(143),g=t(5),m=t(62);n.exports=function(n,e,t,f){var v=f?2:1,b=n.split("."),y=b[b.length-1],x=a.apply(null,b);if(x){var w=x.prototype;if(!m&&r(w,"cause")&&delete w.cause,!t)return x;var j=a("Error"),k=e((function(n,e){var t=p(f?e:n,void 0),a=f?new x(n):new x;return void 0!==t&&i(a,"message",t),h(a,k,a.stack,2),this&&o(w,this)&&u(a,this,k),arguments.length>v&&d(a,arguments[v]),a}));if(k.prototype=w,"Error"!==y?s?s(k,j):l(k,j,{name:!0}):g&&"stackTraceLimit"in x&&(c(k,x,"stackTraceLimit"),c(k,x,"prepareStackTrace")),l(k,x),!m)try{w.name!==y&&i(w,"name",y),w.constructor=k}catch(n){}return k}}},function(n,e,t){var a=t(1),r=t(30);n.exports=function(n,e,t){try{return a(r(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){var a=t(0),r=String,i=TypeError;n.exports=function(n){if("object"==typeof n||a(n))return n;throw i("Can't set "+r(n)+" as a prototype")}},function(n,e,t){var a=t(17).f;n.exports=function(n,e,t){t in n||a(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var a=t(0),r=t(9),i=t(67);n.exports=function(n,e,t){var o,s;return i&&a(o=e.constructor)&&o!==t&&r(s=o.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e,t){var a=t(139);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:a(n)}},function(n,e,t){var a=t(140),r=String;n.exports=function(n){if("Symbol"===a(n))throw TypeError("Cannot convert a Symbol value to a string");return r(n)}},function(n,e,t){var a=t(141),r=t(0),i=t(18),o=t(31)("toStringTag"),s=Object,l="Arguments"==i(function(){return arguments}());n.exports=a?i:function(n){var e,t,a;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),o))?t:l?i(e):"Object"==(a=i(e))&&r(e.callee)?"Arguments":a}},function(n,e,t){var a={};a[t(31)("toStringTag")]="z",n.exports="[object z]"===String(a)},function(n,e,t){var a=t(9),r=t(15);n.exports=function(n,e){a(e)&&"cause"in e&&r(n,"cause",e.cause)}},function(n,e,t){var a=t(15),r=t(144),i=t(145),o=Error.captureStackTrace;n.exports=function(n,e,t,s){i&&(o?o(n,e):a(n,"stack",r(t,s)))}},function(n,e,t){var a=t(1),r=Error,i=a("".replace),o=String(r("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(o);n.exports=function(n,e){if(l&&"string"==typeof n&&!r.prepareStackTrace)for(;e--;)n=i(n,s,"");return n}},function(n,e,t){var a=t(2),r=t(35);n.exports=!a((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",r(1,7)),7!==n.stack)}))},function(n,e,t){var a=t(68),r=t(147);n.exports=function n(e,t,i,o,s){var l=-1,c=e.length;for(i||(i=r),s||(s=[]);++l<c;){var u=e[l];t>0&&i(u)?t>1?n(u,t-1,i,o,s):a(s,u):o||(s[s.length]=u)}return s}},function(n,e,t){var a=t(16),r=t(38),i=t(6),o=a?a.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||r(n)||!!(o&&n&&n[o])}},function(n,e,t){var a=t(14),r=t(12);n.exports=function(n){return r(n)&&"[object Arguments]"==a(n)}},function(n,e,t){var a=t(16),r=Object.prototype,i=r.hasOwnProperty,o=r.toString,s=a?a.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var a=!0}catch(n){}var r=o.call(n);return a&&(e?n[s]=t:delete n[s]),r}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var a=t(152),r=t(208),i=t(46),o=t(6),s=t(219);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?r(n[0],n[1]):a(n):s(n)}},function(n,e,t){var a=t(153),r=t(207),i=t(85);n.exports=function(n){var e=r(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||a(t,n,e)}}},function(n,e,t){var a=t(70),r=t(74);n.exports=function(n,e,t,i){var o=t.length,s=o,l=!i;if(null==n)return!s;for(n=Object(n);o--;){var c=t[o];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++o<s;){var u=(c=t[o])[0],p=n[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in n))return!1}else{var h=new a;if(i)var g=i(p,d,u,n,e,h);if(!(void 0===g?r(d,p,3,i,h):g))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var a=t(20),r=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=a(e,n);return!(t<0)&&(t==e.length-1?e.pop():r.call(e,t,1),--this.size,!0)}},function(n,e,t){var a=t(20);n.exports=function(n){var e=this.__data__,t=a(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var a=t(20);n.exports=function(n){return a(this.__data__,n)>-1}},function(n,e,t){var a=t(20);n.exports=function(n,e){var t=this.__data__,r=a(t,n);return r<0?(++this.size,t.push([n,e])):t[r][1]=e,this}},function(n,e,t){var a=t(19);n.exports=function(){this.__data__=new a,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var a=t(19),r=t(39),i=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof a){var o=t.__data__;if(!r||o.length<199)return o.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(o)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var a=t(72),r=t(165),i=t(40),o=t(73),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||r(n))&&(a(n)?d:s).test(o(n))}},function(n,e,t){var a,r=t(166),i=(a=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var a=t(7)["__core-js_shared__"];n.exports=a},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var a=t(169),r=t(19),i=t(39);n.exports=function(){this.size=0,this.__data__={hash:new a,map:new(i||r),string:new a}}},function(n,e,t){var a=t(170),r=t(171),i=t(172),o=t(173),s=t(174);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var a=n[e];this.set(a[0],a[1])}}l.prototype.clear=a,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var a=t(21);n.exports=function(){this.__data__=a?a(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var a=t(21),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(a){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return r.call(e,n)?e[n]:void 0}},function(n,e,t){var a=t(21),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return a?void 0!==e[n]:r.call(e,n)}},function(n,e,t){var a=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=a&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var a=t(22);n.exports=function(n){var e=a(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var a=t(22);n.exports=function(n){return a(this,n).get(n)}},function(n,e,t){var a=t(22);n.exports=function(n){return a(this,n).has(n)}},function(n,e,t){var a=t(22);n.exports=function(n,e){var t=a(this,n),r=t.size;return t.set(n,e),this.size+=t.size==r?0:1,this}},function(n,e,t){var a=t(70),r=t(75),i=t(184),o=t(187),s=t(203),l=t(6),c=t(79),u=t(81),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,h,g,m){var f=l(n),v=l(e),b=f?"[object Array]":s(n),y=v?"[object Array]":s(e),x=(b="[object Arguments]"==b?p:b)==p,w=(y="[object Arguments]"==y?p:y)==p,j=b==y;if(j&&c(n)){if(!c(e))return!1;f=!0,x=!1}if(j&&!x)return m||(m=new a),f||u(n)?r(n,e,t,h,g,m):i(n,e,b,t,h,g,m);if(!(1&t)){var k=x&&d.call(n,"__wrapped__"),_=w&&d.call(e,"__wrapped__");if(k||_){var C=k?n.value():n,S=_?e.value():e;return m||(m=new a),g(C,S,t,h,m)}}return!!j&&(m||(m=new a),o(n,e,t,h,g,m))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,a=null==n?0:n.length;++t<a;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var a=t(16),r=t(185),i=t(71),o=t(75),s=t(186),l=t(42),c=a?a.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,a,c,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new r(n),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var h=s;case"[object Set]":var g=1&a;if(h||(h=l),n.size!=e.size&&!g)return!1;var m=d.get(n);if(m)return m==e;a|=2,d.set(n,e);var f=o(h(n),h(e),a,c,p,d);return d.delete(n),f;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var a=t(7).Uint8Array;n.exports=a},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,a){t[++e]=[a,n]})),t}},function(n,e,t){var a=t(188),r=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,o,s){var l=1&t,c=a(n),u=c.length;if(u!=a(e).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in e:r.call(e,d)))return!1}var h=s.get(n),g=s.get(e);if(h&&g)return h==e&&g==n;var m=!0;s.set(n,e),s.set(e,n);for(var f=l;++p<u;){var v=n[d=c[p]],b=e[d];if(i)var y=l?i(b,v,d,e,n,s):i(v,b,d,n,e,s);if(!(void 0===y?v===b||o(v,b,t,i,s):y)){m=!1;break}f||(f="constructor"==d)}if(m&&!f){var x=n.constructor,w=e.constructor;x==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(m=!1)}return s.delete(n),s.delete(e),m}},function(n,e,t){var a=t(189),r=t(190),i=t(78);n.exports=function(n){return a(n,i,r)}},function(n,e,t){var a=t(68),r=t(6);n.exports=function(n,e,t){var i=e(n);return r(n)?i:a(i,t(n))}},function(n,e,t){var a=t(191),r=t(192),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),a(o(n),(function(e){return i.call(n,e)})))}:r;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,a=null==n?0:n.length,r=0,i=[];++t<a;){var o=n[t];e(o,t,n)&&(i[r++]=o)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var a=t(194),r=t(38),i=t(6),o=t(79),s=t(80),l=t(81),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),u=!t&&r(n),p=!t&&!u&&o(n),d=!t&&!u&&!p&&l(n),h=t||u||p||d,g=h?a(n.length,String):[],m=g.length;for(var f in n)!e&&!c.call(n,f)||h&&("length"==f||p&&("offset"==f||"parent"==f)||d&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,m))||g.push(f);return g}},function(n,e){n.exports=function(n,e){for(var t=-1,a=Array(n);++t<n;)a[t]=e(t);return a}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var a=t(14),r=t(43),i=t(12),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&r(n.length)&&!!o[a(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var a=t(69),r=e&&!e.nodeType&&e,i=r&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===r&&a.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,t(49)(n))},function(n,e,t){var a=t(200),r=t(201),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!a(n))return r(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var a=t(202)(Object.keys,Object);n.exports=a},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var a=t(204),r=t(39),i=t(205),o=t(83),s=t(206),l=t(14),c=t(73),u=c(a),p=c(r),d=c(i),h=c(o),g=c(s),m=l;(a&&"[object DataView]"!=m(new a(new ArrayBuffer(1)))||r&&"[object Map]"!=m(new r)||i&&"[object Promise]"!=m(i.resolve())||o&&"[object Set]"!=m(new o)||s&&"[object WeakMap]"!=m(new s))&&(m=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,a=t?c(t):"";if(a)switch(a){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case h:return"[object Set]";case g:return"[object WeakMap]"}return e}),n.exports=m},function(n,e,t){var a=t(10)(t(7),"DataView");n.exports=a},function(n,e,t){var a=t(10)(t(7),"Promise");n.exports=a},function(n,e,t){var a=t(10)(t(7),"WeakMap");n.exports=a},function(n,e,t){var a=t(84),r=t(78);n.exports=function(n){for(var e=r(n),t=e.length;t--;){var i=e[t],o=n[i];e[t]=[i,o,a(o)]}return e}},function(n,e,t){var a=t(74),r=t(209),i=t(216),o=t(44),s=t(84),l=t(85),c=t(23);n.exports=function(n,e){return o(n)&&s(e)?l(c(n),e):function(t){var o=r(t,n);return void 0===o&&o===e?i(t,n):a(e,o,3)}}},function(n,e,t){var a=t(86);n.exports=function(n,e,t){var r=null==n?void 0:a(n,e);return void 0===r?t:r}},function(n,e,t){var a=t(211),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=a((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(r,(function(n,t,a,r){e.push(a?r.replace(i,"$1"):t||n)})),e}));n.exports=o},function(n,e,t){var a=t(212);n.exports=function(n){var e=a(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var a=t(41);function r(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var a=arguments,r=e?e.apply(this,a):a[0],i=t.cache;if(i.has(r))return i.get(r);var o=n.apply(this,a);return t.cache=i.set(r,o)||i,o};return t.cache=new(r.Cache||a),t}r.Cache=a,n.exports=r},function(n,e,t){var a=t(214);n.exports=function(n){return null==n?"":a(n)}},function(n,e,t){var a=t(16),r=t(215),i=t(6),o=t(45),s=a?a.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return r(e,n)+"";if(o(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,a=null==n?0:n.length,r=Array(a);++t<a;)r[t]=e(n[t],t,n);return r}},function(n,e,t){var a=t(217),r=t(218);n.exports=function(n,e){return null!=n&&r(n,e,a)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var a=t(87),r=t(38),i=t(6),o=t(80),s=t(43),l=t(23);n.exports=function(n,e,t){for(var c=-1,u=(e=a(e,n)).length,p=!1;++c<u;){var d=l(e[c]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++c!=u?p:!!(u=null==n?0:n.length)&&s(u)&&o(d,u)&&(i(n)||r(n))}},function(n,e,t){var a=t(220),r=t(221),i=t(44),o=t(23);n.exports=function(n){return i(n)?a(o(n)):r(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var a=t(86);n.exports=function(n){return function(e){return a(e,n)}}},function(n,e,t){var a=t(46),r=t(223),i=t(225);n.exports=function(n,e){return i(r(n,e,a),n+"")}},function(n,e,t){var a=t(224),r=Math.max;n.exports=function(n,e,t){return e=r(void 0===e?n.length-1:e,0),function(){for(var i=arguments,o=-1,s=r(i.length-e,0),l=Array(s);++o<s;)l[o]=i[e+o];o=-1;for(var c=Array(e+1);++o<e;)c[o]=i[o];return c[e]=t(l),a(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var a=t(226),r=t(229)(a);n.exports=r},function(n,e,t){var a=t(227),r=t(228),i=t(46),o=r?function(n,e){return r(n,"toString",{configurable:!0,enumerable:!1,value:a(e),writable:!0})}:i;n.exports=o},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var a=t(10),r=function(){try{var n=a(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=r},function(n,e){var t=Date.now;n.exports=function(n){var e=0,a=0;return function(){var r=t(),i=16-(r-a);if(a=r,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var a=t(76),r=t(231),i=t(236),o=t(77),s=t(237),l=t(42);n.exports=function(n,e,t){var c=-1,u=r,p=n.length,d=!0,h=[],g=h;if(t)d=!1,u=i;else if(p>=200){var m=e?null:s(n);if(m)return l(m);d=!1,u=o,g=new a}else g=e?[]:h;n:for(;++c<p;){var f=n[c],v=e?e(f):f;if(f=t||0!==f?f:0,d&&v==v){for(var b=g.length;b--;)if(g[b]===v)continue n;e&&g.push(v),h.push(f)}else u(g,v,t)||(g!==h&&g.push(v),h.push(f))}return h}},function(n,e,t){var a=t(232);n.exports=function(n,e){return!!(null==n?0:n.length)&&a(n,e,0)>-1}},function(n,e,t){var a=t(233),r=t(234),i=t(235);n.exports=function(n,e,t){return e==e?i(n,e,t):a(n,r,t)}},function(n,e){n.exports=function(n,e,t,a){for(var r=n.length,i=t+(a?1:-1);a?i--:++i<r;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var a=t-1,r=n.length;++a<r;)if(n[a]===e)return a;return-1}},function(n,e){n.exports=function(n,e,t){for(var a=-1,r=null==n?0:n.length;++a<r;)if(t(e,n[a]))return!0;return!1}},function(n,e,t){var a=t(83),r=t(238),i=t(42),o=a&&1/i(new a([,-0]))[1]==1/0?function(n){return new a(n)}:r;n.exports=o},function(n,e){n.exports=function(){}},function(n,e,t){var a=t(82),r=t(12);n.exports=function(n){return r(n)&&a(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t(92)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var a=Object.freeze({}),r=Array.isArray;function i(n){return null==n}function o(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function h(n){return"[object RegExp]"===p.call(n)}function g(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return o(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),a=n.split(","),r=0;r<a.length;r++)t[a[r]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function x(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var a=n.indexOf(e);if(a>-1)return n.splice(a,1)}}var w=Object.prototype.hasOwnProperty;function j(n,e){return w.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var _=/-(\w)/g,C=k((function(n){return n.replace(_,(function(n,e){return e?e.toUpperCase():""}))})),S=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,z=k((function(n){return n.replace(T,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var a=arguments.length;return a?a>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function E(n,e){e=e||0;for(var t=n.length-e,a=new Array(t);t--;)a[t]=n[t+e];return a}function I(n,e){for(var t in e)n[t]=e[t];return n}function M(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function O(n,e,t){}var B=function(n,e,t){return!1},P=function(n){return n};function J(n,e){if(n===e)return!0;var t=u(n),a=u(e);if(!t||!a)return!t&&!a&&String(n)===String(e);try{var r=Array.isArray(n),i=Array.isArray(e);if(r&&i)return n.length===e.length&&n.every((function(n,t){return J(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(r||i)return!1;var o=Object.keys(n),s=Object.keys(e);return o.length===s.length&&o.every((function(t){return J(n[t],e[t])}))}catch(n){return!1}}function L(n,e){for(var t=0;t<n.length;t++)if(J(n[t],e))return t;return-1}function D(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function $(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var q=["component","directive","filter"],V=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],R={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:B,isReservedAttr:B,isUnknownElement:B,getTagNamespace:O,parsePlatformTagName:P,mustUseProp:B,async:!0,_lifecycleHooks:V},F=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function N(n,e,t,a){Object.defineProperty(n,e,{value:t,enumerable:!!a,writable:!0,configurable:!0})}var U=new RegExp("[^".concat(F.source,".$_\\d]"));var G="__proto__"in{},X="undefined"!=typeof window,W=X&&window.navigator.userAgent.toLowerCase(),Q=W&&/msie|trident/.test(W),K=W&&W.indexOf("msie 9.0")>0,Z=W&&W.indexOf("edge/")>0;W&&W.indexOf("android");var Y=W&&/iphone|ipad|ipod|ios/.test(W);W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W);var nn,en=W&&W.match(/firefox\/(\d+)/),tn={}.watch,an=!1;if(X)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){an=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var on=function(){return void 0===nn&&(nn=!X&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,un="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=null;function dn(n){void 0===n&&(n=null),n||pn&&pn._scope.off(),pn=n,n&&n._scope.on()}var hn=function(){function n(n,e,t,a,r,i,o,s){this.tag=n,this.data=e,this.children=t,this.text=a,this.elm=r,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),gn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function mn(n){return new hn(void 0,void 0,void 0,String(n))}function fn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var vn=0,bn=[],yn=function(){function n(){this._pending=!1,this.id=vn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,bn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,a=e.length;t<a;t++){0,e[t].update()}},n}();yn.target=null;var xn=[];function wn(n){xn.push(n),yn.target=n}function jn(){xn.pop(),yn.target=xn[xn.length-1]}var kn=Array.prototype,_n=Object.create(kn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=kn[n];N(_n,n,(function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];var r,i=e.apply(this,t),o=this.__ob__;switch(n){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&o.observeArray(r),o.dep.notify(),i}))}));var Cn=Object.getOwnPropertyNames(_n),Sn={},Tn=!0;function zn(n){Tn=n}var An={notify:O,depend:O,addSub:O,removeSub:O},En=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?An:new yn,this.vmCount=0,N(n,"__ob__",this),r(n)){if(!t)if(G)n.__proto__=_n;else for(var a=0,i=Cn.length;a<i;a++){N(n,s=Cn[a],_n[s])}e||this.observeArray(n)}else{var o=Object.keys(n);for(a=0;a<o.length;a++){var s;Mn(n,s=o[a],Sn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)In(n[e],!1,this.mock)},n}();function In(n,e,t){return n&&j(n,"__ob__")&&n.__ob__ instanceof En?n.__ob__:!Tn||!t&&on()||!r(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||$n(n)||n instanceof hn?void 0:new En(n,e,t)}function Mn(n,e,t,a,i,o){var s=new yn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,u=l&&l.set;c&&!u||t!==Sn&&2!==arguments.length||(t=n[e]);var p=!i&&In(t,!1,o);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return yn.target&&(s.depend(),p&&(p.dep.depend(),r(e)&&Pn(e))),$n(e)&&!i?e.value:e},set:function(e){var a=c?c.call(n):t;if($(a,e)){if(u)u.call(n,e);else{if(c)return;if(!i&&$n(a)&&!$n(e))return void(a.value=e);t=e}p=!i&&In(e,!1,o),s.notify()}}}),s}}function On(n,e,t){if(!Dn(n)){var a=n.__ob__;return r(n)&&g(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),a&&!a.shallow&&a.mock&&In(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||a&&a.vmCount?t:a?(Mn(a.value,e,t,void 0,a.shallow,a.mock),a.dep.notify(),t):(n[e]=t,t)}}function Bn(n,e){if(r(n)&&g(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Dn(n)||j(n,e)&&(delete n[e],t&&t.dep.notify())}}function Pn(n){for(var e=void 0,t=0,a=n.length;t<a;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),r(e)&&Pn(e)}function Jn(n){return Ln(n,!0),N(n,"__v_isShallow",!0),n}function Ln(n,e){if(!Dn(n)){In(n,e,on());0}}function Dn(n){return!(!n||!n.__v_isReadonly)}function $n(n){return!(!n||!0!==n.__v_isRef)}function qn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if($n(n))return n.value;var a=n&&n.__ob__;return a&&a.dep.depend(),n},set:function(n){var a=e[t];$n(a)&&!$n(n)?a.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Vn;var Rn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Vn,!n&&Vn&&(this.index=(Vn.scopes||(Vn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Vn;try{return Vn=this,n()}finally{Vn=e}}else 0},n.prototype.on=function(){Vn=this},n.prototype.off=function(){Vn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Fn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),a="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=a?n.slice(1):n,once:t,capture:a,passive:e}}));function Nn(n,e){function t(){var n=t.fns;if(!r(n))return Te(n,null,arguments,e,"v-on handler");for(var a=n.slice(),i=0;i<a.length;i++)Te(a[i],null,arguments,e,"v-on handler")}return t.fns=n,t}function Un(n,e,t,a,r,o){var l,c,u,p;for(l in n)c=n[l],u=e[l],p=Hn(l),i(c)||(i(u)?(i(c.fns)&&(c=n[l]=Nn(c,o)),s(p.once)&&(c=n[l]=r(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)i(n[l])&&a((p=Hn(l)).name,e[l],p.capture)}function Gn(n,e,t){var a;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var r=n[e];function l(){t.apply(this,arguments),x(a.fns,l)}i(r)?a=Nn([l]):o(r.fns)&&s(r.merged)?(a=r).fns.push(l):a=Nn([r,l]),a.merged=!0,n[e]=a}function Xn(n,e,t,a,r){if(o(e)){if(j(e,t))return n[t]=e[t],r||delete e[t],!0;if(j(e,a))return n[t]=e[a],r||delete e[a],!0}return!1}function Wn(n){return l(n)?[mn(n)]:r(n)?function n(e,t){var a,c,u,p,d=[];for(a=0;a<e.length;a++)i(c=e[a])||"boolean"==typeof c||(u=d.length-1,p=d[u],r(c)?c.length>0&&(Qn((c=n(c,"".concat(t||"","_").concat(a)))[0])&&Qn(p)&&(d[u]=mn(p.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Qn(p)?d[u]=mn(p.text+c):""!==c&&d.push(mn(c)):Qn(c)&&Qn(p)?d[u]=mn(p.text+c.text):(s(e._isVList)&&o(c.tag)&&i(c.key)&&o(t)&&(c.key="__vlist".concat(t,"_").concat(a,"__")),d.push(c)));return d}(n):void 0}function Qn(n){return o(n)&&o(n.text)&&!1===n.isComment}function Kn(n,e){var t,a,i,s,l=null;if(r(n)||"string"==typeof n)for(l=new Array(n.length),t=0,a=n.length;t<a;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(u(n))if(un&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(i=Object.keys(n),l=new Array(i.length),t=0,a=i.length;t<a;t++)s=i[t],l[t]=e(n[s],s,t);return o(l)||(l=[]),l._isVList=!0,l}function Zn(n,e,t,a){var r,i=this.$scopedSlots[n];i?(t=t||{},a&&(t=I(I({},a),t)),r=i(t)||(c(e)?e():e)):r=this.$slots[n]||(c(e)?e():e);var o=t&&t.slot;return o?this.$createElement("template",{slot:o},r):r}function Yn(n){return Et(this.$options,"filters",n,!0)||P}function ne(n,e){return r(n)?-1===n.indexOf(e):n!==e}function ee(n,e,t,a,r){var i=R.keyCodes[e]||t;return r&&a&&!R.keyCodes[e]?ne(r,a):i?ne(i,n):a?z(a)!==e:void 0===n}function te(n,e,t,a,i){if(t)if(u(t)){r(t)&&(t=M(t));var o=void 0,s=function(r){if("class"===r||"style"===r||y(r))o=n;else{var s=n.attrs&&n.attrs.type;o=a||R.mustUseProp(e,s,r)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=C(r),c=z(r);l in o||c in o||(o[r]=t[r],i&&((n.on||(n.on={}))["update:".concat(r)]=function(n){t[r]=n}))};for(var l in t)s(l)}else;return n}function ae(n,e){var t=this._staticTrees||(this._staticTrees=[]),a=t[n];return a&&!e||ie(a=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),a}function re(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(r(n))for(var a=0;a<n.length;a++)n[a]&&"string"!=typeof n[a]&&oe(n[a],"".concat(e,"_").concat(a),t);else oe(n,e,t)}function oe(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function se(n,e){if(e)if(d(e)){var t=n.on=n.on?I({},n.on):{};for(var a in e){var r=t[a],i=e[a];t[a]=r?[].concat(r,i):i}}else;return n}function le(n,e,t,a){e=e||{$stable:!t};for(var i=0;i<n.length;i++){var o=n[i];r(o)?le(o,e,t):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return a&&(e.$key=a),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var a=e[t];"string"==typeof a&&a&&(n[e[t]]=e[t+1])}return n}function ue(n,e){return"string"==typeof n?e+n:n}function pe(n){n._o=re,n._n=v,n._s=f,n._l=Kn,n._t=Zn,n._q=J,n._i=L,n._m=ae,n._f=Yn,n._k=ee,n._b=te,n._v=mn,n._e=gn,n._u=le,n._g=se,n._d=ce,n._p=ue}function de(n,e){if(!n||!n.length)return{};for(var t={},a=0,r=n.length;a<r;a++){var i=n[a],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==e&&i.fnContext!==e||!o||null==o.slot)(t.default||(t.default=[])).push(i);else{var s=o.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(he)&&delete t[c];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function me(n,e,t,r){var i,o=Object.keys(t).length>0,s=e?!!e.$stable:!o,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&r&&r!==a&&l===r.$key&&!o&&!r.$hasNormal)return r;for(var c in i={},e)e[c]&&"$"!==c[0]&&(i[c]=fe(n,t,c,e[c]))}else i={};for(var u in t)u in i||(i[u]=ve(t,u));return e&&Object.isExtensible(e)&&(e._normalized=i),N(i,"$stable",s),N(i,"$key",l),N(i,"$hasNormal",o),i}function fe(n,e,t,a){var i=function(){var e=pn;dn(n);var t=arguments.length?a.apply(null,arguments):a({}),i=(t=t&&"object"==typeof t&&!r(t)?[t]:Wn(t))&&t[0];return dn(e),t&&(!i||1===t.length&&i.isComment&&!ge(i))?void 0:t};return a.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function ve(n,e){return function(){return n[e]}}function be(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};N(e,"_v_attr_proxy",!0),ye(e,n.$attrs,a,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||ye(n._listenersProxy={},n.$listeners,a,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||we(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:A(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return qn(n,e,t)}))}}}function ye(n,e,t,a,r){var i=!1;for(var o in e)o in n?e[o]!==t[o]&&(i=!0):(i=!0,xe(n,o,a,r));for(var o in n)o in e||(i=!0,delete n[o]);return i}function xe(n,e,t,a){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[a][e]}})}function we(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var je=null;function ke(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function _e(n){if(r(n))for(var e=0;e<n.length;e++){var t=n[e];if(o(t)&&(o(t.componentOptions)||ge(t)))return t}}function Ce(n,e,t,a,p,d){return(r(t)||l(t))&&(p=a,a=t,t=void 0),s(d)&&(p=2),function(n,e,t,a,l){if(o(t)&&o(t.__ob__))return gn();o(t)&&o(t.is)&&(e=t.is);if(!e)return gn();0;r(a)&&c(a[0])&&((t=t||{}).scopedSlots={default:a[0]},a.length=0);2===l?a=Wn(a):1===l&&(a=function(n){for(var e=0;e<n.length;e++)if(r(n[e]))return Array.prototype.concat.apply([],n);return n}(a));var p,d;if("string"==typeof e){var h=void 0;d=n.$vnode&&n.$vnode.ns||R.getTagNamespace(e),p=R.isReservedTag(e)?new hn(R.parsePlatformTagName(e),t,a,void 0,void 0,n):t&&t.pre||!o(h=Et(n.$options,"components",e))?new hn(e,t,a,void 0,void 0,n):xt(h,t,n,a,e)}else p=xt(e,t,n,a);return r(p)?p:o(p)?(o(d)&&function n(e,t,a){e.ns=t,"foreignObject"===e.tag&&(t=void 0,a=!0);if(o(e.children))for(var r=0,l=e.children.length;r<l;r++){var c=e.children[r];o(c.tag)&&(i(c.ns)||s(a)&&"svg"!==c.tag)&&n(c,t,a)}}(p,d),o(t)&&function(n){u(n.style)&&Re(n.style);u(n.class)&&Re(n.class)}(t),p):gn()}(n,e,t,a,p)}function Se(n,e,t){wn();try{if(e)for(var a=e;a=a.$parent;){var r=a.$options.errorCaptured;if(r)for(var i=0;i<r.length;i++)try{if(!1===r[i].call(a,n,e,t))return}catch(n){ze(n,a,"errorCaptured hook")}}ze(n,e,t)}finally{jn()}}function Te(n,e,t,a,r){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&m(i)&&!i._handled&&(i.catch((function(n){return Se(n,a,r+" (Promise/async)")})),i._handled=!0)}catch(n){Se(n,a,r)}return i}function ze(n,e,t){if(R.errorHandler)try{return R.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ae(e,null,"config.errorHandler")}Ae(n,e,t)}function Ae(n,e,t){if(!X||"undefined"==typeof console)throw n;console.error(n)}var Ee,Ie=!1,Me=[],Oe=!1;function Be(){Oe=!1;var n=Me.slice(0);Me.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Pe=Promise.resolve();Ee=function(){Pe.then(Be),Y&&setTimeout(O)},Ie=!0}else if(Q||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ee="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Be)}:function(){setTimeout(Be,0)};else{var Je=1,Le=new MutationObserver(Be),De=document.createTextNode(String(Je));Le.observe(De,{characterData:!0}),Ee=function(){Je=(Je+1)%2,De.data=String(Je)},Ie=!0}function $e(n,e){var t;if(Me.push((function(){if(n)try{n.call(e)}catch(n){Se(n,e,"nextTick")}else t&&t(e)})),Oe||(Oe=!0,Ee()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function qe(n){return function(e,t){if(void 0===t&&(t=pn),t)return function(n,e,t){var a=n.$options;a[e]=St(a[e],t)}(t,n,e)}}qe("beforeMount"),qe("mounted"),qe("beforeUpdate"),qe("updated"),qe("beforeDestroy"),qe("destroyed"),qe("activated"),qe("deactivated"),qe("serverPrefetch"),qe("renderTracked"),qe("renderTriggered"),qe("errorCaptured");var Ve=new cn;function Re(n){return function n(e,t){var a,i,o=r(e);if(!o&&!u(e)||e.__v_skip||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(o)for(a=e.length;a--;)n(e[a],t);else if($n(e))n(e.value,t);else for(i=Object.keys(e),a=i.length;a--;)n(e[i[a]],t)}(n,Ve),Ve.clear(),n}var Fe,He=0,Ne=function(){function n(n,e,t,a,r){var i,o;i=this,void 0===(o=Vn&&!Vn._vm?Vn:n?n._scope:void 0)&&(o=Vn),o&&o.active&&o.effects.push(i),(this.vm=n)&&r&&(n._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!U.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;wn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Se(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Re(n),jn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():dt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Te(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Ue(n,e){Fe.$on(n,e)}function Ge(n,e){Fe.$off(n,e)}function Xe(n,e){var t=Fe;return function a(){var r=e.apply(null,arguments);null!==r&&t.$off(n,a)}}function We(n,e,t){Fe=n,Un(e,t||{},Ue,Ge,Xe,n),Fe=void 0}var Qe=null;function Ke(n){var e=Qe;return Qe=n,function(){Qe=e}}function Ze(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Ye(n,e){if(e){if(n._directInactive=!1,Ze(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Ye(n.$children[t]);nt(n,"activated")}}function nt(n,e,t,a){void 0===a&&(a=!0),wn();var r=pn;a&&dn(n);var i=n.$options[e],o="".concat(e," hook");if(i)for(var s=0,l=i.length;s<l;s++)Te(i[s],n,t||null,n,o);n._hasHookEvent&&n.$emit("hook:"+e),a&&dn(r),jn()}var et=[],tt=[],at={},rt=!1,it=!1,ot=0;var st=0,lt=Date.now;if(X&&!Q){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var ut=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function pt(){var n,e;for(st=lt(),it=!0,et.sort(ut),ot=0;ot<et.length;ot++)(n=et[ot]).before&&n.before(),e=n.id,at[e]=null,n.run();var t=tt.slice(),a=et.slice();ot=et.length=tt.length=0,at={},rt=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Ye(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],a=t.vm;a&&a._watcher===t&&a._isMounted&&!a._isDestroyed&&nt(a,"updated")}}(a),function(){for(var n=0;n<bn.length;n++){var e=bn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}bn.length=0}(),sn&&R.devtools&&sn.emit("flush")}function dt(n){var e=n.id;if(null==at[e]&&(n!==yn.target||!n.noRecurse)){if(at[e]=!0,it){for(var t=et.length-1;t>ot&&et[t].id>n.id;)t--;et.splice(t+1,0,n)}else et.push(n);rt||(rt=!0,$e(pt))}}function ht(n,e){if(n){for(var t=Object.create(null),a=un?Reflect.ownKeys(n):Object.keys(n),r=0;r<a.length;r++){var i=a[r];if("__ob__"!==i){var o=n[i].from;if(o in e._provided)t[i]=e._provided[o];else if("default"in n[i]){var s=n[i].default;t[i]=c(s)?s.call(e):s}else 0}}return t}}function gt(n,e,t,i,o){var l,c=this,u=o.options;j(i,"_uid")?(l=Object.create(i))._original=i:(l=i,i=i._original);var p=s(u._compiled),d=!p;this.data=n,this.props=e,this.children=t,this.parent=i,this.listeners=n.on||a,this.injections=ht(u.inject,i),this.slots=function(){return c.$slots||me(i,n.scopedSlots,c.$slots=de(t,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return me(i,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=me(i,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,e,t,a){var o=Ce(l,n,e,t,a,d);return o&&!r(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(n,e,t,a){return Ce(l,n,e,t,a,d)}}function mt(n,e,t,a,r){var i=fn(n);return i.fnContext=t,i.fnOptions=a,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function ft(n,e){for(var t in e)n[C(t)]=e[t]}function vt(n){return n.name||n.__name||n._componentTag}pe(gt.prototype);var bt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;bt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},a=n.data.inlineTemplate;o(a)&&(t.render=a.render,t.staticRenderFns=a.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Qe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,i){var o=r.data.scopedSlots,s=n.$scopedSlots,l=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key||!o&&n.$scopedSlots.$key),c=!!(i||n.$options._renderChildren||l),u=n.$vnode;n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r),n.$options._renderChildren=i;var p=r.data.attrs||a;n._attrsProxy&&ye(n._attrsProxy,p,u.data&&u.data.attrs||a,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||a;var d=n.$options._parentListeners;if(n._listenersProxy&&ye(n._listenersProxy,t,d||a,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,We(n,t,d),e&&n.$options.props){zn(!1);for(var h=n._props,g=n.$options._propKeys||[],m=0;m<g.length;m++){var f=g[m],v=n.$options.props;h[f]=It(f,v,e,n)}zn(!0),n.$options.propsData=e}c&&(n.$slots=de(i,r.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,a=n.componentInstance;a._isMounted||(a._isMounted=!0,nt(a,"mounted")),n.data.keepAlive&&(t._isMounted?((e=a)._inactive=!1,tt.push(e)):Ye(a,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ze(e))||e._inactive)){e._inactive=!0;for(var a=0;a<e.$children.length;a++)n(e.$children[a]);nt(e,"deactivated")}}(e,!0):e.$destroy())}},yt=Object.keys(bt);function xt(n,e,t,l,c){if(!i(n)){var p=t.$options._base;if(u(n)&&(n=p.extend(n)),"function"==typeof n){var d;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&o(n.errorComp))return n.errorComp;if(o(n.resolved))return n.resolved;var t=je;if(t&&o(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&o(n.loadingComp))return n.loadingComp;if(t&&!o(n.owners)){var a=n.owners=[t],r=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return x(a,t)}));var p=function(n){for(var e=0,t=a.length;e<t;e++)a[e].$forceUpdate();n&&(a.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=D((function(t){n.resolved=ke(t,e),r?a.length=0:p(!0)})),h=D((function(e){o(n.errorComp)&&(n.error=!0,p(!0))})),g=n(d,h);return u(g)&&(m(g)?i(n.resolved)&&g.then(d,h):m(g.component)&&(g.component.then(d,h),o(g.error)&&(n.errorComp=ke(g.error,e)),o(g.loading)&&(n.loadingComp=ke(g.loading,e),0===g.delay?n.loading=!0:l=setTimeout((function(){l=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,p(!1))}),g.delay||200)),o(g.timeout)&&(c=setTimeout((function(){c=null,i(n.resolved)&&h(null)}),g.timeout)))),r=!1,n.loading?n.loadingComp:n.resolved}}(d=n,p)))return function(n,e,t,a,r){var i=gn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:a,tag:r},i}(d,e,t,l,c);e=e||{},Nt(n),o(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",a=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var i=e.on||(e.on={}),s=i[a],l=e.model.callback;o(s)?(r(s)?-1===s.indexOf(l):s!==l)&&(i[a]=[l].concat(s)):i[a]=l}(n.options,e);var h=function(n,e,t){var a=e.options.props;if(!i(a)){var r={},s=n.attrs,l=n.props;if(o(s)||o(l))for(var c in a){var u=z(c);Xn(r,l,c,u,!0)||Xn(r,s,c,u,!1)}return r}}(e,n);if(s(n.options.functional))return function(n,e,t,i,s){var l=n.options,c={},u=l.props;if(o(u))for(var p in u)c[p]=It(p,u,e||a);else o(t.attrs)&&ft(c,t.attrs),o(t.props)&&ft(c,t.props);var d=new gt(t,c,s,i,n),h=l.render.call(null,d._c,d);if(h instanceof hn)return mt(h,t,d.parent,l,d);if(r(h)){for(var g=Wn(h)||[],m=new Array(g.length),f=0;f<g.length;f++)m[f]=mt(g[f],t,d.parent,l,d);return m}}(n,h,e,t,l);var g=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<yt.length;t++){var a=yt[t],r=e[a],i=bt[a];r===i||r&&r._merged||(e[a]=r?wt(i,r):i)}}(e);var v=vt(n.options)||c;return new hn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:h,listeners:g,tag:c,children:l},d)}}}function wt(n,e){var t=function(t,a){n(t,a),e(t,a)};return t._merged=!0,t}var jt=O,kt=R.optionMergeStrategies;function _t(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var a,r,i,o=un?Reflect.ownKeys(e):Object.keys(e),s=0;s<o.length;s++)"__ob__"!==(a=o[s])&&(r=n[a],i=e[a],t&&j(n,a)?r!==i&&d(r)&&d(i)&&_t(r,i):On(n,a,i));return n}function Ct(n,e,t){return t?function(){var a=c(e)?e.call(t,t):e,r=c(n)?n.call(t,t):n;return a?_t(a,r):r}:e?n?function(){return _t(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function St(n,e){var t=e?n?n.concat(e):r(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Tt(n,e,t,a){var r=Object.create(n||null);return e?I(r,e):r}kt.data=function(n,e,t){return t?Ct(n,e,t):e&&"function"!=typeof e?n:Ct(n,e)},V.forEach((function(n){kt[n]=St})),q.forEach((function(n){kt[n+"s"]=Tt})),kt.watch=function(n,e,t,a){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var i={};for(var o in I(i,n),e){var s=i[o],l=e[o];s&&!r(s)&&(s=[s]),i[o]=s?s.concat(l):r(l)?l:[l]}return i},kt.props=kt.methods=kt.inject=kt.computed=function(n,e,t,a){if(!n)return e;var r=Object.create(null);return I(r,n),e&&I(r,e),r},kt.provide=function(n,e){return n?function(){var t=Object.create(null);return _t(t,c(n)?n.call(this):n),e&&_t(t,c(e)?e.call(this):e,!1),t}:e};var zt=function(n,e){return void 0===e?n:e};function At(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var a,i,o={};if(r(t))for(a=t.length;a--;)"string"==typeof(i=t[a])&&(o[C(i)]={type:null});else if(d(t))for(var s in t)i=t[s],o[C(s)]=d(i)?i:{type:i};else 0;n.props=o}}(e),function(n,e){var t=n.inject;if(t){var a=n.inject={};if(r(t))for(var i=0;i<t.length;i++)a[t[i]]={from:t[i]};else if(d(t))for(var o in t){var s=t[o];a[o]=d(s)?I({from:o},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var a=e[t];c(a)&&(e[t]={bind:a,update:a})}}(e),!e._base&&(e.extends&&(n=At(n,e.extends,t)),e.mixins))for(var a=0,i=e.mixins.length;a<i;a++)n=At(n,e.mixins[a],t);var o,s={};for(o in n)l(o);for(o in e)j(n,o)||l(o);function l(a){var r=kt[a]||zt;s[a]=r(n[a],e[a],t,a)}return s}function Et(n,e,t,a){if("string"==typeof t){var r=n[e];if(j(r,t))return r[t];var i=C(t);if(j(r,i))return r[i];var o=S(i);return j(r,o)?r[o]:r[t]||r[i]||r[o]}}function It(n,e,t,a){var r=e[n],i=!j(t,n),o=t[n],s=Pt(Boolean,r.type);if(s>-1)if(i&&!j(r,"default"))o=!1;else if(""===o||o===z(n)){var l=Pt(String,r.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(n,e,t){if(!j(e,"default"))return;var a=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(a)&&"Function"!==Ot(e.type)?a.call(n):a}(a,r,n);var u=Tn;zn(!0),In(o),zn(u)}return o}var Mt=/^\s*function (\w+)/;function Ot(n){var e=n&&n.toString().match(Mt);return e?e[1]:""}function Bt(n,e){return Ot(n)===Ot(e)}function Pt(n,e){if(!r(e))return Bt(e,n)?0:-1;for(var t=0,a=e.length;t<a;t++)if(Bt(e[t],n))return t;return-1}var Jt={enumerable:!0,configurable:!0,get:O,set:O};function Lt(n,e,t){Jt.get=function(){return this[e][t]},Jt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Jt)}function Dt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},a=n._props=Jn({}),r=n.$options._propKeys=[];n.$parent&&zn(!1);var i=function(i){r.push(i);var o=It(i,e,t,n);Mn(a,i,o),i in n||Lt(n,"_props",i)};for(var o in e)i(o);zn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var a=n._setupContext=be(n);dn(n),wn();var r=Te(t,null,[n._props||Jn({}),a],n,"setup");if(jn(),dn(),c(r))e.render=r;else if(u(r))if(n._setupState=r,r.__sfc){var i=n._setupProxy={};for(var o in r)"__sfc"!==o&&qn(i,r,o)}else for(var o in r)H(o)||qn(n,r,o);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?O:A(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=c(e)?function(n,e){wn();try{return n.call(e,e)}catch(n){return Se(n,e,"data()"),{}}finally{jn()}}(e,n):e||{})||(e={});var t=Object.keys(e),a=n.$options.props,r=(n.$options.methods,t.length);for(;r--;){var i=t[r];0,a&&j(a,i)||H(i)||Lt(n,"_data",i)}var o=In(e);o&&o.vmCount++}(n);else{var t=In(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),a=on();for(var r in e){var i=e[r],o=c(i)?i:i.get;0,a||(t[r]=new Ne(n,o||O,O,$t)),r in n||qt(n,r,i)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var a=e[t];if(r(a))for(var i=0;i<a.length;i++)Ft(n,t,a[i]);else Ft(n,t,a)}}(n,e.watch)}var $t={lazy:!0};function qt(n,e,t){var a=!on();c(t)?(Jt.get=a?Vt(e):Rt(t),Jt.set=O):(Jt.get=t.get?a&&!1!==t.cache?Vt(e):Rt(t.get):O,Jt.set=t.set||O),Object.defineProperty(n,e,Jt)}function Vt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),yn.target&&e.depend(),e.value}}function Rt(n){return function(){return n.call(this,this)}}function Ft(n,e,t,a){return d(t)&&(a=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,a)}var Ht=0;function Nt(n){var e=n.options;if(n.super){var t=Nt(n.super);if(t!==n.superOptions){n.superOptions=t;var a=function(n){var e,t=n.options,a=n.sealedOptions;for(var r in t)t[r]!==a[r]&&(e||(e={}),e[r]=t[r]);return e}(n);a&&I(n.extendOptions,a),(e=n.options=At(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Ut(n){this._init(n)}function Gt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,a=t.cid,r=n._Ctor||(n._Ctor={});if(r[a])return r[a];var i=vt(n)||vt(t.options);var o=function(n){this._init(n)};return(o.prototype=Object.create(t.prototype)).constructor=o,o.cid=e++,o.options=At(t.options,n),o.super=t,o.options.props&&function(n){var e=n.options.props;for(var t in e)Lt(n.prototype,"_props",t)}(o),o.options.computed&&function(n){var e=n.options.computed;for(var t in e)qt(n.prototype,t,e[t])}(o),o.extend=t.extend,o.mixin=t.mixin,o.use=t.use,q.forEach((function(n){o[n]=t[n]})),i&&(o.options.components[i]=o),o.superOptions=t.options,o.extendOptions=n,o.sealedOptions=I({},o.options),r[a]=o,o}}function Xt(n){return n&&(vt(n.Ctor.options)||n.tag)}function Wt(n,e){return r(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!h(n)&&n.test(e)}function Qt(n,e){var t=n.cache,a=n.keys,r=n._vnode;for(var i in t){var o=t[i];if(o){var s=o.name;s&&!e(s)&&Kt(t,i,a,r)}}}function Kt(n,e,t,a){var r=n[e];!r||a&&r.tag===a.tag||r.componentInstance.$destroy(),n[e]=null,x(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new Rn(!0),e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),a=e._parentVnode;t.parent=e.parent,t._parentVnode=a;var r=a.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=At(Nt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&We(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=de(e._renderChildren,r),n.$scopedSlots=t?me(n.$parent,t.data.scopedSlots,n.$slots):a,n._c=function(e,t,a,r){return Ce(n,e,t,a,r,!1)},n.$createElement=function(e,t,a,r){return Ce(n,e,t,a,r,!0)};var i=t&&t.data;Mn(n,"$attrs",i&&i.attrs||a,null,!0),Mn(n,"$listeners",e._parentListeners||a,null,!0)}(e),nt(e,"beforeCreate",void 0,!1),function(n){var e=ht(n.$options.inject,n);e&&(zn(!1),Object.keys(e).forEach((function(t){Mn(n,t,e[t])})),zn(!0))}(e),Dt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!u(t))return;for(var a=Fn(n),r=un?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var o=r[i];Object.defineProperty(a,o,Object.getOwnPropertyDescriptor(t,o))}}}(e),nt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Ut),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=On,n.prototype.$delete=Bn,n.prototype.$watch=function(n,e,t){if(d(e))return Ft(this,n,e,t);(t=t||{}).user=!0;var a=new Ne(this,n,e,t);if(t.immediate){var r='callback for immediate watcher "'.concat(a.expression,'"');wn(),Te(e,this,[a.value],this,r),jn()}return function(){a.teardown()}}}(Ut),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var a=this;if(r(n))for(var i=0,o=n.length;i<o;i++)a.$on(n[i],t);else(a._events[n]||(a._events[n]=[])).push(t),e.test(n)&&(a._hasHookEvent=!0);return a},n.prototype.$once=function(n,e){var t=this;function a(){t.$off(n,a),e.apply(t,arguments)}return a.fn=e,t.$on(n,a),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(r(n)){for(var a=0,i=n.length;a<i;a++)t.$off(n[a],e);return t}var o,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((o=s[l])===e||o.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?E(t):t;for(var a=E(arguments,1),r='event handler for "'.concat(n,'"'),i=0,o=t.length;i<o;i++)Te(t[i],e,a,e,r)}return e}}(Ut),function(n){n.prototype._update=function(n,e){var t=this,a=t.$el,r=t._vnode,i=Ke(t);t._vnode=n,t.$el=r?t.__patch__(r,n):t.__patch__(t.$el,n,e,!1),i(),a&&(a.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var o=t;o&&o.$vnode&&o.$parent&&o.$vnode===o.$parent._vnode;)o.$parent.$el=o.$el,o=o.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){nt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),nt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Ut),function(n){pe(n.prototype),n.prototype.$nextTick=function(n){return $e(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,a=t.render,i=t._parentVnode;i&&e._isMounted&&(e.$scopedSlots=me(e.$parent,i.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&we(e._slotsProxy,e.$scopedSlots)),e.$vnode=i;try{dn(e),je=e,n=a.call(e._renderProxy,e.$createElement)}catch(t){Se(t,e,"render"),n=e._vnode}finally{je=null,dn()}return r(n)&&1===n.length&&(n=n[0]),n instanceof hn||(n=gn()),n.parent=i,n}}(Ut);var Zt=[String,RegExp,Array],Yt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zt,exclude:Zt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,a=this.keyToCache;if(t){var r=t.tag,i=t.componentInstance,o=t.componentOptions;n[a]={name:Xt(o),tag:r,componentInstance:i},e.push(a),this.max&&e.length>parseInt(this.max)&&Kt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Kt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Qt(n,(function(n){return Wt(e,n)}))})),this.$watch("exclude",(function(e){Qt(n,(function(n){return!Wt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=_e(n),t=e&&e.componentOptions;if(t){var a=Xt(t),r=this.include,i=this.exclude;if(r&&(!a||!Wt(r,a))||i&&a&&Wt(i,a))return e;var o=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;o[l]?(e.componentInstance=o[l].componentInstance,x(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return R}};Object.defineProperty(n,"config",e),n.util={warn:jt,extend:I,mergeOptions:At,defineReactive:Mn},n.set=On,n.delete=Bn,n.nextTick=$e,n.observable=function(n){return In(n),n},n.options=Object.create(null),q.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,Yt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=E(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=At(this.options,n),this}}(n),Gt(n),function(n){q.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Ut),Object.defineProperty(Ut.prototype,"$isServer",{get:on}),Object.defineProperty(Ut.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Ut,"FunctionalRenderContext",{value:gt}),Ut.version="2.7.14";var na=b("style,class"),ea=b("input,textarea,option,select,progress"),ta=b("contenteditable,draggable,spellcheck"),aa=b("events,caret,typing,plaintext-only"),ra=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ia="http://www.w3.org/1999/xlink",oa=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},sa=function(n){return oa(n)?n.slice(6,n.length):""},la=function(n){return null==n||!1===n};function ca(n){for(var e=n.data,t=n,a=n;o(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(e=ua(a.data,e));for(;o(t=t.parent);)t&&t.data&&(e=ua(e,t.data));return function(n,e){if(o(n)||o(e))return pa(n,da(e));return""}(e.staticClass,e.class)}function ua(n,e){return{staticClass:pa(n.staticClass,e.staticClass),class:o(n.class)?[n.class,e.class]:e.class}}function pa(n,e){return n?e?n+" "+e:n:e||""}function da(n){return Array.isArray(n)?function(n){for(var e,t="",a=0,r=n.length;a<r;a++)o(e=da(n[a]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var ha={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ga=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),ma=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),fa=function(n){return ga(n)||ma(n)};var va=Object.create(null);var ba=b("text,number,password,search,email,tel,url");var ya=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(ha[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),xa={create:function(n,e){wa(e)},update:function(n,e){n.data.ref!==e.data.ref&&(wa(n,!0),wa(e))},destroy:function(n){wa(n,!0)}};function wa(n,e){var t=n.data.ref;if(o(t)){var a=n.context,i=n.componentInstance||n.elm,s=e?null:i,l=e?void 0:i;if(c(t))Te(t,a,[s],a,"template ref function");else{var u=n.data.refInFor,p="string"==typeof t||"number"==typeof t,d=$n(t),h=a.$refs;if(p||d)if(u){var g=p?h[t]:t.value;e?r(g)&&x(g,i):r(g)?g.includes(i)||g.push(i):p?(h[t]=[i],ja(a,t,h[t])):t.value=[i]}else if(p){if(e&&h[t]!==i)return;h[t]=l,ja(a,t,s)}else if(d){if(e&&t.value!==i)return;t.value=s}else 0}}}function ja(n,e,t){var a=n._setupState;a&&j(a,e)&&($n(a[e])?a[e].value=t:a[e]=t)}var ka=new hn("",{},[]),_a=["create","activate","update","remove","destroy"];function Ca(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&o(n.data)===o(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,a=o(t=n.data)&&o(t=t.attrs)&&t.type,r=o(t=e.data)&&o(t=t.attrs)&&t.type;return a===r||ba(a)&&ba(r)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function Sa(n,e,t){var a,r,i={};for(a=e;a<=t;++a)o(r=n[a].key)&&(i[r]=a);return i}var Ta={create:za,update:za,destroy:function(n){za(n,ka)}};function za(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,a,r,i=n===ka,o=e===ka,s=Ea(n.data.directives,n.context),l=Ea(e.data.directives,e.context),c=[],u=[];for(t in l)a=s[t],r=l[t],a?(r.oldValue=a.value,r.oldArg=a.arg,Ma(r,"update",e,n),r.def&&r.def.componentUpdated&&u.push(r)):(Ma(r,"bind",e,n),r.def&&r.def.inserted&&c.push(r));if(c.length){var p=function(){for(var t=0;t<c.length;t++)Ma(c[t],"inserted",e,n)};i?Gn(e,"insert",p):p()}u.length&&Gn(e,"postpatch",(function(){for(var t=0;t<u.length;t++)Ma(u[t],"componentUpdated",e,n)}));if(!i)for(t in s)l[t]||Ma(s[t],"unbind",n,n,o)}(n,e)}var Aa=Object.create(null);function Ea(n,e){var t,a,r=Object.create(null);if(!n)return r;for(t=0;t<n.length;t++){if((a=n[t]).modifiers||(a.modifiers=Aa),r[Ia(a)]=a,e._setupState&&e._setupState.__sfc){var i=a.def||Et(e,"_setupState","v-"+a.name);a.def="function"==typeof i?{bind:i,update:i}:i}a.def=a.def||Et(e.$options,"directives",a.name)}return r}function Ia(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Ma(n,e,t,a,r){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,a,r)}catch(a){Se(a,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Oa=[xa,Ta];function Ba(n,e){var t=e.componentOptions;if(!(o(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var a,r,l=e.elm,c=n.data.attrs||{},u=e.data.attrs||{};for(a in(o(u.__ob__)||s(u._v_attr_proxy))&&(u=e.data.attrs=I({},u)),u)r=u[a],c[a]!==r&&Pa(l,a,r,e.data.pre);for(a in(Q||Z)&&u.value!==c.value&&Pa(l,"value",u.value),c)i(u[a])&&(oa(a)?l.removeAttributeNS(ia,sa(a)):ta(a)||l.removeAttribute(a))}}function Pa(n,e,t,a){a||n.tagName.indexOf("-")>-1?Ja(n,e,t):ra(e)?la(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):ta(e)?n.setAttribute(e,function(n,e){return la(e)||"false"===e?"false":"contenteditable"===n&&aa(e)?e:"true"}(e,t)):oa(e)?la(t)?n.removeAttributeNS(ia,sa(e)):n.setAttributeNS(ia,e,t):Ja(n,e,t)}function Ja(n,e,t){if(la(t))n.removeAttribute(e);else{if(Q&&!K&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var a=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",a)};n.addEventListener("input",a),n.__ieph=!0}n.setAttribute(e,t)}}var La={create:Ba,update:Ba};function Da(n,e){var t=e.elm,a=e.data,r=n.data;if(!(i(a.staticClass)&&i(a.class)&&(i(r)||i(r.staticClass)&&i(r.class)))){var s=ca(e),l=t._transitionClasses;o(l)&&(s=pa(s,da(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var $a,qa={create:Da,update:Da};function Va(n,e,t){var a=$a;return function r(){var i=e.apply(null,arguments);null!==i&&Ha(n,r,t,a)}}var Ra=Ie&&!(en&&Number(en[1])<=53);function Fa(n,e,t,a){if(Ra){var r=st,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=r||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}$a.addEventListener(n,e,an?{capture:t,passive:a}:t)}function Ha(n,e,t,a){(a||$a).removeEventListener(n,e._wrapper||e,t)}function Na(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},a=n.data.on||{};$a=e.elm||n.elm,function(n){if(o(n.__r)){var e=Q?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}o(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Un(t,a,Fa,Ha,Va,e.context),$a=void 0}}var Ua,Ga={create:Na,update:Na,destroy:function(n){return Na(n,ka)}};function Xa(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,a,r=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(o(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.domProps=I({},c)),l)t in c||(r[t]="");for(t in c){if(a=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),a===l[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=a;var u=i(a)?"":String(a);Wa(r,u)&&(r.value=u)}else if("innerHTML"===t&&ma(r.tagName)&&i(r.innerHTML)){(Ua=Ua||document.createElement("div")).innerHTML="<svg>".concat(a,"</svg>");for(var p=Ua.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;p.firstChild;)r.appendChild(p.firstChild)}else if(a!==l[t])try{r[t]=a}catch(n){}}}}function Wa(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,a=n._vModifiers;if(o(a)){if(a.number)return v(t)!==v(e);if(a.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Qa={create:Xa,update:Xa},Ka=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var a=n.split(t);a.length>1&&(e[a[0].trim()]=a[1].trim())}})),e}));function Za(n){var e=Ya(n.style);return n.staticStyle?I(n.staticStyle,e):e}function Ya(n){return Array.isArray(n)?M(n):"string"==typeof n?Ka(n):n}var nr,er=/^--/,tr=/\s*!important$/,ar=function(n,e,t){if(er.test(e))n.style.setProperty(e,t);else if(tr.test(t))n.style.setProperty(z(e),t.replace(tr,""),"important");else{var a=ir(e);if(Array.isArray(t))for(var r=0,i=t.length;r<i;r++)n.style[a]=t[r];else n.style[a]=t}},rr=["Webkit","Moz","ms"],ir=k((function(n){if(nr=nr||document.createElement("div").style,"filter"!==(n=C(n))&&n in nr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<rr.length;t++){var a=rr[t]+e;if(a in nr)return a}}));function or(n,e){var t=e.data,a=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(a.staticStyle)&&i(a.style))){var r,s,l=e.elm,c=a.staticStyle,u=a.normalizedStyle||a.style||{},p=c||u,d=Ya(e.data.style)||{};e.data.normalizedStyle=o(d.__ob__)?I({},d):d;var h=function(n,e){var t,a={};if(e)for(var r=n;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Za(r.data))&&I(a,t);(t=Za(n.data))&&I(a,t);for(var i=n;i=i.parent;)i.data&&(t=Za(i.data))&&I(a,t);return a}(e,!0);for(s in p)i(h[s])&&ar(l,s,"");for(s in h)(r=h[s])!==p[s]&&ar(l,s,null==r?"":r)}}var sr={create:or,update:or},lr=/\s+/;function cr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function ur(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),a=" "+e+" ";t.indexOf(a)>=0;)t=t.replace(a," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function pr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,dr(n.name||"v")),I(e,n),e}return"string"==typeof n?dr(n):void 0}}var dr=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),hr=X&&!K,gr="transition",mr="transitionend",fr="animation",vr="animationend";hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(gr="WebkitTransition",mr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(fr="WebkitAnimation",vr="webkitAnimationEnd"));var br=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function yr(n){br((function(){br(n)}))}function xr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),cr(n,e))}function wr(n,e){n._transitionClasses&&x(n._transitionClasses,e),ur(n,e)}function jr(n,e,t){var a=_r(n,e),r=a.type,i=a.timeout,o=a.propCount;if(!r)return t();var s="transition"===r?mr:vr,l=0,c=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++l>=o&&c()};setTimeout((function(){l<o&&c()}),i+1),n.addEventListener(s,u)}var kr=/\b(transform|all)(,|$)/;function _r(n,e){var t,a=window.getComputedStyle(n),r=(a[gr+"Delay"]||"").split(", "),i=(a[gr+"Duration"]||"").split(", "),o=Cr(r,i),s=(a[fr+"Delay"]||"").split(", "),l=(a[fr+"Duration"]||"").split(", "),c=Cr(s,l),u=0,p=0;return"transition"===e?o>0&&(t="transition",u=o,p=i.length):"animation"===e?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(o,c))>0?o>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&kr.test(a[gr+"Property"])}}function Cr(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Sr(e)+Sr(n[t])})))}function Sr(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Tr(n,e){var t=n.elm;o(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var a=pr(n.data.transition);if(!i(a)&&!o(t._enterCb)&&1===t.nodeType){for(var r=a.css,s=a.type,l=a.enterClass,p=a.enterToClass,d=a.enterActiveClass,h=a.appearClass,g=a.appearToClass,m=a.appearActiveClass,f=a.beforeEnter,b=a.enter,y=a.afterEnter,x=a.enterCancelled,w=a.beforeAppear,j=a.appear,k=a.afterAppear,_=a.appearCancelled,C=a.duration,S=Qe,T=Qe.$vnode;T&&T.parent;)S=T.context,T=T.parent;var z=!S._isMounted||!n.isRootInsert;if(!z||j||""===j){var A=z&&h?h:l,E=z&&m?m:d,I=z&&g?g:p,M=z&&w||f,O=z&&c(j)?j:b,B=z&&k||y,P=z&&_||x,J=v(u(C)?C.enter:C);0;var L=!1!==r&&!K,$=Er(O),q=t._enterCb=D((function(){L&&(wr(t,I),wr(t,E)),q.cancelled?(L&&wr(t,A),P&&P(t)):B&&B(t),t._enterCb=null}));n.data.show||Gn(n,"insert",(function(){var e=t.parentNode,a=e&&e._pending&&e._pending[n.key];a&&a.tag===n.tag&&a.elm._leaveCb&&a.elm._leaveCb(),O&&O(t,q)})),M&&M(t),L&&(xr(t,A),xr(t,E),yr((function(){wr(t,A),q.cancelled||(xr(t,I),$||(Ar(J)?setTimeout(q,J):jr(t,s,q)))}))),n.data.show&&(e&&e(),O&&O(t,q)),L||$||q()}}}function zr(n,e){var t=n.elm;o(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var a=pr(n.data.transition);if(i(a)||1!==t.nodeType)return e();if(!o(t._leaveCb)){var r=a.css,s=a.type,l=a.leaveClass,c=a.leaveToClass,p=a.leaveActiveClass,d=a.beforeLeave,h=a.leave,g=a.afterLeave,m=a.leaveCancelled,f=a.delayLeave,b=a.duration,y=!1!==r&&!K,x=Er(h),w=v(u(b)?b.leave:b);0;var j=t._leaveCb=D((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(wr(t,c),wr(t,p)),j.cancelled?(y&&wr(t,l),m&&m(t)):(e(),g&&g(t)),t._leaveCb=null}));f?f(k):k()}function k(){j.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(xr(t,l),xr(t,p),yr((function(){wr(t,l),j.cancelled||(xr(t,c),x||(Ar(w)?setTimeout(j,w):jr(t,s,j)))}))),h&&h(t,j),y||x||j())}}function Ar(n){return"number"==typeof n&&!isNaN(n)}function Er(n){if(i(n))return!1;var e=n.fns;return o(e)?Er(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Ir(n,e){!0!==e.data.show&&Tr(e)}var Mr=function(n){var e,t,a={},c=n.modules,u=n.nodeOps;for(e=0;e<_a.length;++e)for(a[_a[e]]=[],t=0;t<c.length;++t)o(c[t][_a[e]])&&a[_a[e]].push(c[t][_a[e]]);function p(n){var e=u.parentNode(n);o(e)&&u.removeChild(e,n)}function d(n,e,t,r,i,l,c){if(o(n.elm)&&o(l)&&(n=l[c]=fn(n)),n.isRootInsert=!i,!function(n,e,t,r){var i=n.data;if(o(i)){var l=o(n.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(n,!1),o(n.componentInstance))return h(n,e),g(t,n.elm,r),s(l)&&function(n,e,t,r){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](ka,s);e.push(s);break}g(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var p=n.data,d=n.children,f=n.tag;o(f)?(n.elm=n.ns?u.createElementNS(n.ns,f):u.createElement(f,n),y(n),m(n,d,e),o(p)&&v(n,e),g(t,n.elm,r)):s(n.isComment)?(n.elm=u.createComment(n.text),g(t,n.elm,r)):(n.elm=u.createTextNode(n.text),g(t,n.elm,r))}}function h(n,e){o(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(v(n,e),y(n)):(wa(n),e.push(n))}function g(n,e,t){o(n)&&(o(t)?u.parentNode(t)===n&&u.insertBefore(n,e,t):u.appendChild(n,e))}function m(n,e,t){if(r(e)){0;for(var a=0;a<e.length;++a)d(e[a],t,n.elm,null,!0,e,a)}else l(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return o(n.tag)}function v(n,t){for(var r=0;r<a.create.length;++r)a.create[r](ka,n);o(e=n.data.hook)&&(o(e.create)&&e.create(ka,n),o(e.insert)&&t.push(n))}function y(n){var e;if(o(e=n.fnScopeId))u.setStyleScope(n.elm,e);else for(var t=n;t;)o(e=t.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e),t=t.parent;o(e=Qe)&&e!==n.context&&e!==n.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e)}function x(n,e,t,a,r,i){for(;a<=r;++a)d(t[a],i,n,e,!1,t,a)}function w(n){var e,t,r=n.data;if(o(r))for(o(e=r.hook)&&o(e=e.destroy)&&e(n),e=0;e<a.destroy.length;++e)a.destroy[e](n);if(o(e=n.children))for(t=0;t<n.children.length;++t)w(n.children[t])}function j(n,e,t){for(;e<=t;++e){var a=n[e];o(a)&&(o(a.tag)?(k(a),w(a)):p(a.elm))}}function k(n,e){if(o(e)||o(n.data)){var t,r=a.remove.length+1;for(o(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,r),o(t=n.componentInstance)&&o(t=t._vnode)&&o(t.data)&&k(t,e),t=0;t<a.remove.length;++t)a.remove[t](n,e);o(t=n.data.hook)&&o(t=t.remove)?t(n,e):e()}else p(n.elm)}function _(n,e,t,a){for(var r=t;r<a;r++){var i=e[r];if(o(i)&&Ca(n,i))return r}}function C(n,e,t,r,l,c){if(n!==e){o(e.elm)&&o(r)&&(e=r[l]=fn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))o(e.asyncFactory.resolved)?z(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var h,g=e.data;o(g)&&o(h=g.hook)&&o(h=h.prepatch)&&h(n,e);var m=n.children,v=e.children;if(o(g)&&f(e)){for(h=0;h<a.update.length;++h)a.update[h](n,e);o(h=g.hook)&&o(h=h.update)&&h(n,e)}i(e.text)?o(m)&&o(v)?m!==v&&function(n,e,t,a,r){var s,l,c,p=0,h=0,g=e.length-1,m=e[0],f=e[g],v=t.length-1,b=t[0],y=t[v],w=!r;for(0;p<=g&&h<=v;)i(m)?m=e[++p]:i(f)?f=e[--g]:Ca(m,b)?(C(m,b,a,t,h),m=e[++p],b=t[++h]):Ca(f,y)?(C(f,y,a,t,v),f=e[--g],y=t[--v]):Ca(m,y)?(C(m,y,a,t,v),w&&u.insertBefore(n,m.elm,u.nextSibling(f.elm)),m=e[++p],y=t[--v]):Ca(f,b)?(C(f,b,a,t,h),w&&u.insertBefore(n,f.elm,m.elm),f=e[--g],b=t[++h]):(i(s)&&(s=Sa(e,p,g)),i(l=o(b.key)?s[b.key]:_(b,e,p,g))?d(b,a,n,m.elm,!1,t,h):Ca(c=e[l],b)?(C(c,b,a,t,h),e[l]=void 0,w&&u.insertBefore(n,c.elm,m.elm)):d(b,a,n,m.elm,!1,t,h),b=t[++h]);p>g?x(n,i(t[v+1])?null:t[v+1].elm,t,h,v,a):h>v&&j(e,p,g)}(p,m,v,t,c):o(v)?(o(n.text)&&u.setTextContent(p,""),x(p,null,v,0,v.length-1,t)):o(m)?j(m,0,m.length-1):o(n.text)&&u.setTextContent(p,""):n.text!==e.text&&u.setTextContent(p,e.text),o(g)&&o(h=g.hook)&&o(h=h.postpatch)&&h(n,e)}}}function S(n,e,t){if(s(t)&&o(n.parent))n.parent.data.pendingInsert=e;else for(var a=0;a<e.length;++a)e[a].data.hook.insert(e[a])}var T=b("attrs,class,staticClass,staticStyle,key");function z(n,e,t,a){var r,i=e.tag,l=e.data,c=e.children;if(a=a||l&&l.pre,e.elm=n,s(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(r=l.hook)&&o(r=r.init)&&r(e,!0),o(r=e.componentInstance)))return h(e,t),!0;if(o(i)){if(o(c))if(n.hasChildNodes())if(o(r=l)&&o(r=r.domProps)&&o(r=r.innerHTML)){if(r!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,d=0;d<c.length;d++){if(!p||!z(p,c[d],t,a)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else m(e,c,t);if(o(l)){var g=!1;for(var f in l)if(!T(f)){g=!0,v(e,t);break}!g&&l.class&&Re(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,r){if(!i(e)){var l,c=!1,p=[];if(i(n))c=!0,d(e,p);else{var h=o(n.nodeType);if(!h&&Ca(n,e))C(n,e,p,null,null,r);else{if(h){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&z(n,e,p))return S(e,p,!0),n;l=n,n=new hn(u.tagName(l).toLowerCase(),{},[],void 0,l)}var g=n.elm,m=u.parentNode(g);if(d(e,p,g._leaveCb?null:m,u.nextSibling(g)),o(e.parent))for(var v=e.parent,b=f(e);v;){for(var y=0;y<a.destroy.length;++y)a.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<a.create.length;++x)a.create[x](ka,v);var k=v.data.hook.insert;if(k.merged)for(var _=1;_<k.fns.length;_++)k.fns[_]()}else wa(v);v=v.parent}o(m)?j([n],0,0):o(n.tag)&&w(n)}}return S(e,p,c),e.elm}o(n)&&w(n)}}({nodeOps:ya,modules:[La,qa,Ga,Qa,sr,X?{create:Ir,activate:Ir,remove:function(n,e){!0!==n.data.show?zr(n,e):e()}}:{}].concat(Oa)});K&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&qr(n,"input")}));var Or={inserted:function(n,e,t,a){"select"===t.tag?(a.elm&&!a.elm._vOptions?Gn(t,"postpatch",(function(){Or.componentUpdated(n,e,t)})):Br(n,e,t.context),n._vOptions=[].map.call(n.options,Lr)):("textarea"===t.tag||ba(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Dr),n.addEventListener("compositionend",$r),n.addEventListener("change",$r),K&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Br(n,e,t.context);var a=n._vOptions,r=n._vOptions=[].map.call(n.options,Lr);if(r.some((function(n,e){return!J(n,a[e])})))(n.multiple?e.value.some((function(n){return Jr(n,r)})):e.value!==e.oldValue&&Jr(e.value,r))&&qr(n,"change")}}};function Br(n,e,t){Pr(n,e,t),(Q||Z)&&setTimeout((function(){Pr(n,e,t)}),0)}function Pr(n,e,t){var a=e.value,r=n.multiple;if(!r||Array.isArray(a)){for(var i,o,s=0,l=n.options.length;s<l;s++)if(o=n.options[s],r)i=L(a,Lr(o))>-1,o.selected!==i&&(o.selected=i);else if(J(Lr(o),a))return void(n.selectedIndex!==s&&(n.selectedIndex=s));r||(n.selectedIndex=-1)}}function Jr(n,e){return e.every((function(e){return!J(e,n)}))}function Lr(n){return"_value"in n?n._value:n.value}function Dr(n){n.target.composing=!0}function $r(n){n.target.composing&&(n.target.composing=!1,qr(n.target,"input"))}function qr(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Vr(n){return!n.componentInstance||n.data&&n.data.transition?n:Vr(n.componentInstance._vnode)}var Rr={model:Or,show:{bind:function(n,e,t){var a=e.value,r=(t=Vr(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;a&&r?(t.data.show=!0,Tr(t,(function(){n.style.display=i}))):n.style.display=a?i:"none"},update:function(n,e,t){var a=e.value;!a!=!e.oldValue&&((t=Vr(t)).data&&t.data.transition?(t.data.show=!0,a?Tr(t,(function(){n.style.display=n.__vOriginalDisplay})):zr(t,(function(){n.style.display="none"}))):n.style.display=a?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,a,r){r||(n.style.display=n.__vOriginalDisplay)}}},Fr={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Hr(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Hr(_e(e.children)):n}function Nr(n){var e={},t=n.$options;for(var a in t.propsData)e[a]=n[a];var r=t._parentListeners;for(var a in r)e[C(a)]=r[a];return e}function Ur(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Gr=function(n){return n.tag||ge(n)},Xr=function(n){return"show"===n.name},Wr={name:"transition",props:Fr,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Gr)).length){0;var a=this.mode;0;var r=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return r;var i=Hr(r);if(!i)return r;if(this._leaving)return Ur(n,r);var o="__transition-".concat(this._uid,"-");i.key=null==i.key?i.isComment?o+"comment":o+i.tag:l(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=Nr(this),c=this._vnode,u=Hr(c);if(i.data.directives&&i.data.directives.some(Xr)&&(i.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,u)&&!ge(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=I({},s);if("out-in"===a)return this._leaving=!0,Gn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ur(n,r);if("in-out"===a){if(ge(i))return c;var d,h=function(){d()};Gn(s,"afterEnter",h),Gn(s,"enterCancelled",h),Gn(p,"delayLeave",(function(n){d=n}))}}return r}}},Qr=I({tag:String,moveClass:String},Fr);function Kr(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Zr(n){n.data.newPos=n.elm.getBoundingClientRect()}function Yr(n){var e=n.data.pos,t=n.data.newPos,a=e.left-t.left,r=e.top-t.top;if(a||r){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate(".concat(a,"px,").concat(r,"px)"),i.transitionDuration="0s"}}delete Qr.mode;var ni={Transition:Wr,TransitionGroup:{props:Qr,beforeMount:function(){var n=this,e=this._update;this._update=function(t,a){var r=Ke(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,r(),e.call(n,t,a)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),a=this.prevChildren=this.children,r=this.$slots.default||[],i=this.children=[],o=Nr(this),s=0;s<r.length;s++){if((u=r[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),t[u.key]=u,(u.data||(u.data={})).transition=o;else;}if(a){var l=[],c=[];for(s=0;s<a.length;s++){var u;(u=a[s]).data.transition=o,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=n(e,null,l),this.removed=c}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Kr),n.forEach(Zr),n.forEach(Yr),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,a=t.style;xr(t,e),a.transform=a.WebkitTransform=a.transitionDuration="",t.addEventListener(mr,t._moveCb=function n(a){a&&a.target!==t||a&&!/transform$/.test(a.propertyName)||(t.removeEventListener(mr,n),t._moveCb=null,wr(t,e))})}})))},methods:{hasMove:function(n,e){if(!hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){ur(t,n)})),cr(t,e),t.style.display="none",this.$el.appendChild(t);var a=_r(t);return this.$el.removeChild(t),this._hasMove=a.hasTransform}}}};function ei(n,e){for(var t in e)n[t]=e[t];return n}Ut.config.mustUseProp=function(n,e,t){return"value"===t&&ea(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Ut.config.isReservedTag=fa,Ut.config.isReservedAttr=na,Ut.config.getTagNamespace=function(n){return ma(n)?"svg":"math"===n?"math":void 0},Ut.config.isUnknownElement=function(n){if(!X)return!0;if(fa(n))return!1;if(n=n.toLowerCase(),null!=va[n])return va[n];var e=document.createElement(n);return n.indexOf("-")>-1?va[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:va[n]=/HTMLUnknownElement/.test(e.toString())},I(Ut.options.directives,Rr),I(Ut.options.components,ni),Ut.prototype.__patch__=X?Mr:O,Ut.prototype.$mount=function(n,e){return function(n,e,t){var a;n.$el=e,n.$options.render||(n.$options.render=gn),nt(n,"beforeMount"),a=function(){n._update(n._render(),t)},new Ne(n,a,O,{before:function(){n._isMounted&&!n._isDestroyed&&nt(n,"beforeUpdate")}},!0),t=!1;var r=n._preWatchers;if(r)for(var i=0;i<r.length;i++)r[i].run();return null==n.$vnode&&(n._isMounted=!0,nt(n,"mounted")),n}(this,n=n&&X?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},X&&setTimeout((function(){R.devtools&&sn&&sn.emit("init",Ut)}),0);var ti=/[!'()*]/g,ai=function(n){return"%"+n.charCodeAt(0).toString(16)},ri=/%2C/g,ii=function(n){return encodeURIComponent(n).replace(ti,ai).replace(ri,",")};function oi(n){try{return decodeURIComponent(n)}catch(n){0}return n}var si=function(n){return null==n||"object"==typeof n?n:String(n)};function li(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),a=oi(t.shift()),r=t.length>0?oi(t.join("=")):null;void 0===e[a]?e[a]=r:Array.isArray(e[a])?e[a].push(r):e[a]=[e[a],r]})),e):e}function ci(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return ii(e);if(Array.isArray(t)){var a=[];return t.forEach((function(n){void 0!==n&&(null===n?a.push(ii(e)):a.push(ii(e)+"="+ii(n)))})),a.join("&")}return ii(e)+"="+ii(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var ui=/\/?$/;function pi(n,e,t,a){var r=a&&a.options.stringifyQuery,i=e.query||{};try{i=di(i)}catch(n){}var o={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:mi(e,r),matched:n?gi(n):[]};return t&&(o.redirectedFrom=mi(t,r)),Object.freeze(o)}function di(n){if(Array.isArray(n))return n.map(di);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=di(n[t]);return e}return n}var hi=pi(null,{path:"/"});function gi(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function mi(n,e){var t=n.path,a=n.query;void 0===a&&(a={});var r=n.hash;return void 0===r&&(r=""),(t||"/")+(e||ci)(a)+r}function fi(n,e,t){return e===hi?n===e:!!e&&(n.path&&e.path?n.path.replace(ui,"")===e.path.replace(ui,"")&&(t||n.hash===e.hash&&vi(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&vi(n.query,e.query)&&vi(n.params,e.params))))}function vi(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),a=Object.keys(e).sort();return t.length===a.length&&t.every((function(t,r){var i=n[t];if(a[r]!==t)return!1;var o=e[t];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?vi(i,o):String(i)===String(o)}))}function bi(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var a in t.instances){var r=t.instances[a],i=t.enteredCbs[a];if(r&&i){delete t.enteredCbs[a];for(var o=0;o<i.length;o++)r._isBeingDestroyed||i[o](r)}}}}var yi={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,a=e.children,r=e.parent,i=e.data;i.routerView=!0;for(var o=r.$createElement,s=t.name,l=r.$route,c=r._routerViewCache||(r._routerViewCache={}),u=0,p=!1;r&&r._routerRoot!==r;){var d=r.$vnode?r.$vnode.data:{};d.routerView&&u++,d.keepAlive&&r._directInactive&&r._inactive&&(p=!0),r=r.$parent}if(i.routerViewDepth=u,p){var h=c[s],g=h&&h.component;return g?(h.configProps&&xi(g,i,h.route,h.configProps),o(g,i,a)):o()}var m=l.matched[u],f=m&&m.components[s];if(!m||!f)return c[s]=null,o();c[s]={component:f},i.registerRouteInstance=function(n,e){var t=m.instances[s];(e&&t!==n||!e&&t===n)&&(m.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){m.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==m.instances[s]&&(m.instances[s]=n.componentInstance),bi(l)};var v=m.props&&m.props[s];return v&&(ei(c[s],{route:l,configProps:v}),xi(f,i,l,v)),o(f,i,a)}};function xi(n,e,t,a){var r=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,a);if(r){r=e.props=ei({},r);var i=e.attrs=e.attrs||{};for(var o in r)n.props&&o in n.props||(i[o]=r[o],delete r[o])}}function wi(n,e,t){var a=n.charAt(0);if("/"===a)return n;if("?"===a||"#"===a)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function ji(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var ki=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},_i=Di,Ci=Ei,Si=function(n,e){return Mi(Ei(n,e),e)},Ti=Mi,zi=Li,Ai=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Ei(n,e){for(var t,a=[],r=0,i=0,o="",s=e&&e.delimiter||"/";null!=(t=Ai.exec(n));){var l=t[0],c=t[1],u=t.index;if(o+=n.slice(i,u),i=u+l.length,c)o+=c[1];else{var p=n[i],d=t[2],h=t[3],g=t[4],m=t[5],f=t[6],v=t[7];o&&(a.push(o),o="");var b=null!=d&&null!=p&&p!==d,y="+"===f||"*"===f,x="?"===f||"*"===f,w=t[2]||s,j=g||m;a.push({name:h||r++,prefix:d||"",delimiter:w,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:j?Bi(j):v?".*":"[^"+Oi(w)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&a.push(o),a}function Ii(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Mi(n,e){for(var t=new Array(n.length),a=0;a<n.length;a++)"object"==typeof n[a]&&(t[a]=new RegExp("^(?:"+n[a].pattern+")$",Ji(e)));return function(e,a){for(var r="",i=e||{},o=(a||{}).pretty?Ii:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,u=i[l.name];if(null==u){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(ki(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=o(u[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");r+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');r+=l.prefix+c}}else r+=l}return r}}function Oi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Bi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Pi(n,e){return n.keys=e,n}function Ji(n){return n&&n.sensitive?"":"i"}function Li(n,e,t){ki(e)||(t=e||t,e=[]);for(var a=(t=t||{}).strict,r=!1!==t.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=Oi(s);else{var l=Oi(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Oi(t.delimiter||"/"),p=i.slice(-u.length)===u;return a||(i=(p?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=r?"$":a&&p?"":"(?="+u+"|$)",Pi(new RegExp("^"+i,Ji(t)),e)}function Di(n,e,t){return ki(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var a=0;a<t.length;a++)e.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Pi(n,e)}(n,e):ki(n)?function(n,e,t){for(var a=[],r=0;r<n.length;r++)a.push(Di(n[r],e,t).source);return Pi(new RegExp("(?:"+a.join("|")+")",Ji(t)),e)}(n,e,t):function(n,e,t){return Li(Ei(n,t),e,t)}(n,e,t)}_i.parse=Ci,_i.compile=Si,_i.tokensToFunction=Ti,_i.tokensToRegExp=zi;var $i=Object.create(null);function qi(n,e,t){e=e||{};try{var a=$i[n]||($i[n]=_i.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),a(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Vi(n,e,t,a){var r="string"==typeof n?{path:n}:n;if(r._normalized)return r;if(r.name){var i=(r=ei({},n)).params;return i&&"object"==typeof i&&(r.params=ei({},i)),r}if(!r.path&&r.params&&e){(r=ei({},r))._normalized=!0;var o=ei(ei({},e.params),r.params);if(e.name)r.name=e.name,r.params=o;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;r.path=qi(s,o,e.path)}else 0;return r}var l=function(n){var e="",t="",a=n.indexOf("#");a>=0&&(e=n.slice(a),n=n.slice(0,a));var r=n.indexOf("?");return r>=0&&(t=n.slice(r+1),n=n.slice(0,r)),{path:n,query:t,hash:e}}(r.path||""),c=e&&e.path||"/",u=l.path?wi(l.path,c,t||r.append):c,p=function(n,e,t){void 0===e&&(e={});var a,r=t||li;try{a=r(n||"")}catch(n){a={}}for(var i in e){var o=e[i];a[i]=Array.isArray(o)?o.map(si):si(o)}return a}(l.query,r.query,a&&a.options.parseQuery),d=r.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Ri,Fi=function(){},Hi={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,a=this.$route,r=t.resolve(this.to,a,this.append),i=r.location,o=r.route,s=r.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,h=null==this.activeClass?p:this.activeClass,g=null==this.exactActiveClass?d:this.exactActiveClass,m=o.redirectedFrom?pi(null,Vi(o.redirectedFrom),null,t):o;l[g]=fi(a,m,this.exactPath),l[h]=this.exact||this.exactPath?l[g]:function(n,e){return 0===n.path.replace(ui,"/").indexOf(e.path.replace(ui,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(a,m);var f=l[g]?this.ariaCurrentValue:null,v=function(n){Ni(n)&&(e.replace?t.replace(i,Fi):t.push(i,Fi))},b={click:Ni};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:v,isActive:l[h],isExactActive:l[g]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":f};else{var w=function n(e){var t;if(e)for(var a=0;a<e.length;a++){if("a"===(t=e[a]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var j=w.data=ei({},w.data);for(var k in j.on=j.on||{},j.on){var _=j.on[k];k in b&&(j.on[k]=Array.isArray(_)?_:[_])}for(var C in b)C in j.on?j.on[C].push(b[C]):j.on[C]=v;var S=w.data.attrs=ei({},w.data.attrs);S.href=s,S["aria-current"]=f}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Ni(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ui="undefined"!=typeof window;function Gi(n,e,t,a,r){var i=e||[],o=t||Object.create(null),s=a||Object.create(null);n.forEach((function(n){!function n(e,t,a,r,i,o){var s=r.path,l=r.name;0;var c=r.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ji(e.path+"/"+n)}(s,i,c.strict);"boolean"==typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var p={path:u,regex:Xi(u,c),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:o,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var i=o?ji(o+"/"+r.path):void 0;n(e,t,a,r,p,i)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==r.alias)for(var d=Array.isArray(r.alias)?r.alias:[r.alias],h=0;h<d.length;++h){0;var g={path:d[h],children:r.children};n(e,t,a,g,i,p.path||"/")}l&&(a[l]||(a[l]=p))}(i,o,s,n,r)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:o,nameMap:s}}function Xi(n,e){return _i(n,[],e)}function Wi(n,e){var t=Gi(n),a=t.pathList,r=t.pathMap,i=t.nameMap;function o(n,t,o){var s=Vi(n,t,!1,e),c=s.name;if(c){var u=i[c];if(!u)return l(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=qi(u.path,s.params),l(u,s,o)}if(s.path){s.params={};for(var h=0;h<a.length;h++){var g=a[h],m=r[g];if(Qi(m.regex,s.path,s.params))return l(m,s,o)}}return l(null,s)}function s(n,t){var a=n.redirect,r="function"==typeof a?a(pi(n,t,null,e)):a;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,t);var s=r,c=s.name,u=s.path,p=t.query,d=t.hash,h=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return o({_normalized:!0,name:c,query:p,hash:d,params:h},void 0,t)}if(u){var g=function(n,e){return wi(n,e.parent?e.parent.path:"/",!0)}(u,n);return o({_normalized:!0,path:qi(g,h),query:p,hash:d},void 0,t)}return l(null,t)}function l(n,t,a){return n&&n.redirect?s(n,a||t):n&&n.matchAs?function(n,e,t){var a=o({_normalized:!0,path:qi(t,e.params)});if(a){var r=a.matched,i=r[r.length-1];return e.params=a.params,l(i,e)}return l(null,e)}(0,t,n.matchAs):pi(n,t,a,e)}return{match:o,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Gi([e||n],a,r,i,t),t&&t.alias.length&&Gi(t.alias.map((function(n){return{path:n,children:[e]}})),a,r,i,t)},getRoutes:function(){return a.map((function(n){return r[n]}))},addRoutes:function(n){Gi(n,a,r,i)}}}function Qi(n,e,t){var a=e.match(n);if(!a)return!1;if(!t)return!0;for(var r=1,i=a.length;r<i;++r){var o=n.keys[r-1];o&&(t[o.name||"pathMatch"]="string"==typeof a[r]?oi(a[r]):a[r])}return!0}var Ki=Ui&&window.performance&&window.performance.now?window.performance:Date;function Zi(){return Ki.now().toFixed(3)}var Yi=Zi();function no(){return Yi}function eo(n){return Yi=n}var to=Object.create(null);function ao(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ei({},window.history.state);return t.key=no(),window.history.replaceState(t,"",e),window.addEventListener("popstate",oo),function(){window.removeEventListener("popstate",oo)}}function ro(n,e,t,a){if(n.app){var r=n.options.scrollBehavior;r&&n.app.$nextTick((function(){var i=function(){var n=no();if(n)return to[n]}(),o=r.call(n,e,t,a?i:null);o&&("function"==typeof o.then?o.then((function(n){po(n,i)})).catch((function(n){0})):po(o,i))}))}}function io(){var n=no();n&&(to[n]={x:window.pageXOffset,y:window.pageYOffset})}function oo(n){io(),n.state&&n.state.key&&eo(n.state.key)}function so(n){return co(n.x)||co(n.y)}function lo(n){return{x:co(n.x)?n.x:window.pageXOffset,y:co(n.y)?n.y:window.pageYOffset}}function co(n){return"number"==typeof n}var uo=/^#\d/;function po(n,e){var t,a="object"==typeof n;if(a&&"string"==typeof n.selector){var r=uo.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(r){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),a=n.getBoundingClientRect();return{x:a.left-t.left-e.x,y:a.top-t.top-e.y}}(r,i={x:co((t=i).x)?t.x:0,y:co(t.y)?t.y:0})}else so(n)&&(e=lo(n))}else a&&so(n)&&(e=lo(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var ho,go=Ui&&((-1===(ho=window.navigator.userAgent).indexOf("Android 2.")&&-1===ho.indexOf("Android 4.0")||-1===ho.indexOf("Mobile Safari")||-1!==ho.indexOf("Chrome")||-1!==ho.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function mo(n,e){io();var t=window.history;try{if(e){var a=ei({},t.state);a.key=no(),t.replaceState(a,"",n)}else t.pushState({key:eo(Zi())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function fo(n){mo(n,!0)}var vo={redirected:2,aborted:4,cancelled:8,duplicated:16};function bo(n,e){return xo(n,e,vo.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return wo.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function yo(n,e){return xo(n,e,vo.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function xo(n,e,t,a){var r=new Error(a);return r._isRouter=!0,r.from=n,r.to=e,r.type=t,r}var wo=["params","query","hash"];function jo(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ko(n,e){return jo(n)&&n._isRouter&&(null==e||n.type===e)}function _o(n,e,t){var a=function(r){r>=n.length?t():n[r]?e(n[r],(function(){a(r+1)})):a(r+1)};a(0)}function Co(n){return function(e,t,a){var r=!1,i=0,o=null;So(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){r=!0,i++;var l,c=Ao((function(e){var r;((r=e).__esModule||zo&&"Module"===r[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Ri.extend(e),t.components[s]=e,--i<=0&&a()})),u=Ao((function(n){var e="Failed to resolve async component "+s+": "+n;o||(o=jo(n)?n:new Error(e),a(o))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),r||a()}}function So(n,e){return To(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function To(n){return Array.prototype.concat.apply([],n)}var zo="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ao(n){var e=!1;return function(){for(var t=[],a=arguments.length;a--;)t[a]=arguments[a];if(!e)return e=!0,n.apply(this,t)}}var Eo=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ui){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=hi,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Io(n,e,t,a){var r=So(n,(function(n,a,r,i){var o=function(n,e){"function"!=typeof n&&(n=Ri.extend(n));return n.options[e]}(n,e);if(o)return Array.isArray(o)?o.map((function(n){return t(n,a,r,i)})):t(o,a,r,i)}));return To(a?r.reverse():r)}function Mo(n,e){if(e)return function(){return n.apply(e,arguments)}}Eo.prototype.listen=function(n){this.cb=n},Eo.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Eo.prototype.onError=function(n){this.errorCbs.push(n)},Eo.prototype.transitionTo=function(n,e,t){var a,r=this;try{a=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(a,(function(){r.updateRoute(a),e&&e(a),r.ensureURL(),r.router.afterHooks.forEach((function(n){n&&n(a,i)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(n){n(a)})))}),(function(n){t&&t(n),n&&!r.ready&&(ko(n,vo.redirected)&&i===hi||(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(n)}))))}))},Eo.prototype.confirmTransition=function(n,e,t){var a=this,r=this.current;this.pending=n;var i,o,s=function(n){!ko(n)&&jo(n)&&(a.errorCbs.length?a.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=r.matched.length-1;if(fi(n,r)&&l===c&&n.matched[l]===r.matched[c])return this.ensureURL(),n.hash&&ro(this.router,r,n,!1),s(((o=xo(i=r,n,vo.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var u=function(n,e){var t,a=Math.max(n.length,e.length);for(t=0;t<a&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,h=u.activated,g=[].concat(function(n){return Io(n,"beforeRouteLeave",Mo,!0)}(d),this.router.beforeHooks,function(n){return Io(n,"beforeRouteUpdate",Mo)}(p),h.map((function(n){return n.beforeEnter})),Co(h)),m=function(e,t){if(a.pending!==n)return s(yo(r,n));try{e(n,r,(function(e){!1===e?(a.ensureURL(!0),s(function(n,e){return xo(n,e,vo.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(r,n))):jo(e)?(a.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(bo(r,n)),"object"==typeof e&&e.replace?a.replace(e):a.push(e)):t(e)}))}catch(n){s(n)}};_o(g,m,(function(){_o(function(n){return Io(n,"beforeRouteEnter",(function(n,e,t,a){return function(n,e,t){return function(a,r,i){return n(a,r,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,a)}))}(h).concat(a.router.resolveHooks),m,(function(){if(a.pending!==n)return s(yo(r,n));a.pending=null,e(n),a.router.app&&a.router.app.$nextTick((function(){bi(n)}))}))}))},Eo.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Eo.prototype.setupListeners=function(){},Eo.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=hi,this.pending=null};var Oo=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Bo(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,a=go&&t;a&&this.listeners.push(ao());var r=function(){var t=n.current,r=Bo(n.base);n.current===hi&&r===n._startLocation||n.transitionTo(r,(function(n){a&&ro(e,n,t,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){mo(ji(a.base+n.fullPath)),ro(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){fo(ji(a.base+n.fullPath)),ro(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Bo(this.base)!==this.current.fullPath){var e=ji(this.base+this.current.fullPath);n?mo(e):fo(e)}},e.prototype.getCurrentLocation=function(){return Bo(this.base)},e}(Eo);function Bo(n){var e=window.location.pathname,t=e.toLowerCase(),a=n.toLowerCase();return!n||t!==a&&0!==t.indexOf(ji(a+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Po=function(n){function e(e,t,a){n.call(this,e,t),a&&function(n){var e=Bo(n);if(!/^\/#/.test(e))return window.location.replace(ji(n+"/#"+e)),!0}(this.base)||Jo()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=go&&e;t&&this.listeners.push(ao());var a=function(){var e=n.current;Jo()&&n.transitionTo(Lo(),(function(a){t&&ro(n.router,a,e,!0),go||qo(a.fullPath)}))},r=go?"popstate":"hashchange";window.addEventListener(r,a),this.listeners.push((function(){window.removeEventListener(r,a)}))}},e.prototype.push=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){$o(n.fullPath),ro(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var a=this,r=this.current;this.transitionTo(n,(function(n){qo(n.fullPath),ro(a.router,n,r,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Lo()!==e&&(n?$o(e):qo(e))},e.prototype.getCurrentLocation=function(){return Lo()},e}(Eo);function Jo(){var n=Lo();return"/"===n.charAt(0)||(qo("/"+n),!1)}function Lo(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Do(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function $o(n){go?mo(Do(n)):window.location.hash=n}function qo(n){go?fo(Do(n)):window.location.replace(Do(n))}var Vo=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var a=this;this.transitionTo(n,(function(n){a.stack=a.stack.slice(0,a.index+1).concat(n),a.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var a=this;this.transitionTo(n,(function(n){a.stack=a.stack.slice(0,a.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var a=this.stack[t];this.confirmTransition(a,(function(){var n=e.current;e.index=t,e.updateRoute(a),e.router.afterHooks.forEach((function(e){e&&e(a,n)}))}),(function(n){ko(n,vo.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Eo),Ro=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Wi(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!go&&!1!==n.fallback,this.fallback&&(e="hash"),Ui||(e="abstract"),this.mode=e,e){case"history":this.history=new Oo(this,n.base);break;case"hash":this.history=new Po(this,n.base,this.fallback);break;case"abstract":this.history=new Vo(this,n.base);break;default:0}},Fo={currentRoute:{configurable:!0}};Ro.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Fo.currentRoute.get=function(){return this.history&&this.history.current},Ro.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Oo||t instanceof Po){var a=function(n){t.setupListeners(),function(n){var a=t.current,r=e.options.scrollBehavior;go&&r&&"fullPath"in n&&ro(e,n,a,!1)}(n)};t.transitionTo(t.getCurrentLocation(),a,a)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ro.prototype.beforeEach=function(n){return No(this.beforeHooks,n)},Ro.prototype.beforeResolve=function(n){return No(this.resolveHooks,n)},Ro.prototype.afterEach=function(n){return No(this.afterHooks,n)},Ro.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ro.prototype.onError=function(n){this.history.onError(n)},Ro.prototype.push=function(n,e,t){var a=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){a.history.push(n,e,t)}));this.history.push(n,e,t)},Ro.prototype.replace=function(n,e,t){var a=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){a.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ro.prototype.go=function(n){this.history.go(n)},Ro.prototype.back=function(){this.go(-1)},Ro.prototype.forward=function(){this.go(1)},Ro.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ro.prototype.resolve=function(n,e,t){var a=Vi(n,e=e||this.history.current,t,this),r=this.match(a,e),i=r.redirectedFrom||r.fullPath;return{location:a,route:r,href:function(n,e,t){var a="hash"===t?"#"+e:e;return n?ji(n+"/"+a):a}(this.history.base,i,this.mode),normalizedTo:a,resolved:r}},Ro.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ro.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==hi&&this.history.transitionTo(this.history.getCurrentLocation())},Ro.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==hi&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ro.prototype,Fo);var Ho=Ro;function No(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ro.install=function n(e){if(!n.installed||Ri!==e){n.installed=!0,Ri=e;var t=function(n){return void 0!==n},a=function(n,e){var a=n.$options._parentVnode;t(a)&&t(a=a.data)&&t(a=a.registerRouteInstance)&&a(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",yi),e.component("RouterLink",Hi);var r=e.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},Ro.version="3.6.5",Ro.isNavigationFailure=ko,Ro.NavigationFailureType=vo,Ro.START_LOCATION=hi,Ui&&window.Vue&&window.Vue.use(Ro);t(104);t(13),t(131);var Uo={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,330)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,329))},Go={"v-b84013dc":()=>t.e(5).then(t.bind(null,331)),"v-4e1f9fda":()=>t.e(6).then(t.bind(null,332)),"v-df29f4cc":()=>t.e(7).then(t.bind(null,333)),"v-c7606cca":()=>t.e(8).then(t.bind(null,334)),"v-0139c6ac":()=>t.e(9).then(t.bind(null,335)),"v-76c02e99":()=>t.e(10).then(t.bind(null,336)),"v-136cdf5e":()=>t.e(11).then(t.bind(null,337)),"v-6de6bbd7":()=>t.e(12).then(t.bind(null,338)),"v-4bf5cda8":()=>t.e(13).then(t.bind(null,339)),"v-fbcc3296":()=>t.e(14).then(t.bind(null,340)),"v-72cb89d6":()=>t.e(15).then(t.bind(null,341)),"v-7c1935d0":()=>t.e(16).then(t.bind(null,342)),"v-a4d9b7fe":()=>t.e(17).then(t.bind(null,343)),"v-345ac108":()=>t.e(18).then(t.bind(null,344)),"v-40161696":()=>t.e(19).then(t.bind(null,345)),"v-77427173":()=>t.e(20).then(t.bind(null,346)),"v-25ca8934":()=>t.e(21).then(t.bind(null,347)),"v-37ac5f90":()=>t.e(22).then(t.bind(null,348)),"v-420d7ee0":()=>t.e(23).then(t.bind(null,349)),"v-5bd507f9":()=>t.e(24).then(t.bind(null,350)),"v-6407fe0b":()=>t.e(25).then(t.bind(null,351)),"v-3dd8a8fe":()=>t.e(26).then(t.bind(null,352)),"v-6ebe052f":()=>t.e(27).then(t.bind(null,353)),"v-64c4e09a":()=>t.e(28).then(t.bind(null,354)),"v-3e64f9ee":()=>t.e(29).then(t.bind(null,355)),"v-44ea450a":()=>t.e(30).then(t.bind(null,356)),"v-255a8306":()=>t.e(31).then(t.bind(null,357)),"v-4d748a5c":()=>t.e(32).then(t.bind(null,358)),"v-2411c268":()=>t.e(33).then(t.bind(null,359)),"v-3a7f0068":()=>t.e(34).then(t.bind(null,360)),"v-50ec3e68":()=>t.e(35).then(t.bind(null,361)),"v-4ce8331c":()=>t.e(36).then(t.bind(null,362)),"v-5f89669c":()=>t.e(37).then(t.bind(null,363)),"v-78a877b0":()=>t.e(38).then(t.bind(null,364)),"v-115d94a0":()=>t.e(39).then(t.bind(null,365)),"v-75f9f3b0":()=>t.e(40).then(t.bind(null,366)),"v-b7ae71e0":()=>t.e(41).then(t.bind(null,367)),"v-518c8a5c":()=>t.e(42).then(t.bind(null,368)),"v-70767908":()=>t.e(43).then(t.bind(null,369)),"v-74fdeb5c":()=>t.e(44).then(t.bind(null,370)),"v-00210ffc":()=>t.e(45).then(t.bind(null,371)),"v-0ef24a56":()=>t.e(46).then(t.bind(null,372))};function Xo(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Wo=/-(\w)/g,Qo=Xo(n=>n.replace(Wo,(n,e)=>e?e.toUpperCase():"")),Ko=/\B([A-Z])/g,Zo=Xo(n=>n.replace(Ko,"-$1").toLowerCase()),Yo=Xo(n=>n.charAt(0).toUpperCase()+n.slice(1));function ns(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Yo(Qo(e))):n(Yo(e))||n(Zo(e))}const es=Object.assign({},Uo,Go),ts=n=>es[n],as=n=>Go[n],rs=n=>Uo[n],is=n=>Ut.component(n);function os(n){return ns(as,n)}function ss(n){return ns(rs,n)}function ls(n){return ns(ts,n)}function cs(n){return ns(is,n)}function us(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!cs(n)&&ls(n)){const e=await ls(n)();Ut.component(n,e.default)}}))}function ps(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ds=t(93),hs=t.n(ds),gs=t(94),ms=t.n(gs),fs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${ms()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=bs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=ys(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],n,this.siteMeta,xs)},updateCanonicalLink(){vs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",bs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){ys(null,this.currentMetaTags),vs()}};function vs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function bs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function ys(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function xs(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var ws=t(50),js={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(ws)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=window.innerHeight+t;for(let n=0;n<e.length;n++){const i=e[n],o=e[n+1],s=0===n&&0===t||t>=i.parentElement.offsetTop+10&&(!o||t<o.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(i.hash)){const t=i;if(r===a)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},ks=t(24),_s=t.n(ks),Cs={mounted(){_s.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Ut.component(n.name)||_s.a.start(),t()}),this.$router.afterEach(()=>{_s.a.done(),this.isSidebarOpen=!1})}},Ss={props:{startDate:{type:Date,default:null},endDate:{type:Date,default:null}},updated(){this.setGray()},methods:{setGray(){let n=Date.parse(new Date),e=Date.parse(new Date("2020-04-03 00:00:00".replace(/-/g,"/"))),t=Date.parse(new Date("2020-04-04 23:59:59".replace(/-/g,"/"))),a=document.getElementsByTagName("html")[0];e<n&&t>n&&(a.style.cssText="-webkit-filter: grayscale(100%);-moz-filter: grayscale(100%);-ms-filter: grayscale(100%);-o-filter: grayscale(100%);filter: grayscale(100%);filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);filter: gray;")}}};t(240),t(241);class Ts{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var zs={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Ts).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===t&&a.firstChild?a.insertBefore(r,a.firstChild):a.appendChild(r),r.styleSheet?r.styleSheet.cssText=n:r.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var As={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Es={},Is=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Ms=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:As[n]},Os=function n(e,t,a){var r=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))r[n]=t[n];else{var e=n.replace("data","");r.dataset[e]=t[n]}})),a&&a.forEach((function(e){var t=e.tag,a=e.attrs,i=e.children;r.appendChild(n(t,a,i))})),r},Bs=function(n,e,t){var a,r=(a=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(a));return 1!==r.length||t?r:r[0]},Ps=function(n,e){var t,a,r=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),o=n.match(/<script>([\s\S]+)<\/script>/),s={css:r&&r[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Is(s.html),s.jsTpl=(t=s.js,a=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(a,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),a="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),r=window.Babel?window.Babel.transform(a,{presets:["es2015"]}).code:a,i=[eval][0](r);return i.template=e,i}(s.js,s.html);var l=Ms("vue");return s.jsLib.unshift(l),s},Js=function(n,e){var t,a=n.match(/<style>([\s\S]+)<\/style>/),r=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),o={css:a&&a[1].replace(/^\n|\n$/g,""),html:r&&r[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return o.htmlTpl=o.html,o.jsTpl=o.js,o.script=(t=o.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),o},Ls=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Ds(){var n=Bs(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Bs(n,"vuepress-plugin-demo-block__code"),t=Bs(n,"vuepress-plugin-demo-block__display"),a=Bs(n,"vuepress-plugin-demo-block__footer"),r=Bs(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),o=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);o=o?JSON.parse(o):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,a="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),r=new Function("return ".concat(a))(),i={js:r,css:r.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Ls(n),htmlTpl:Is("")},o=Ms("react"),s=Ms("reactDOM");return i.jsLib.unshift(o,s),i}(i,o):"vanilla"===s?Js(i,o):Ps(i,o),u=Os("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(a.appendChild(u),u.addEventListener("click",$s.bind(null,u,l,e,a)),Ms("jsfiddle")&&a.appendChild(function(n){var e=n.css,t=n.htmlTpl,a=n.jsTpl,r=n.jsLib,i=n.cssLib,o=r.concat(i).concat(Ms("cssLib")).concat(Ms("jsLib")).join(",");return Os("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:a}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:o}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),Ms("codepen")&&a.appendChild(function(n){var e=n.css,t=n.htmlTpl,a=n.jsTpl,r=n.jsLib,i=n.cssLib,o=JSON.stringify({css:e,html:t,js:a,js_external:r.concat(Ms("jsLib")).join(";"),css_external:i.concat(Ms("cssLib")).join(";"),layout:Ms("codepenLayout"),js_pre_processor:Ms("codepenJsProcessor"),editors:Ms("codepenEditors")});return Os("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:o}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==o.horizontal?o.horizontal:Ms("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var p=e.firstChild.cloneNode(!0);p.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(p)}if(c.css&&function(n){if(!Es[n]){var e=Os("style",{innerHTML:n});document.body.appendChild(e),Es[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),r);else if("vue"===s){var d=(new(Vue.extend(c.script))).$mount();r.appendChild(d.$el)}else"vanilla"===s&&(r.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Ds()}),300)}function $s(n,e,t,a){var r="1"!==n.dataset.isExpand;t.style.height=r?"".concat(e,"px"):0,r?a.classList.add("vuepress-plugin-demo-block__show-link"):a.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=r?"1":"0"}var qs={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Ds()},updated:function(){Ds()}},Vs="auto",Rs="zoom-in",Fs="zoom-out",Hs="grab",Ns="move";function Us(n,e,t){var a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r={passive:!1};a?n.addEventListener(e,t,r):n.removeEventListener(e,t,r)}function Gs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Xs(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ws(n,e,t){!function(n){var e=Qs,t=Ks;if(n.transition){var a=n.transition;delete n.transition,n[e]=a}if(n.transform){var r=n.transform;delete n.transform,n[t]=r}}(e);var a=n.style,r={};for(var i in e)t&&(r[i]=a[i]||""),a[i]=e[i];return r}var Qs="transition",Ks="transform",Zs="transform",Ys="transitionend";var nl=function(){},el={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:nl,onClose:nl,onGrab:nl,onMove:nl,onRelease:nl,onBeforeOpen:nl,onBeforeClose:nl,onBeforeGrab:nl,onBeforeRelease:nl,onImageLoading:nl,onImageLoaded:nl},tl={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),rl(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var a=this.lastScrollPosition.x-e,r=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(r)>=i||Math.abs(a)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(al(n)&&!rl(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){al(n)&&!rl(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,a=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,a)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,a=e.clientY;this.move(t,a)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function al(n){return 0===n.button}function rl(n){return n.metaKey||n.ctrlKey}var il={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ws(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Us(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ws(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},ol="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},sl=function(){function n(n,e){for(var t=0;t<e.length;t++){var a=e[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(n,a.key,a)}}return function(e,t,a){return t&&n(e.prototype,t),a&&n(e,a),e}}(),ll=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(n[a]=t[a])}return n},cl={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Xs(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,a=n.transitionDuration,r=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Hs:Fs,transition:Zs+"\n        "+a+"s\n        "+r,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ws(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ws(this.el,{transform:"none"})},grab:function(n,e,t){var a=ul(),r=a.x-n,i=a.y-e;Ws(this.el,{cursor:Ns,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var a=ul(),r=a.x-n,i=a.y-e;Ws(this.el,{transition:Zs,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ws(this.el,this.styleClose)},restoreOpenStyle:function(){Ws(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=ul(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,a=this.instance.options,r=a.customSize,i=a.scaleBase;if(!r&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(r&&"object"===(void 0===r?"undefined":ol(r)))return{x:r.width/this.rect.width,y:r.height/this.rect.height};var o=this.rect.width/2,s=this.rect.height/2,l=ul(),c={x:l.x-o,y:l.y-s},u=c.x/o,p=c.y/s,d=i+Math.min(u,p);if(r&&"string"==typeof r){var h=t||this.el.naturalWidth,g=e||this.el.naturalHeight,m=parseFloat(r)*h/(100*this.rect.width),f=parseFloat(r)*g/(100*this.rect.height);if(d>m||d>f)return{x:m,y:f}}return{x:d,y:d}}};function ul(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function pl(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(a){Us(n,a,e[a],t)}))}var dl=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(cl),this.overlay=Object.create(il),this.handler=Object.create(tl),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ll({},el,e),this.overlay.init(this),this.handler.init(this)}return sl(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Rs,Us(n,"click",this.handler.click),this.options.preloadImage&&Gs(Xs(n)));return this}},{key:"config",value:function(n){return n?(ll(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var a="string"==typeof n?document.querySelector(n):n;if("IMG"===a.tagName){if(this.options.onBeforeOpen(a),this.target.init(a,this),!this.options.preloadImage){var r=this.target.srcOriginal;null!=r&&(this.options.onImageLoading(a),Gs(r,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Us(document,"scroll",this.handler.scroll),Us(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Us(window,"resize",this.handler.resizeWindow);var i=function n(){Us(a,Ys,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&pl(document,e.handler,!0),t(a)};return Us(a,Ys,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Vs,this.overlay.fadeOut(),this.target.zoomOut(),Us(document,"scroll",this.handler.scroll,!1),Us(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Us(window,"resize",this.handler.resizeWindow,!1);var a=function a(){Us(t,Ys,a,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&pl(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Us(t,Ys,a),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var r=this.target.el;this.options.onBeforeGrab(r),this.released=!1,this.target.grab(n,e,t);var i=function n(){Us(r,Ys,n,!1),a(r)};return Us(r,Ys,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Ns,this.target.move(n,e,t);var r=this.target.el,i=function n(){Us(r,Ys,n,!1),a(r)};return Us(r,Ys,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Vs,this.target.restoreOpenStyle();var a=function a(){Us(t,Ys,a,!1),n.lock=!1,n.released=!0,e(t)};return Us(t,Ys,a),this}}}]),n}();const hl=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),gl=Number("500");class ml{constructor(){this.instance=new dl(hl)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=gl){setTimeout(()=>this.update(n),e)}}var fl=[fs,js,Cs,Ss,zs,qs,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new ml,this.$vuepress.zooming.updateDelay()}}],vl={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ps("layout",n),Ut.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},bl=t(3),yl=Object(bl.a)(vl,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(yl,"mixins",fl);const xl=[{name:"v-b84013dc",path:"/pages/52d5c3/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-b84013dc").then(t)}},{path:"/pages/52d5c3/index.html",redirect:"/pages/52d5c3/"},{path:"/01.test1/01.指南/01.主题初衷与诞生.html",redirect:"/pages/52d5c3/"},{name:"v-4e1f9fda",path:"/pages/a2f161/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-4e1f9fda").then(t)}},{path:"/pages/a2f161/index.html",redirect:"/pages/a2f161/"},{path:"/01.test1/01.指南/02.介绍.html",redirect:"/pages/a2f161/"},{name:"v-df29f4cc",path:"/pages/793dcb/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-df29f4cc").then(t)}},{path:"/pages/793dcb/index.html",redirect:"/pages/793dcb/"},{path:"/01.test1/01.指南/03.快速上手.html",redirect:"/pages/793dcb/"},{name:"v-c7606cca",path:"/pages/2f674a/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-c7606cca").then(t)}},{path:"/pages/2f674a/index.html",redirect:"/pages/2f674a/"},{path:"/01.test1/01.指南/04.目录结构.html",redirect:"/pages/2f674a/"},{name:"v-0139c6ac",path:"/pages/33d574/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-0139c6ac").then(t)}},{path:"/pages/33d574/index.html",redirect:"/pages/33d574/"},{path:"/01.test1/01.指南/05.核心配置和约定.html",redirect:"/pages/33d574/"},{name:"v-76c02e99",path:"/pages/088c16/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-76c02e99").then(t)}},{path:"/pages/088c16/index.html",redirect:"/pages/088c16/"},{path:"/01.test1/01.指南/06.自动生成front matter.html",redirect:"/pages/088c16/"},{name:"v-136cdf5e",path:"/pages/d0d7eb/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-136cdf5e").then(t)}},{path:"/pages/d0d7eb/index.html",redirect:"/pages/d0d7eb/"},{path:"/01.test1/01.指南/07.Markdown 容器.html",redirect:"/pages/d0d7eb/"},{name:"v-6de6bbd7",path:"/pages/197691/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-6de6bbd7").then(t)}},{path:"/pages/197691/index.html",redirect:"/pages/197691/"},{path:"/01.test1/01.指南/08.Markdown 中使用组件.html",redirect:"/pages/197691/"},{name:"v-4bf5cda8",path:"/pages/2721d5/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-4bf5cda8").then(t)}},{path:"/pages/2721d5/index.html",redirect:"/pages/2721d5/"},{path:"/01.test1/01.指南/09.主题初衷与诞生 copy 2.html",redirect:"/pages/2721d5/"},{name:"v-fbcc3296",path:"/pages/e19315/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-fbcc3296").then(t)}},{path:"/pages/e19315/index.html",redirect:"/pages/e19315/"},{path:"/01.test1/01.指南/10.主题初衷与诞生 copy.html",redirect:"/pages/e19315/"},{name:"v-72cb89d6",path:"/pages/8dfab5/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-72cb89d6").then(t)}},{path:"/pages/8dfab5/index.html",redirect:"/pages/8dfab5/"},{path:"/01.test1/02.相关文章/03.使目录栏支持h2~h6标题.html",redirect:"/pages/8dfab5/"},{name:"v-7c1935d0",path:"/pages/dd027d/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-7c1935d0").then(t)}},{path:"/pages/dd027d/index.html",redirect:"/pages/dd027d/"},{path:"/01.test1/02.相关文章/06.如何让你的笔记更有表现力.html",redirect:"/pages/dd027d/"},{name:"v-a4d9b7fe",path:"/pages/2b8e22/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-a4d9b7fe").then(t)}},{path:"/pages/2b8e22/index.html",redirect:"/pages/2b8e22/"},{path:"/01.test1/02.相关文章/07.批量操作front matter工具.html",redirect:"/pages/2b8e22/"},{name:"v-345ac108",path:"/pages/0fc1d2/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-345ac108").then(t)}},{path:"/pages/0fc1d2/index.html",redirect:"/pages/0fc1d2/"},{path:"/01.test1/02.相关文章/08.部署.html",redirect:"/pages/0fc1d2/"},{name:"v-40161696",path:"/pages/9ae0bd/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-40161696").then(t)}},{path:"/pages/9ae0bd/index.html",redirect:"/pages/9ae0bd/"},{path:"/01.test1/02.相关文章/09.关于写文章和一级标题.html",redirect:"/pages/9ae0bd/"},{name:"v-77427173",path:"/pages/26997d/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-77427173").then(t)}},{path:"/pages/26997d/index.html",redirect:"/pages/26997d/"},{path:"/01.test1/02.相关文章/10.关于博客搭建与管理.html",redirect:"/pages/26997d/"},{name:"v-25ca8934",path:"/pages/c5a54d/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-25ca8934").then(t)}},{path:"/pages/c5a54d/index.html",redirect:"/pages/c5a54d/"},{path:"/01.test1/02.相关文章/11.在线编辑和新增文章的方法.html",redirect:"/pages/c5a54d/"},{name:"v-37ac5f90",path:"/pages/a20ce8/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-37ac5f90").then(t)}},{path:"/pages/a20ce8/index.html",redirect:"/pages/a20ce8/"},{path:"/02.test12/01.配置/01.主题配置.html",redirect:"/pages/a20ce8/"},{name:"v-420d7ee0",path:"/pages/f14bdb/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-420d7ee0").then(t)}},{path:"/pages/f14bdb/index.html",redirect:"/pages/f14bdb/"},{path:"/02.test12/01.配置/02.首页配置.html",redirect:"/pages/f14bdb/"},{name:"v-5bd507f9",path:"/pages/3216b0/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-5bd507f9").then(t)}},{path:"/pages/3216b0/index.html",redirect:"/pages/3216b0/"},{path:"/02.test12/01.配置/03.front matter配置.html",redirect:"/pages/3216b0/"},{name:"v-6407fe0b",path:"/pages/54651a/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-6407fe0b").then(t)}},{path:"/pages/54651a/index.html",redirect:"/pages/54651a/"},{path:"/02.test12/01.配置/04.目录页配置.html",redirect:"/pages/54651a/"},{name:"v-3dd8a8fe",path:"/pages/1cc523/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-3dd8a8fe").then(t)}},{path:"/pages/1cc523/index.html",redirect:"/pages/1cc523/"},{path:"/02.test12/01.配置/05.添加摘要.html",redirect:"/pages/1cc523/"},{name:"v-6ebe052f",path:"/pages/f51918/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-6ebe052f").then(t)}},{path:"/pages/f51918/index.html",redirect:"/pages/f51918/"},{path:"/02.test12/01.配置/06.修改主题颜色和样式.html",redirect:"/pages/f51918/"},{name:"v-64c4e09a",path:"/pages/ce175c/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-64c4e09a").then(t)}},{path:"/pages/ce175c/index.html",redirect:"/pages/ce175c/"},{path:"/02.test12/01.配置/07.评论栏.html",redirect:"/pages/ce175c/"},{name:"v-3e64f9ee",path:"/pages/db78e2/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-3e64f9ee").then(t)}},{path:"/pages/db78e2/index.html",redirect:"/pages/db78e2/"},{path:"/03.test123/01.资源.html",redirect:"/pages/db78e2/"},{name:"v-44ea450a",path:"/pages/5d571c/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-44ea450a").then(t)}},{path:"/pages/5d571c/index.html",redirect:"/pages/5d571c/"},{path:"/04.test1234/01.案例.html",redirect:"/pages/5d571c/"},{name:"v-255a8306",path:"/pages/9cc27d/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-255a8306").then(t)}},{path:"/pages/9cc27d/index.html",redirect:"/pages/9cc27d/"},{path:"/05.test12345/01.问答.html",redirect:"/pages/9cc27d/"},{name:"v-4d748a5c",path:"/pages/1b12ed/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-4d748a5c").then(t)}},{path:"/pages/1b12ed/index.html",redirect:"/pages/1b12ed/"},{path:"/06.test12345/01.赞助.html",redirect:"/pages/1b12ed/"},{name:"v-2411c268",path:"/pages/0d3040/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-2411c268").then(t)}},{path:"/pages/0d3040/index.html",redirect:"/pages/0d3040/"},{path:"/07.Java/01.基础篇/001.基础篇001.html",redirect:"/pages/0d3040/"},{name:"v-3a7f0068",path:"/pages/cd3bc7/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-3a7f0068").then(t)}},{path:"/pages/cd3bc7/index.html",redirect:"/pages/cd3bc7/"},{path:"/07.Java/01.基础篇/002.基础篇002.html",redirect:"/pages/cd3bc7/"},{name:"v-50ec3e68",path:"/pages/f7bc57/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-50ec3e68").then(t)}},{path:"/pages/f7bc57/index.html",redirect:"/pages/f7bc57/"},{path:"/07.Java/01.基础篇/003.基础篇003.html",redirect:"/pages/f7bc57/"},{name:"v-4ce8331c",path:"/pages/d236d6/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-4ce8331c").then(t)}},{path:"/pages/d236d6/index.html",redirect:"/pages/d236d6/"},{path:"/07.Java/02.JVM篇/001.JVM001.html",redirect:"/pages/d236d6/"},{name:"v-5f89669c",path:"/pages/723756/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-5f89669c").then(t)}},{path:"/pages/723756/index.html",redirect:"/pages/723756/"},{path:"/07.Java/02.JVM篇/002.JVM002.html",redirect:"/pages/723756/"},{name:"v-78a877b0",path:"/pages/7c6a10/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-78a877b0").then(t)}},{path:"/pages/7c6a10/index.html",redirect:"/pages/7c6a10/"},{path:"/07.Java/03.多线程&并发篇/001.多线程&并发篇001.html",redirect:"/pages/7c6a10/"},{name:"v-115d94a0",path:"/pages/35e1a9/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-115d94a0").then(t)}},{path:"/pages/35e1a9/index.html",redirect:"/pages/35e1a9/"},{path:"/07.Java/03.多线程&并发篇/002.多线程&并发篇002.html",redirect:"/pages/35e1a9/"},{name:"v-75f9f3b0",path:"/pages/9a2810/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-75f9f3b0").then(t)}},{path:"/pages/9a2810/index.html",redirect:"/pages/9a2810/"},{path:"/07.Java/03.多线程&并发篇/003.多线程&并发篇003.html",redirect:"/pages/9a2810/"},{name:"v-b7ae71e0",path:"/pages/d9fe94/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-b7ae71e0").then(t)}},{path:"/pages/d9fe94/index.html",redirect:"/pages/d9fe94/"},{path:"/07.Java/04.Spring篇/001.Spring篇001.html",redirect:"/pages/d9fe94/"},{name:"v-518c8a5c",path:"/pages/b9285d/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-518c8a5c").then(t)}},{path:"/pages/b9285d/index.html",redirect:"/pages/b9285d/"},{path:"/07.Java/05.MyBatis篇/001.MyBatis篇001.html",redirect:"/pages/b9285d/"},{name:"v-70767908",path:"/archives/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-70767908").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-74fdeb5c",path:"/categories/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-74fdeb5c").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-00210ffc",path:"/tags/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-00210ffc").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-0ef24a56",path:"/",component:yl,beforeEnter:(n,e,t)=>{us("Layout","v-0ef24a56").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:yl}],wl={title:"云少的笔记",description:"一个基于VuePress的 知识管理",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"云少,云遇未晚,笔记,程序员,Java"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"referrer",content:"no-referrer-when-downgrade"}]],pages:[{title:"主题初衷与诞生",frontmatter:{title:"主题初衷与诞生",date:"2020-05-11T13:59:38.000Z",permalink:"/pages/52d5c3",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/01.%E4%B8%BB%E9%A2%98%E5%88%9D%E8%A1%B7%E4%B8%8E%E8%AF%9E%E7%94%9F.html",relativePath:"01.test1/01.指南/01.主题初衷与诞生.md",key:"v-b84013dc",path:"/pages/52d5c3/",headers:[{level:2,title:"Markdown",slug:"markdown",normalizedTitle:"markdown",charIndex:109},{level:2,title:"知识管理",slug:"知识管理",normalizedTitle:"知识管理",charIndex:22},{level:2,title:"VuePress",slug:"vuepress",normalizedTitle:"vuepress",charIndex:294},{level:2,title:"知识管理&博客主题-Vdoing的诞生",slug:"知识管理-博客主题-vdoing的诞生",normalizedTitle:"知识管理&amp;博客主题-vdoing的诞生",charIndex:null},{level:3,title:"主题名称",slug:"主题名称",normalizedTitle:"主题名称",charIndex:1058}],headersStr:"Markdown 知识管理 VuePress 知识管理&博客主题-Vdoing的诞生 主题名称",content:"这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# Markdown\n\n最初接触Markdown的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用txt记录笔记、云笔记、Markdown笔记，并把Markdown文件上传到github进行管理，但总感觉还是不够方便...直到我发现了VuePress，它似乎可以管理我的学习笔记，并且把站点部署到github pages不就是一个在线的云笔记网站了吗\n\n\n# VuePress\n\nVuePress是一个 Vue 驱动的静态网站生成器，正是以Markdown为中心的项目结构，它简洁至上的理念正合我心。对于我这个对Vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-Vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nVuePress的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足15秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nVdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》B站传送 youtube传送，里面有讲到vue起名的故事，一开始想起的名其实是Seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用Vdoing好了...",normalizedContent:"这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# markdown\n\n最初接触markdown的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用txt记录笔记、云笔记、markdown笔记，并把markdown文件上传到github进行管理，但总感觉还是不够方便...直到我发现了vuepress，它似乎可以管理我的学习笔记，并且把站点部署到github pages不就是一个在线的云笔记网站了吗\n\n\n# vuepress\n\nvuepress是一个 vue 驱动的静态网站生成器，正是以markdown为中心的项目结构，它简洁至上的理念正合我心。对于我这个对vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nvuepress的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足15秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nvdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》b站传送 youtube传送，里面有讲到vue起名的故事，一开始想起的名其实是seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用vdoing好了...",charsets:{cjk:!0}},{title:"介绍",frontmatter:{title:"介绍",date:"2020-05-11T13:54:03.000Z",permalink:"/pages/a2f161",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/02.%E4%BB%8B%E7%BB%8D.html",relativePath:"01.test1/01.指南/02.介绍.md",key:"v-4e1f9fda",path:"/pages/a2f161/",headers:[{level:2,title:"特性",slug:"特性",normalizedTitle:"特性",charIndex:269},{level:2,title:"扩展功能",slug:"扩展功能",normalizedTitle:"扩展功能",charIndex:543},{level:2,title:"安利",slug:"安利",normalizedTitle:"安利",charIndex:867}],headersStr:"特性 扩展功能 安利",content:"Vdoing是VuePress v1.x的一个主题，是在默认主题基础上做的修改和扩展，很多配置仍然沿用官方配置。使用本主题可以很方便的搭建一个结构化的知识库或博客。\n\n这个主题的初衷是打造一个好用的、面向程序员的知识管理工具： 主题初衷与诞生。\n\n注意\n\n 1. Node请使用v14.17.x或以上版本\n 2. 在使用本主题前，要求你至少会VuePress v1.x的基本使用和默认主题的基本配置，然后再查看本文档。\n 3. 本文档仅负责介绍Vdoing主题对默认主题的扩展部分，更多配置请移步 VuePress v1.x文档\n\n\n# 特性\n\n * 知识管理\n\n包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台。\n\n * 结构化\n\n自动生成侧边栏、目录页、索引页、面包屑等，轻松构建一个结构化知识库。\n\n * 碎片化&个性化\n\n博客功能提供一种知识的碎片化形态，并提供个性化的博客配置。\n\n * 简洁高效\n\n以 Markdown 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点。\n\n * 沉浸式阅读体验\n\n专为阅读设计的UI，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验。\n\n\n# 扩展功能\n\n相较于默认主题，添加的功能内容主要有：\n\n * 添加方便管理学习笔记和技术文档的自动生成结构化侧边栏、自动生成front matter、目录页、扩展的搜索框插件、面包屑、快捷翻页按钮 等，让你快速定位到任何你想要找的内容。\n\n * 添加博客相关的 文章信息栏（作者与创建时间）、最近更新栏 、博主信息栏、页脚版权栏、分类功能+分类页、标签功能+标签页、归档页、评论插件等。\n\n * 方便好用的 Markdown 容器。\n\n * 首页文章列表、个性化配置和样式美化等。\n\n * 多种颜色模式供用户选择：跟随系统、浅色模式、深色模式、阅读模式\n\n * 提高搬砖效率的辅助工具： 批量操作front matter工具\n\n * ...\n\n\n# 安利\n\n * 拥有它你就同时拥有了一个专属你个人的在线知识库(云笔记)、博客、文档库、Demo库、一站式技术搜索工具，内容全部采用Markdown编写，简单高效，各种代码随便贴。\n\n * 你可以在.md文件中写html、css、js、甚至是vue组件代码，markdown天然的就支持vue组件，魔改页面什么的不要太简单。\n\n * 相当多的程序员喜欢深色模式，还有的视力也不太好(🤓)，我们有浅色、深色和阅读模式，更有跟随系统自动响应深浅色模式功能，想怎么换就怎么换。\n   \n   > 点击右下角换肤按钮\n\n * 当你习惯用vdoing主题后，在别处看文档发现是markdown编写的，但所在站点的目录、导航、主题等某个地方用起来不是很爽，你都可以把文档拷贝或把整个专栏下载(如支持下载的话)下来放到vdoing主题，vdoing的自动化工具助你生成一个结构清晰的、拥有目录、页面导航的，而且有多种颜色模式的文档站。让你更专注于内容的学习。\n   \n   > 参考我博客中的文档专栏\n\n * 如果你想和更多的人分享你的文章，那么这款seo友好的主题是一个很不错的选择，更有为了加快百度收录而定制的每天定时百度推送程序。\n   \n   > 参考我的博客收录情况。\n\n别犹豫了，赶快上手吧",normalizedContent:"vdoing是vuepress v1.x的一个主题，是在默认主题基础上做的修改和扩展，很多配置仍然沿用官方配置。使用本主题可以很方便的搭建一个结构化的知识库或博客。\n\n这个主题的初衷是打造一个好用的、面向程序员的知识管理工具： 主题初衷与诞生。\n\n注意\n\n 1. node请使用v14.17.x或以上版本\n 2. 在使用本主题前，要求你至少会vuepress v1.x的基本使用和默认主题的基本配置，然后再查看本文档。\n 3. 本文档仅负责介绍vdoing主题对默认主题的扩展部分，更多配置请移步 vuepress v1.x文档\n\n\n# 特性\n\n * 知识管理\n\n包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台。\n\n * 结构化\n\n自动生成侧边栏、目录页、索引页、面包屑等，轻松构建一个结构化知识库。\n\n * 碎片化&个性化\n\n博客功能提供一种知识的碎片化形态，并提供个性化的博客配置。\n\n * 简洁高效\n\n以 markdown 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点。\n\n * 沉浸式阅读体验\n\n专为阅读设计的ui，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验。\n\n\n# 扩展功能\n\n相较于默认主题，添加的功能内容主要有：\n\n * 添加方便管理学习笔记和技术文档的自动生成结构化侧边栏、自动生成front matter、目录页、扩展的搜索框插件、面包屑、快捷翻页按钮 等，让你快速定位到任何你想要找的内容。\n\n * 添加博客相关的 文章信息栏（作者与创建时间）、最近更新栏 、博主信息栏、页脚版权栏、分类功能+分类页、标签功能+标签页、归档页、评论插件等。\n\n * 方便好用的 markdown 容器。\n\n * 首页文章列表、个性化配置和样式美化等。\n\n * 多种颜色模式供用户选择：跟随系统、浅色模式、深色模式、阅读模式\n\n * 提高搬砖效率的辅助工具： 批量操作front matter工具\n\n * ...\n\n\n# 安利\n\n * 拥有它你就同时拥有了一个专属你个人的在线知识库(云笔记)、博客、文档库、demo库、一站式技术搜索工具，内容全部采用markdown编写，简单高效，各种代码随便贴。\n\n * 你可以在.md文件中写html、css、js、甚至是vue组件代码，markdown天然的就支持vue组件，魔改页面什么的不要太简单。\n\n * 相当多的程序员喜欢深色模式，还有的视力也不太好(🤓)，我们有浅色、深色和阅读模式，更有跟随系统自动响应深浅色模式功能，想怎么换就怎么换。\n   \n   > 点击右下角换肤按钮\n\n * 当你习惯用vdoing主题后，在别处看文档发现是markdown编写的，但所在站点的目录、导航、主题等某个地方用起来不是很爽，你都可以把文档拷贝或把整个专栏下载(如支持下载的话)下来放到vdoing主题，vdoing的自动化工具助你生成一个结构清晰的、拥有目录、页面导航的，而且有多种颜色模式的文档站。让你更专注于内容的学习。\n   \n   > 参考我博客中的文档专栏\n\n * 如果你想和更多的人分享你的文章，那么这款seo友好的主题是一个很不错的选择，更有为了加快百度收录而定制的每天定时百度推送程序。\n   \n   > 参考我的博客收录情况。\n\n别犹豫了，赶快上手吧",charsets:{cjk:!0}},{title:"快速上手",frontmatter:{title:"快速上手",date:"2020-05-11T13:54:40.000Z",permalink:"/pages/793dcb",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/03.%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.html",relativePath:"01.test1/01.指南/03.快速上手.md",key:"v-df29f4cc",path:"/pages/793dcb/",headers:[{level:2,title:"安装和启动",slug:"安装和启动",normalizedTitle:"安装和启动",charIndex:2},{level:2,title:"使用Vdoing主题",slug:"使用vdoing主题",normalizedTitle:"使用vdoing主题",charIndex:928},{level:2,title:"版本升级",slug:"版本升级",normalizedTitle:"版本升级",charIndex:1211}],headersStr:"安装和启动 使用Vdoing主题 版本升级",content:"# 安装和启动\n\n# clone the project\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing.git\n\n# enter the project directory\ncd vuepress-theme-vdoing\n\n# install dependency 注意：如安装不成功请关闭淘宝源。\nnpm install # or yarn install\n\n# develop\nnpm run dev # or yarn dev\n\n\n# clone the project\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing-doc.git\n\n# enter the project directory\ncd vuepress-theme-vdoing-doc\n\n# install dependency 注意：如安装不成功请关闭淘宝源。\nnpm install # or yarn install\n\n# develop\nnpm run dev # or yarn dev\n\n\n> 仓库地址： https://github.com/xugaoyi/vuepress-theme-vdoing-doc\n\n# clone the project\ngit clone https://github.com/u2sb/vuepress-theme-vdoing-template.git\n\n# enter the project directory\ncd vuepress-theme-vdoing-template\n\n# install dependency 注意：如安装不成功请关闭淘宝源。\nnpm install # or yarn install\n\n# develop\nnpm run dev # or yarn dev\n\n\n> 仓库地址： https://github.com/u2sb/vuepress-theme-vdoing-template\n\n注意\n\nNode请使用v14.17.x或以上版本\n\n\n# 使用Vdoing主题\n\n 1. 安装最新的Vdoing主题包：\n\nnpm install vuepress-theme-vdoing -D\n\n\n 2. 在.vuepress/config.js中配置使用主题：\n\n// config.js\nmodule.exports = {\n  theme: 'vdoing'\n}\n\n\n提示\n\n 1. 不建议在原默认vuepress项目上单独安装使用本主题包，而是clone我的整个项目再替换你自己的内容即可。\n 2. 修改config.js配置后需要重新启动项目才会生效。\n 3. 更多关于项目上手的问题，请查阅 问答。\n\n\n# 版本升级\n\n主题的版本会不定期更新，你只需更新npm主题包即可：\n\nnpm update vuepress-theme-vdoing\n\n\n提示\n\n 1. 如更新后没起作用或报错，尝试把node_modules文件夹删除再npm i重新安装。\n 2. 在.vuepress/config.js中，设置theme: 'vdoing'才是使用npm主题依赖包:\n\n// config.js\nmodule.exports = {\n  theme: 'vdoing', // npm主题依赖包\n  // theme: require.resolve('../../vdoing'), // 使用本地主题包\n}\n",normalizedContent:"# 安装和启动\n\n# clone the project\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing.git\n\n# enter the project directory\ncd vuepress-theme-vdoing\n\n# install dependency 注意：如安装不成功请关闭淘宝源。\nnpm install # or yarn install\n\n# develop\nnpm run dev # or yarn dev\n\n\n# clone the project\ngit clone https://github.com/xugaoyi/vuepress-theme-vdoing-doc.git\n\n# enter the project directory\ncd vuepress-theme-vdoing-doc\n\n# install dependency 注意：如安装不成功请关闭淘宝源。\nnpm install # or yarn install\n\n# develop\nnpm run dev # or yarn dev\n\n\n> 仓库地址： https://github.com/xugaoyi/vuepress-theme-vdoing-doc\n\n# clone the project\ngit clone https://github.com/u2sb/vuepress-theme-vdoing-template.git\n\n# enter the project directory\ncd vuepress-theme-vdoing-template\n\n# install dependency 注意：如安装不成功请关闭淘宝源。\nnpm install # or yarn install\n\n# develop\nnpm run dev # or yarn dev\n\n\n> 仓库地址： https://github.com/u2sb/vuepress-theme-vdoing-template\n\n注意\n\nnode请使用v14.17.x或以上版本\n\n\n# 使用vdoing主题\n\n 1. 安装最新的vdoing主题包：\n\nnpm install vuepress-theme-vdoing -d\n\n\n 2. 在.vuepress/config.js中配置使用主题：\n\n// config.js\nmodule.exports = {\n  theme: 'vdoing'\n}\n\n\n提示\n\n 1. 不建议在原默认vuepress项目上单独安装使用本主题包，而是clone我的整个项目再替换你自己的内容即可。\n 2. 修改config.js配置后需要重新启动项目才会生效。\n 3. 更多关于项目上手的问题，请查阅 问答。\n\n\n# 版本升级\n\n主题的版本会不定期更新，你只需更新npm主题包即可：\n\nnpm update vuepress-theme-vdoing\n\n\n提示\n\n 1. 如更新后没起作用或报错，尝试把node_modules文件夹删除再npm i重新安装。\n 2. 在.vuepress/config.js中，设置theme: 'vdoing'才是使用npm主题依赖包:\n\n// config.js\nmodule.exports = {\n  theme: 'vdoing', // npm主题依赖包\n  // theme: require.resolve('../../vdoing'), // 使用本地主题包\n}\n",charsets:{cjk:!0}},{title:"目录结构",frontmatter:{title:"目录结构",date:"2020-05-11T13:54:56.000Z",permalink:"/pages/2f674a",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/04.%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html",relativePath:"01.test1/01.指南/04.目录结构.md",key:"v-c7606cca",path:"/pages/2f674a/",headersStr:null,content:".\n├── .github   (可选，GitHub 相关文件)\n│   ├── workflows\n│   │   ├── baiduPush.yml (可选，百度定时自动推送)\n│   │   └── ci.yml (可选，自动部署)\n├── docs (必须，不要修改文件夹名称)\n│   ├── .vuepress （同官方，查看：https://vuepress.vuejs.org/zh/guide/directory-structure.html#目录结构）\n│   ├── @pages (可选，自动生成的文件夹，存放分类页、标签页、归档页)\n│   ├── _posts (可选，专门存放碎片化博客文章的文件夹)\n│   ├── <结构化目录>\n│   └── index.md (首页)\n├── vdoing (可选，本地的vdoing主题)\n├── utils  (可选，vdoing主题使用的node工具)\n│   ├── modules\n│   ├── config.yml (可选，批量操作front matter配置)\n│   ├── editFrontmatter.js (可选，批量操作front matter工具)\n├── baiduPush.sh (可选，百度推送命令脚本)\n├── deploy.sh (可选，部署命令脚本)\n│\n└── package.json\n\n\n\n * docs 文件夹名称请不要修改\n\n * docs/.vuepress 用于存放全局的配置、样式、静态资源等，同官方，查看 详情\n\n * docs/@pages 此文件夹是自动生成的，存放分类页、标签页、归档页对应的.md文件，一般不需要改动\n\n * docs/_posts 专门用于存放碎片化博客文章，里面的.md文件不需要遵循命名约定，不会生成结构化侧边栏和目录页。\n\n * docs/<结构化目录> 请查看《构建结构化站点的核心配置和约定》。\n\n * docs/index.md 首页\n\n * vdoing 存放在本地的vdoing主题文件，如果你想深度的修改主题，首先要在docs/.vuepress/config.js中配置使用的主题指向这个文件。\n\n  module.exports = {\n    // theme: 'vdoing', // npm主题依赖包\n    theme: require.resolve('../../vdoing'), // 使用本地主题包\n  }\n\n\n  import { resolve } from 'path'\n  import { defineConfig4CustomTheme } from 'vuepress/config'\n  import { VdoingThemeConfig } from 'vuepress-theme-vdoing/types'\n  export default defineConfig4CustomTheme<VdoingThemeConfig>({\n    // theme: 'vdoing', // 使用npm主题包\n    theme: resolve(__dirname, '../../vdoing'), // 使用本地主题包\n  })\n\n\n注意：主题的后续维护升级只对npm主题包负责，就是说你使用本地主题就等于放弃了后续的升级服务。因此，建议能在docs/.vuepress/内配置和修改的，就尽量不要改动主题内部代码。\n\n----------------------------------------\n\n提示\n\n为了方便您更快的学习和使用本主题，我在代码当中添加了比较多的注释说明。",normalizedContent:".\n├── .github   (可选，github 相关文件)\n│   ├── workflows\n│   │   ├── baidupush.yml (可选，百度定时自动推送)\n│   │   └── ci.yml (可选，自动部署)\n├── docs (必须，不要修改文件夹名称)\n│   ├── .vuepress （同官方，查看：https://vuepress.vuejs.org/zh/guide/directory-structure.html#目录结构）\n│   ├── @pages (可选，自动生成的文件夹，存放分类页、标签页、归档页)\n│   ├── _posts (可选，专门存放碎片化博客文章的文件夹)\n│   ├── <结构化目录>\n│   └── index.md (首页)\n├── vdoing (可选，本地的vdoing主题)\n├── utils  (可选，vdoing主题使用的node工具)\n│   ├── modules\n│   ├── config.yml (可选，批量操作front matter配置)\n│   ├── editfrontmatter.js (可选，批量操作front matter工具)\n├── baidupush.sh (可选，百度推送命令脚本)\n├── deploy.sh (可选，部署命令脚本)\n│\n└── package.json\n\n\n\n * docs 文件夹名称请不要修改\n\n * docs/.vuepress 用于存放全局的配置、样式、静态资源等，同官方，查看 详情\n\n * docs/@pages 此文件夹是自动生成的，存放分类页、标签页、归档页对应的.md文件，一般不需要改动\n\n * docs/_posts 专门用于存放碎片化博客文章，里面的.md文件不需要遵循命名约定，不会生成结构化侧边栏和目录页。\n\n * docs/<结构化目录> 请查看《构建结构化站点的核心配置和约定》。\n\n * docs/index.md 首页\n\n * vdoing 存放在本地的vdoing主题文件，如果你想深度的修改主题，首先要在docs/.vuepress/config.js中配置使用的主题指向这个文件。\n\n  module.exports = {\n    // theme: 'vdoing', // npm主题依赖包\n    theme: require.resolve('../../vdoing'), // 使用本地主题包\n  }\n\n\n  import { resolve } from 'path'\n  import { defineconfig4customtheme } from 'vuepress/config'\n  import { vdoingthemeconfig } from 'vuepress-theme-vdoing/types'\n  export default defineconfig4customtheme<vdoingthemeconfig>({\n    // theme: 'vdoing', // 使用npm主题包\n    theme: resolve(__dirname, '../../vdoing'), // 使用本地主题包\n  })\n\n\n注意：主题的后续维护升级只对npm主题包负责，就是说你使用本地主题就等于放弃了后续的升级服务。因此，建议能在docs/.vuepress/内配置和修改的，就尽量不要改动主题内部代码。\n\n----------------------------------------\n\n提示\n\n为了方便您更快的学习和使用本主题，我在代码当中添加了比较多的注释说明。",charsets:{cjk:!0}},{title:"构建结构化站点的核心配置和约定",frontmatter:{title:"构建结构化站点的核心配置和约定",date:"2020-05-12T11:01:21.000Z",permalink:"/pages/33d574",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/05.%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E5%92%8C%E7%BA%A6%E5%AE%9A.html",relativePath:"01.test1/01.指南/05.核心配置和约定.md",key:"v-0139c6ac",path:"/pages/33d574/",headers:[{level:3,title:"命名约定",slug:"命名约定",normalizedTitle:"命名约定",charIndex:442},{level:3,title:"级别说明",slug:"级别说明",normalizedTitle:"级别说明",charIndex:694},{level:3,title:"目录结构例子",slug:"目录结构例子",normalizedTitle:"目录结构例子",charIndex:1016},{level:3,title:"如何知道侧边栏数据有没有正确生成？",slug:"如何知道侧边栏数据有没有正确生成",normalizedTitle:"如何知道侧边栏数据有没有正确生成？",charIndex:1850}],headersStr:"命名约定 级别说明 目录结构例子 如何知道侧边栏数据有没有正确生成？",content:"本主题遵循“约定优于配置”原则，如果你想构建一个结构化的站点，需要遵循下面这些约定，约定可以为你省去很多配置，轻松拥有一个结构清晰的站点。\n\n你需要在config.js中有如下配置：\n\n// config.js\nmodule.exports = {\n  themeConfig: {\n     sidebar: 'structuring' //  'structuring' | { mode: 'structuring', collapsable: Boolean} | 'auto' | 自定义\n  }\n}\n\n\n在运行开发服务npm run dev或打包npm run build时主题内部将会按照目录约定自动生成一个结构化的侧边栏、目录页、面包屑等数据。\n\n在源目录（一般是docs）文件夹中，除了.vuepress、@pages、_posts、index.md 或 README.md之外的文件夹将会为其生成对应的侧边栏。生成的顺序取自序号，标题取自文件（夹）名称。\n\n\n# 命名约定\n\n * 无论是文件还是文件夹，请为其名称添加上正确的正整数序号和.，从00或01开始累计，如01.文件夹、02.文件.md，我们将会按照序号的顺序来决定其在侧边栏当中的顺序。\n * 同一级别目录别内即使只有一个文件或文件夹也要为其加上序号。\n\n提示\n\n序号只是用于决定先后顺序，并不一定需要连着，如01、02、03...，实际工作中可能会在两个文章中间插入一篇新的文章，因此为了方便可以采用间隔序号10、20、30...，后面如果需要在10和20中间插入一篇新文章，可以给定序号15。\n\n\n# 级别说明\n\n源目录（一般是docs）底下的级别现在我们称之为一级目录，一级目录的下一级为二级目录，以此类推，最多只能到四级目录。\n\n * 一级目录\n   1. .vuepress、@pages、_posts、index.md 或 README.md 这些文件(文件夹)不参与数据生成。\n   2. 序号非必须。（如一些专栏，可以不用序号)\n * 二级目录\n   1. 该级别下可以同时放文件夹和.md文件，但是两者序号要连贯（参考下面的例子中的其他）。\n   2. 必须有序号\n * 三级目录\n   * (同上)\n * 四级目录\n    1. 该级别下只能放.md文件。\n    2. 必须有序号\n\n所有级别内至少有一个文件或文件夹。\n\n\n# 目录结构例子\n\n.\n├── docs\n│   │  (不参与数据生成)\n│   ├── .vuepress\n│   ├── @pages\n│   ├── _posts\n│   ├── index.md\n│   │\n│   │ (以下部分参与数据生成)\n│   ├── 《JavaScript教程》专栏 (一级目录)\n│   │   ├── 01.章节1 (二级目录)\n│   │   |   ├── 01.js1.md (三级目录-文件)\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.章节2 (二级目录)\n│   │   |   ├── 01.jsa.md\n│   │   |   ├── 02.小节 (三级目录)\n│   │   |   |   └── 01.jsxx.md (四级目录-文件)\n│   ├── 01.前端\n│   │   ├── 01.JavaScript\n│   │   |   ├── 01.js1.md\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.vue\n│   │   |   ├── 01.vue1.md\n│   │   |   └── 02.vue2.md\n│   ├── 02.其他\n│   │   ├── 01.学习\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 02.学习笔记\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 03.文件x.md\n│   │   └── 04.文件xx.md\n│   └── 03.关于我\n│   │   └── 01.关于我.md\n.   .\n\n\n\n# 如何知道侧边栏数据有没有正确生成？\n\n在运行开发服务时(npm run dev)，在命令行查看打印记录，如果正确生成会有这样的绿色提示记录：\n\ntip: add sidebar data. 侧边栏数据添加成功。\n\n\n如果有未按约定的文件，会有黄色警告记录，如：\n\nwarning:  该文件'xxx'序号出错，请填写正确的序号。\n",normalizedContent:"本主题遵循“约定优于配置”原则，如果你想构建一个结构化的站点，需要遵循下面这些约定，约定可以为你省去很多配置，轻松拥有一个结构清晰的站点。\n\n你需要在config.js中有如下配置：\n\n// config.js\nmodule.exports = {\n  themeconfig: {\n     sidebar: 'structuring' //  'structuring' | { mode: 'structuring', collapsable: boolean} | 'auto' | 自定义\n  }\n}\n\n\n在运行开发服务npm run dev或打包npm run build时主题内部将会按照目录约定自动生成一个结构化的侧边栏、目录页、面包屑等数据。\n\n在源目录（一般是docs）文件夹中，除了.vuepress、@pages、_posts、index.md 或 readme.md之外的文件夹将会为其生成对应的侧边栏。生成的顺序取自序号，标题取自文件（夹）名称。\n\n\n# 命名约定\n\n * 无论是文件还是文件夹，请为其名称添加上正确的正整数序号和.，从00或01开始累计，如01.文件夹、02.文件.md，我们将会按照序号的顺序来决定其在侧边栏当中的顺序。\n * 同一级别目录别内即使只有一个文件或文件夹也要为其加上序号。\n\n提示\n\n序号只是用于决定先后顺序，并不一定需要连着，如01、02、03...，实际工作中可能会在两个文章中间插入一篇新的文章，因此为了方便可以采用间隔序号10、20、30...，后面如果需要在10和20中间插入一篇新文章，可以给定序号15。\n\n\n# 级别说明\n\n源目录（一般是docs）底下的级别现在我们称之为一级目录，一级目录的下一级为二级目录，以此类推，最多只能到四级目录。\n\n * 一级目录\n   1. .vuepress、@pages、_posts、index.md 或 readme.md 这些文件(文件夹)不参与数据生成。\n   2. 序号非必须。（如一些专栏，可以不用序号)\n * 二级目录\n   1. 该级别下可以同时放文件夹和.md文件，但是两者序号要连贯（参考下面的例子中的其他）。\n   2. 必须有序号\n * 三级目录\n   * (同上)\n * 四级目录\n    1. 该级别下只能放.md文件。\n    2. 必须有序号\n\n所有级别内至少有一个文件或文件夹。\n\n\n# 目录结构例子\n\n.\n├── docs\n│   │  (不参与数据生成)\n│   ├── .vuepress\n│   ├── @pages\n│   ├── _posts\n│   ├── index.md\n│   │\n│   │ (以下部分参与数据生成)\n│   ├── 《javascript教程》专栏 (一级目录)\n│   │   ├── 01.章节1 (二级目录)\n│   │   |   ├── 01.js1.md (三级目录-文件)\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.章节2 (二级目录)\n│   │   |   ├── 01.jsa.md\n│   │   |   ├── 02.小节 (三级目录)\n│   │   |   |   └── 01.jsxx.md (四级目录-文件)\n│   ├── 01.前端\n│   │   ├── 01.javascript\n│   │   |   ├── 01.js1.md\n│   │   |   ├── 02.js2.md\n│   │   |   └── 03.js3.md\n│   │   └── 02.vue\n│   │   |   ├── 01.vue1.md\n│   │   |   └── 02.vue2.md\n│   ├── 02.其他\n│   │   ├── 01.学习\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 02.学习笔记\n│   │   |   ├── 01.xxa.md\n│   │   |   └── 02.xxb.md\n│   │   ├── 03.文件x.md\n│   │   └── 04.文件xx.md\n│   └── 03.关于我\n│   │   └── 01.关于我.md\n.   .\n\n\n\n# 如何知道侧边栏数据有没有正确生成？\n\n在运行开发服务时(npm run dev)，在命令行查看打印记录，如果正确生成会有这样的绿色提示记录：\n\ntip: add sidebar data. 侧边栏数据添加成功。\n\n\n如果有未按约定的文件，会有黄色警告记录，如：\n\nwarning:  该文件'xxx'序号出错，请填写正确的序号。\n",charsets:{cjk:!0}},{title:"自动生成front matter",frontmatter:{title:"自动生成front matter",date:"2020-05-12T11:46:37.000Z",permalink:"/pages/088c16",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/06.%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90front%20matter.html",relativePath:"01.test1/01.指南/06.自动生成front matter.md",key:"v-76c02e99",path:"/pages/088c16/",headers:[{level:3,title:"生成示例",slug:"生成示例",normalizedTitle:"生成示例",charIndex:203},{level:3,title:"title",slug:"title",normalizedTitle:"title",charIndex:28},{level:3,title:"date",slug:"date",normalizedTitle:"date",charIndex:38},{level:3,title:"permalink",slug:"permalink",normalizedTitle:"permalink",charIndex:49},{level:3,title:"categories",slug:"categories",normalizedTitle:"categories",charIndex:63},{level:3,title:"tags",slug:"tags",normalizedTitle:"tags",charIndex:78},{level:3,title:"扩展自动生成front matter",slug:"扩展自动生成front-matter",normalizedTitle:"扩展自动生成front matter",charIndex:1126},{level:3,title:"碎片化文章‘分类’的自动生成规则",slug:"碎片化文章-分类-的自动生成规则",normalizedTitle:"碎片化文章‘分类’的自动生成规则",charIndex:1232}],headersStr:"生成示例 title date permalink categories tags 扩展自动生成front matter 碎片化文章‘分类’的自动生成规则",content:"当你没有给.md文件的front matter指定标题(title)、时间(date)、永久链接(permalink)、分类(categories)、标签(tags)、主题配置中extendFrontmatter配置的字段时，在运行开发服务npm run dev或打包npm run build时将自动为你生成这些数据，你也可以自己手动设置这些数据，当你手动设置之后，相应的数据就不会再自动生成。\n\n\n# 生成示例\n\n---\ntitle: 《JavaScript教程》笔记\ndate: 2020-01-12 11:51:53\npermalink: /pages/d8cae9\ncategories:\n  - 前端\n  - JavaScript\ntags:\n  -\n---\n\n\n\n# title\n\n * 类型: string\n\n * 默认：.md文件的名称\n\n当前页面的标题\n\n\n# date\n\n * 类型: string\n * 格式：YYYY-MM-DD HH:MM:SS\n * 默认：.md文件在系统中创建的时间\n\n当前页面的创建时间，如需手动添加或修改该字段时请按照格式添加或修改\n\n\n# permalink\n\n * 类型: string\n * 默认：/pages/+ 6位字母加数字的随机码\n\n当前页面的永久链接\n\n> Q：自动生成front matter为什么要包含永久链接？\n> \n> A：使用永久链接是出于以下几点考虑:\n> \n>  * 在config.js配置nav时使用永久链接，就不会因为文件的路径或名称的改变而改变。\n>  * 对于博客而言，当别人收藏了你的文章，在未来的时间里都可以通过永久链接来访问到。\n>  * 主题中的目录页需要通过永久链接来访问文章。\n\n\n# categories\n\n * 类型: array\n * 默认：\n   * .md所在的文件夹名称。\n   * 如果.md文件所在的目录是三级目录，则会有两个分类值，分别是二级目录和一级目录的文件夹名称。如果在四级目录，则再多一个三级目录的文件夹名称分类。（级别说明）\n   * 如果.md文件所在的目录是_posts，则默认值是随笔，这个默认值可以在config.js中修改，参考：config.js配置\n * 如果在 config.js配置 设置了category: false 将不会自动生成该字段\n\n当前页面的分类\n\n\n# tags\n\n * 类型: array\n * 默认：空数组\n * 如果在 config.js配置 设置了tag: false 将不会自动生成该字段\n\n当前页面的标签，默认值是空数组，自动生成该字段只是为了方便后面添加标签值。\n\n\n# 扩展自动生成front matter\n\n当在主题配置中配置了extendFrontmatter时，将在自动生成front matter时添加相应配置的字段和数据。详见：extendFrontmatter\n\n\n# 碎片化文章‘分类’的自动生成规则\n\n> 碎片化文章即放在_posts文件夹的文章，里面的.md文件不需要遵循命名约定，不会生成结构化侧边栏和目录页。\n\n当文章在_posts根目录时，分类获取 themeConfig.categoryText 的值，如_posts/foo.md ，则foo.md文件的分类会生成为：\n\ncategories:\n  - 随笔\n\n\n> categoryText的默认值是‘随笔’，可在themeConfig修改，详见categorytext。\n\n当文章在非_posts根目录时，获取父文件夹的名称作为分类，如\n\n_posts/想法/奇思妙想/foo.md ，则foo.md文件的分类会生成为：\n\ncategories:\n  - 想法\n  - 奇思妙想\n",normalizedContent:"当你没有给.md文件的front matter指定标题(title)、时间(date)、永久链接(permalink)、分类(categories)、标签(tags)、主题配置中extendfrontmatter配置的字段时，在运行开发服务npm run dev或打包npm run build时将自动为你生成这些数据，你也可以自己手动设置这些数据，当你手动设置之后，相应的数据就不会再自动生成。\n\n\n# 生成示例\n\n---\ntitle: 《javascript教程》笔记\ndate: 2020-01-12 11:51:53\npermalink: /pages/d8cae9\ncategories:\n  - 前端\n  - javascript\ntags:\n  -\n---\n\n\n\n# title\n\n * 类型: string\n\n * 默认：.md文件的名称\n\n当前页面的标题\n\n\n# date\n\n * 类型: string\n * 格式：yyyy-mm-dd hh:mm:ss\n * 默认：.md文件在系统中创建的时间\n\n当前页面的创建时间，如需手动添加或修改该字段时请按照格式添加或修改\n\n\n# permalink\n\n * 类型: string\n * 默认：/pages/+ 6位字母加数字的随机码\n\n当前页面的永久链接\n\n> q：自动生成front matter为什么要包含永久链接？\n> \n> a：使用永久链接是出于以下几点考虑:\n> \n>  * 在config.js配置nav时使用永久链接，就不会因为文件的路径或名称的改变而改变。\n>  * 对于博客而言，当别人收藏了你的文章，在未来的时间里都可以通过永久链接来访问到。\n>  * 主题中的目录页需要通过永久链接来访问文章。\n\n\n# categories\n\n * 类型: array\n * 默认：\n   * .md所在的文件夹名称。\n   * 如果.md文件所在的目录是三级目录，则会有两个分类值，分别是二级目录和一级目录的文件夹名称。如果在四级目录，则再多一个三级目录的文件夹名称分类。（级别说明）\n   * 如果.md文件所在的目录是_posts，则默认值是随笔，这个默认值可以在config.js中修改，参考：config.js配置\n * 如果在 config.js配置 设置了category: false 将不会自动生成该字段\n\n当前页面的分类\n\n\n# tags\n\n * 类型: array\n * 默认：空数组\n * 如果在 config.js配置 设置了tag: false 将不会自动生成该字段\n\n当前页面的标签，默认值是空数组，自动生成该字段只是为了方便后面添加标签值。\n\n\n# 扩展自动生成front matter\n\n当在主题配置中配置了extendfrontmatter时，将在自动生成front matter时添加相应配置的字段和数据。详见：extendfrontmatter\n\n\n# 碎片化文章‘分类’的自动生成规则\n\n> 碎片化文章即放在_posts文件夹的文章，里面的.md文件不需要遵循命名约定，不会生成结构化侧边栏和目录页。\n\n当文章在_posts根目录时，分类获取 themeconfig.categorytext 的值，如_posts/foo.md ，则foo.md文件的分类会生成为：\n\ncategories:\n  - 随笔\n\n\n> categorytext的默认值是‘随笔’，可在themeconfig修改，详见categorytext。\n\n当文章在非_posts根目录时，获取父文件夹的名称作为分类，如\n\n_posts/想法/奇思妙想/foo.md ，则foo.md文件的分类会生成为：\n\ncategories:\n  - 想法\n  - 奇思妙想\n",charsets:{cjk:!0}},{title:"Markdown 容器",frontmatter:{title:"Markdown 容器",date:"2020-05-29T11:16:18.000Z",permalink:"/pages/d0d7eb/",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/07.Markdown%20%E5%AE%B9%E5%99%A8.html",relativePath:"01.test1/01.指南/07.Markdown 容器.md",key:"v-136cdf5e",path:"/pages/d0d7eb/",headers:[{level:2,title:"信息框容器",slug:"信息框容器",normalizedTitle:"信息框容器",charIndex:92},{level:2,title:"布局容器",slug:"布局容器",normalizedTitle:"布局容器",charIndex:357},{level:3,title:"我是居中的内容",slug:"我是居中的内容",normalizedTitle:"我是居中的内容",charIndex:384},{level:2,title:"普通卡片列表",slug:"普通卡片列表",normalizedTitle:"普通卡片列表",charIndex:979},{level:3,title:"语法",slug:"语法",normalizedTitle:"语法",charIndex:23},{level:2,title:"图文卡片列表",slug:"图文卡片列表",normalizedTitle:"图文卡片列表",charIndex:3517},{level:3,title:"语法",slug:"语法-2",normalizedTitle:"语法",charIndex:23},{level:2,title:"增强配置",slug:"增强配置",normalizedTitle:"增强配置",charIndex:5789},{level:3,title:"1. 普通卡片和图文卡片容器",slug:"_1-普通卡片和图文卡片容器",normalizedTitle:"1. 普通卡片和图文卡片容器",charIndex:5842},{level:4,title:"target",slug:"target",normalizedTitle:"target",charIndex:5860},{level:3,title:"2. 图文卡片容器",slug:"_2-图文卡片容器",normalizedTitle:"2. 图文卡片容器",charIndex:5934},{level:4,title:"imgHeight",slug:"imgheight",normalizedTitle:"imgheight",charIndex:5947},{level:4,title:"objectFit",slug:"objectfit",normalizedTitle:"objectfit",charIndex:5992},{level:4,title:"lineClamp",slug:"lineclamp",normalizedTitle:"lineclamp",charIndex:6177},{level:3,title:"3. 配置示例：",slug:"_3-配置示例",normalizedTitle:"3. 配置示例：",charIndex:6216}],headersStr:"信息框容器 布局容器 我是居中的内容 普通卡片列表 语法 图文卡片列表 语法 增强配置 1. 普通卡片和图文卡片容器 target 2. 图文卡片容器 imgHeight objectFit lineClamp 3. 配置示例：",content:"Markdown 容器是对 Markdown 语法的一个扩展，使用简单的语法就可以在页面中呈现丰富的效果。\n\n除了原默认主题自带的容器外，本主题还新增了一些好用的自定义容器。\n\n\n# 信息框容器\n\n输入\n\n::: tip\n这是一条提示\n:::\n\n::: warning\n这是一条注意\n:::\n\n::: danger\n这是一条警告\n:::\n\n::: note\n这是笔记容器，在 <Badge text=\"v1.5.0 +\" /> 版本才支持哦~\n:::\n\n\n输出\n\n提示\n\n这是一条提示\n\n注意\n\n这是一条注意\n\n警告\n\n这是一条警告\n\n笔记\n\n这是笔记容器，在 以上版本才支持哦~\n\n以上容器均可自定义标题，如：\n\n::: tip 我的提示\n自定义标题的提示框\n:::\n\n\n我的提示\n\n自定义标题的提示框\n\n\n# 布局容器\n\n输入\n\n::: center\n  ### 我是居中的内容\n  （可用于标题、图片等的居中）\n:::\n\n::: right\n  [我是右浮动的内容](https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E8%BF%90%E5%8A%A8%E5%AE%9A%E5%BE%8B)\n:::\n\n::: details\n这是一个详情块，在 IE / Edge 中不生效\n```js\nconsole.log('这是一个详情块')\n```\n:::\n\n::: theorem 牛顿第一定律\n假若施加于某物体的外力为零，则该物体的运动速度不变。\n::: right\n来自 [维基百科](https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E8%BF%90%E5%8A%A8%E5%AE%9A%E5%BE%8B)\n:::\n\n\n输出\n\n\n# 我是居中的内容\n\n（可用于标题、图片等的居中）\n\n我是右浮动的内容\n\n点击查看\n\n这是一个详情块，在 IE / Edge 中不生效\n\nconsole.log('这是一个详情块')\n\n\n牛顿第一定律\n\n假若施加于某物体的外力为零，则该物体的运动速度不变。\n\n来自 维基百科\n\n> 注意：right、details、theorem这三个容器在v1.3.0 +版本才支持。center容器在v1.3.3 +版本才支持。\n\n\n# 普通卡片列表\n\n普通卡片列表容器，可用于友情链接、项目推荐、诗词展示等。\n\n先来看看效果：\n\n输出\n\n麋鹿鲁哟\n\n大道至简，知易行难\n\nXAOXUU\n\n#IOS #Volantis主题作者\n\n平凡的你我\n\n理想成为大牛的小陈同学\n\n- name: 麋鹿鲁哟\n  desc: 大道至简，知易行难\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选\n  link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgColor: '#CBEAFA' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' # 可选，默认var(--textColor)\n- name: XAOXUU\n  desc: '#IOS #Volantis主题作者'\n  avatar: https://fastly.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png\n  link: https://xaoxuu.com\n  bgColor: '#718971'\n  textColor: '#fff'\n- name: 平凡的你我\n  desc: 理想成为大牛的小陈同学\n  avatar: https://reinness.com/avatar.png\n  link: https://reinness.com\n  bgColor: '#FCDBA0'\n  textColor: '#A05F2C'\n\n\n上面效果在Markdown中的代码是这样的：\n\n输入\n\n::: cardList\n```yaml\n- name: 麋鹿鲁哟\n  desc: 大道至简，知易行难\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选\n  link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgColor: '#CBEAFA' # 可选，默认var(--bodyBg)。颜色值有#号时请添加单引号\n  textColor: '#6854A1' # 可选，默认var(--textColor)\n- name: XAOXUU\n  desc: '#IOS #Volantis主题作者'\n  avatar: https://fastly.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png\n  link: https://xaoxuu.com\n  bgColor: '#718971'\n  textColor: '#fff'\n- name: 平凡的你我\n  desc: 理想成为大牛的小陈同学\n  avatar: https://reinness.com/avatar.png\n  link: https://reinness.com\n  bgColor: '#FCDBA0'\n  textColor: '#A05F2C'\n```\n:::\n\n\n\n# 语法\n\n::: cardList <每行显示数量>\n``` yaml\n- name: 名称\n  desc: 描述\n  avatar: https://xxx.jpg # 头像，可选\n  link: https://xxx/ # 链接，可选\n  bgColor: '#CBEAFA' # 背景色，可选，默认var(--bodyBg)。颜色值有#号时请添加引号\n  textColor: '#6854A1' # 文本色，可选，默认var(--textColor)\n```\n:::\n\n\n * <每行显示数量> 数字，表示每行最多显示多少个，选值范围1~4，默认3。在小屏时会根据屏幕宽度减少每行显示数量。\n * 代码块需指定语言为yaml\n * 代码块内是一个yaml格式的数组列表\n * 数组成员的属性有：\n   * name名称\n   * desc描述\n   * avatar头像，可选\n   * link链接，可选\n   * bgColor背景色，可选，默认var(--bodyBg)。颜色值有#号时请添加引号\n   * textColor文本色，可选，默认var(--textColor)\n\n下面再来看另外一个示例：\n\n输入\n\n::: cardList 2\n```yaml\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  bgColor: '#F0DFB1'\n  textColor: '#242A38'\n- name: Vdoing\n  desc: 🚀一款简洁高效的VuePress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgColor: '#DFEEE7'\n  textColor: '#2A3344'\n```\n:::\n\n\n输出\n\n《静夜思》\n\n床前明月光，疑是地上霜。举头望明月，低头思故乡。\n\nVdoing\n\n🚀一款简洁高效的VuePress 知识管理&博客(blog) 主题\n\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  bgColor: '#F0DFB1'\n  textColor: '#242A38'\n- name: Vdoing\n  desc: 🚀一款简洁高效的VuePress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgColor: '#DFEEE7'\n  textColor: '#2A3344'\n\n\n\n# 图文卡片列表\n\n图文卡片列表容器，可用于项目展示、产品展示等。\n\n先看效果：\n\n输出\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\nEvan Xu\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\nEvan Xu\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\nEvan Xu\n\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: Evan Xu # 作者，可选\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg # 头像，可选\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: Evan Xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: Evan Xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n\n\n输入\n\n::: cardImgList\n```yaml\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: Evan Xu # 作者，可选\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg # 头像，可选\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: Evan Xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: Evan Xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n```\n:::\n\n\n\n# 语法\n\n::: cardImgList <每行显示数量>\n``` yaml\n- img: https://xxx.jpg # 图片地址\n  link: https://xxx.com # 链接地址\n  name: 标题\n  desc: 描述 # 可选\n  author: 作者名称 # 可选\n  avatar: https://xxx.jpg # 作者头像，可选\n```\n:::\n\n\n * <每行显示数量> 数字，表示每行最多显示多少个，选值范围1~4，默认3。在小屏时会根据屏幕宽度减少每行显示数量。\n * 代码块需指定语言为yaml\n * 代码块内是一个yaml格式的数组列表\n * 数组成员的属性有：\n   * img图片地址\n   * link链接地址\n   * name标题\n   * desc描述，可选\n   * author作者名称，可选\n   * avatar作者头像，可选\n\n\n# 增强配置\n\n为了适应更多需求场景，v1.9.0+版本的普通卡片和图文卡片容器添加了一些新的配置：\n\n\n# 1. 普通卡片和图文卡片容器\n\n# target\n\n * 链接的打开方式，默认_blank\n   \n   * _self 当前页面\n   \n   * _blank 新窗口打开\n\n\n# 2. 图文卡片容器\n\n# imgHeight\n\n * 设置图片高度，默认 auto\n   \n   * 带单位\n\n# objectFit\n\n * 设置图片的填充方式(object-fit)，默认 cover\n   \n   * fill 拉伸 (会改变宽高比)\n   * contain 缩放 (保持宽高比，会留空)\n   * cover 填充 (会裁剪)\n   * none 保持原有尺寸 (会留空或裁剪)\n   * scale-down 保证显示完整图片 (保持宽高比，会留空)\n\n# lineClamp\n\n * 描述文本超出多少行显示省略号，默认1\n\n\n\n\n# 3. 配置示例：\n\n::: cardImgList\n``` yaml\nconfig:\n    target: _blank\n    imgHeight: auto\n    objectFit: cover\n    lineClamp: 1\n\ndata:\n  - img: https://xxx.jpg\n    link: https://xugaoyi.com/\n    name: 标题\n    desc: 描述内容\n    author: Evan Xu\n    avatar: https://xxx.jpg\n```\n:::\n",normalizedContent:"markdown 容器是对 markdown 语法的一个扩展，使用简单的语法就可以在页面中呈现丰富的效果。\n\n除了原默认主题自带的容器外，本主题还新增了一些好用的自定义容器。\n\n\n# 信息框容器\n\n输入\n\n::: tip\n这是一条提示\n:::\n\n::: warning\n这是一条注意\n:::\n\n::: danger\n这是一条警告\n:::\n\n::: note\n这是笔记容器，在 <badge text=\"v1.5.0 +\" /> 版本才支持哦~\n:::\n\n\n输出\n\n提示\n\n这是一条提示\n\n注意\n\n这是一条注意\n\n警告\n\n这是一条警告\n\n笔记\n\n这是笔记容器，在 以上版本才支持哦~\n\n以上容器均可自定义标题，如：\n\n::: tip 我的提示\n自定义标题的提示框\n:::\n\n\n我的提示\n\n自定义标题的提示框\n\n\n# 布局容器\n\n输入\n\n::: center\n  ### 我是居中的内容\n  （可用于标题、图片等的居中）\n:::\n\n::: right\n  [我是右浮动的内容](https://zh.wikipedia.org/wiki/%e7%89%9b%e9%a1%bf%e8%bf%90%e5%8a%a8%e5%ae%9a%e5%be%8b)\n:::\n\n::: details\n这是一个详情块，在 ie / edge 中不生效\n```js\nconsole.log('这是一个详情块')\n```\n:::\n\n::: theorem 牛顿第一定律\n假若施加于某物体的外力为零，则该物体的运动速度不变。\n::: right\n来自 [维基百科](https://zh.wikipedia.org/wiki/%e7%89%9b%e9%a1%bf%e8%bf%90%e5%8a%a8%e5%ae%9a%e5%be%8b)\n:::\n\n\n输出\n\n\n# 我是居中的内容\n\n（可用于标题、图片等的居中）\n\n我是右浮动的内容\n\n点击查看\n\n这是一个详情块，在 ie / edge 中不生效\n\nconsole.log('这是一个详情块')\n\n\n牛顿第一定律\n\n假若施加于某物体的外力为零，则该物体的运动速度不变。\n\n来自 维基百科\n\n> 注意：right、details、theorem这三个容器在v1.3.0 +版本才支持。center容器在v1.3.3 +版本才支持。\n\n\n# 普通卡片列表\n\n普通卡片列表容器，可用于友情链接、项目推荐、诗词展示等。\n\n先来看看效果：\n\n输出\n\n麋鹿鲁哟\n\n大道至简，知易行难\n\nxaoxuu\n\n#ios #volantis主题作者\n\n平凡的你我\n\n理想成为大牛的小陈同学\n\n- name: 麋鹿鲁哟\n  desc: 大道至简，知易行难\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选\n  link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgcolor: '#cbeafa' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' # 可选，默认var(--textcolor)\n- name: xaoxuu\n  desc: '#ios #volantis主题作者'\n  avatar: https://fastly.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png\n  link: https://xaoxuu.com\n  bgcolor: '#718971'\n  textcolor: '#fff'\n- name: 平凡的你我\n  desc: 理想成为大牛的小陈同学\n  avatar: https://reinness.com/avatar.png\n  link: https://reinness.com\n  bgcolor: '#fcdba0'\n  textcolor: '#a05f2c'\n\n\n上面效果在markdown中的代码是这样的：\n\n输入\n\n::: cardlist\n```yaml\n- name: 麋鹿鲁哟\n  desc: 大道至简，知易行难\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg # 可选\n  link: https://www.cnblogs.com/miluluyo/ # 可选\n  bgcolor: '#cbeafa' # 可选，默认var(--bodybg)。颜色值有#号时请添加单引号\n  textcolor: '#6854a1' # 可选，默认var(--textcolor)\n- name: xaoxuu\n  desc: '#ios #volantis主题作者'\n  avatar: https://fastly.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png\n  link: https://xaoxuu.com\n  bgcolor: '#718971'\n  textcolor: '#fff'\n- name: 平凡的你我\n  desc: 理想成为大牛的小陈同学\n  avatar: https://reinness.com/avatar.png\n  link: https://reinness.com\n  bgcolor: '#fcdba0'\n  textcolor: '#a05f2c'\n```\n:::\n\n\n\n# 语法\n\n::: cardlist <每行显示数量>\n``` yaml\n- name: 名称\n  desc: 描述\n  avatar: https://xxx.jpg # 头像，可选\n  link: https://xxx/ # 链接，可选\n  bgcolor: '#cbeafa' # 背景色，可选，默认var(--bodybg)。颜色值有#号时请添加引号\n  textcolor: '#6854a1' # 文本色，可选，默认var(--textcolor)\n```\n:::\n\n\n * <每行显示数量> 数字，表示每行最多显示多少个，选值范围1~4，默认3。在小屏时会根据屏幕宽度减少每行显示数量。\n * 代码块需指定语言为yaml\n * 代码块内是一个yaml格式的数组列表\n * 数组成员的属性有：\n   * name名称\n   * desc描述\n   * avatar头像，可选\n   * link链接，可选\n   * bgcolor背景色，可选，默认var(--bodybg)。颜色值有#号时请添加引号\n   * textcolor文本色，可选，默认var(--textcolor)\n\n下面再来看另外一个示例：\n\n输入\n\n::: cardlist 2\n```yaml\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  bgcolor: '#f0dfb1'\n  textcolor: '#242a38'\n- name: vdoing\n  desc: 🚀一款简洁高效的vuepress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgcolor: '#dfeee7'\n  textcolor: '#2a3344'\n```\n:::\n\n\n输出\n\n《静夜思》\n\n床前明月光，疑是地上霜。举头望明月，低头思故乡。\n\nvdoing\n\n🚀一款简洁高效的vuepress 知识管理&博客(blog) 主题\n\n- name: 《静夜思》\n  desc: 床前明月光，疑是地上霜。举头望明月，低头思故乡。\n  bgcolor: '#f0dfb1'\n  textcolor: '#242a38'\n- name: vdoing\n  desc: 🚀一款简洁高效的vuepress 知识管理&博客(blog) 主题\n  link: https://github.com/xugaoyi/vuepress-theme-vdoing\n  bgcolor: '#dfeee7'\n  textcolor: '#2a3344'\n\n\n\n# 图文卡片列表\n\n图文卡片列表容器，可用于项目展示、产品展示等。\n\n先看效果：\n\n输出\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\nevan xu\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\nevan xu\n\n标题\n\n描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n\nevan xu\n\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: evan xu # 作者，可选\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg # 头像，可选\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: evan xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: evan xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n\n\n输入\n\n::: cardimglist\n```yaml\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200529162253.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容 # 描述，可选\n  author: evan xu # 作者，可选\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg # 头像，可选\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100256.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: evan xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n- img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530100257.jpg\n  link: https://xugaoyi.com/\n  name: 标题\n  desc: 描述内容描述内容描述内容描述内容描述内容描述内容描述内容描述内容\n  author: evan xu\n  avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n```\n:::\n\n\n\n# 语法\n\n::: cardimglist <每行显示数量>\n``` yaml\n- img: https://xxx.jpg # 图片地址\n  link: https://xxx.com # 链接地址\n  name: 标题\n  desc: 描述 # 可选\n  author: 作者名称 # 可选\n  avatar: https://xxx.jpg # 作者头像，可选\n```\n:::\n\n\n * <每行显示数量> 数字，表示每行最多显示多少个，选值范围1~4，默认3。在小屏时会根据屏幕宽度减少每行显示数量。\n * 代码块需指定语言为yaml\n * 代码块内是一个yaml格式的数组列表\n * 数组成员的属性有：\n   * img图片地址\n   * link链接地址\n   * name标题\n   * desc描述，可选\n   * author作者名称，可选\n   * avatar作者头像，可选\n\n\n# 增强配置\n\n为了适应更多需求场景，v1.9.0+版本的普通卡片和图文卡片容器添加了一些新的配置：\n\n\n# 1. 普通卡片和图文卡片容器\n\n# target\n\n * 链接的打开方式，默认_blank\n   \n   * _self 当前页面\n   \n   * _blank 新窗口打开\n\n\n# 2. 图文卡片容器\n\n# imgheight\n\n * 设置图片高度，默认 auto\n   \n   * 带单位\n\n# objectfit\n\n * 设置图片的填充方式(object-fit)，默认 cover\n   \n   * fill 拉伸 (会改变宽高比)\n   * contain 缩放 (保持宽高比，会留空)\n   * cover 填充 (会裁剪)\n   * none 保持原有尺寸 (会留空或裁剪)\n   * scale-down 保证显示完整图片 (保持宽高比，会留空)\n\n# lineclamp\n\n * 描述文本超出多少行显示省略号，默认1\n\n\n\n\n# 3. 配置示例：\n\n::: cardimglist\n``` yaml\nconfig:\n    target: _blank\n    imgheight: auto\n    objectfit: cover\n    lineclamp: 1\n\ndata:\n  - img: https://xxx.jpg\n    link: https://xugaoyi.com/\n    name: 标题\n    desc: 描述内容\n    author: evan xu\n    avatar: https://xxx.jpg\n```\n:::\n",charsets:{cjk:!0}},{title:"Markdown 中使用组件",frontmatter:{title:"Markdown 中使用组件",date:"2020-11-10T18:56:22.000Z",permalink:"/pages/197691/",article:!1},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/08.Markdown%20%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6.html",relativePath:"01.test1/01.指南/08.Markdown 中使用组件.md",key:"v-6de6bbd7",path:"/pages/197691/",headers:[{level:2,title:"标记",slug:"标记",normalizedTitle:"标记",charIndex:43},{level:4,title:"《沁园春·雪》",slug:"《沁园春·雪》",normalizedTitle:"《沁园春·雪》",charIndex:220},{level:2,title:"代码块选项卡",slug:"代码块选项卡",normalizedTitle:"代码块选项卡",charIndex:406}],headersStr:"标记 《沁园春·雪》 代码块选项卡",content:'主题的内置组件可以直接在Markdown文件中以类似html标签的方式使用。\n\n\n# 标记\n\n * Props:\n   \n   * text- string\n   * type - string, 可选值： tip | warning | error，默认： tip\n   * vertical - string, 可选值： top | middle，默认： top\n\n * Usage:\n\n你可以在标题或其他内容中使用标记：\n\n#### 《沁园春·雪》 <Badge text="摘"/>\n北国风光<Badge text="注释" type="warning"/>，千里冰封，万里雪飘。\n\n> <Badge text="译文" type="error" vertical="middle"/>: 北方的风光。\n\n\n效果：\n\n# 《沁园春·雪》\n\n北国风光，千里冰封，万里雪飘。\n\n> : 北方的风光。\n\n\n# 代码块选项卡\n\n在<code-group>中嵌套<code-block>来配合使用。在<code-block>标签添加title来指定tab标题，active指定当前tab：\n\n<code-group>\n  <code-block title="YARN" active>\n  ```bash\n  yarn add vuepress-theme-vdoing -D\n  ```\n  </code-block>\n\n  <code-block title="NPM">\n  ```bash\n  npm install vuepress-theme-vdoing -D\n  ```\n  </code-block>\n</code-group>\n\n\n效果：\n\nyarn add vuepress-theme-vdoing -D\n\n\nnpm install vuepress-theme-vdoing -D\n\n\n注意\n\n * 请在<code-group>标签与markdown内容之间使用空行隔开，否则可能会解析不出来。\n * 该组件只适用于放置代码块，放其他内容在体验上并不友好。如您确实需要放置其他内容的选项卡，推荐使用vuepress-plugin-tabs插件。',normalizedContent:'主题的内置组件可以直接在markdown文件中以类似html标签的方式使用。\n\n\n# 标记\n\n * props:\n   \n   * text- string\n   * type - string, 可选值： tip | warning | error，默认： tip\n   * vertical - string, 可选值： top | middle，默认： top\n\n * usage:\n\n你可以在标题或其他内容中使用标记：\n\n#### 《沁园春·雪》 <badge text="摘"/>\n北国风光<badge text="注释" type="warning"/>，千里冰封，万里雪飘。\n\n> <badge text="译文" type="error" vertical="middle"/>: 北方的风光。\n\n\n效果：\n\n# 《沁园春·雪》\n\n北国风光，千里冰封，万里雪飘。\n\n> : 北方的风光。\n\n\n# 代码块选项卡\n\n在<code-group>中嵌套<code-block>来配合使用。在<code-block>标签添加title来指定tab标题，active指定当前tab：\n\n<code-group>\n  <code-block title="yarn" active>\n  ```bash\n  yarn add vuepress-theme-vdoing -d\n  ```\n  </code-block>\n\n  <code-block title="npm">\n  ```bash\n  npm install vuepress-theme-vdoing -d\n  ```\n  </code-block>\n</code-group>\n\n\n效果：\n\nyarn add vuepress-theme-vdoing -d\n\n\nnpm install vuepress-theme-vdoing -d\n\n\n注意\n\n * 请在<code-group>标签与markdown内容之间使用空行隔开，否则可能会解析不出来。\n * 该组件只适用于放置代码块，放其他内容在体验上并不友好。如您确实需要放置其他内容的选项卡，推荐使用vuepress-plugin-tabs插件。',charsets:{cjk:!0}},{title:"09.主题初衷与诞生 copy",frontmatter:{title:"09.主题初衷与诞生 copy",date:"2020-05-11T13:59:38.000Z",article:!1,permalink:"/pages/2721d5/"},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/09.%E4%B8%BB%E9%A2%98%E5%88%9D%E8%A1%B7%E4%B8%8E%E8%AF%9E%E7%94%9F%20copy%202.html",relativePath:"01.test1/01.指南/09.主题初衷与诞生 copy 2.md",key:"v-4bf5cda8",path:"/pages/2721d5/",headers:[{level:2,title:"Markdown",slug:"markdown",normalizedTitle:"markdown",charIndex:109},{level:2,title:"知识管理",slug:"知识管理",normalizedTitle:"知识管理",charIndex:22},{level:2,title:"VuePress",slug:"vuepress",normalizedTitle:"vuepress",charIndex:294},{level:2,title:"知识管理&博客主题-Vdoing的诞生",slug:"知识管理-博客主题-vdoing的诞生",normalizedTitle:"知识管理&amp;博客主题-vdoing的诞生",charIndex:null},{level:3,title:"主题名称",slug:"主题名称",normalizedTitle:"主题名称",charIndex:1058}],headersStr:"Markdown 知识管理 VuePress 知识管理&博客主题-Vdoing的诞生 主题名称",content:"这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# Markdown\n\n最初接触Markdown的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用txt记录笔记、云笔记、Markdown笔记，并把Markdown文件上传到github进行管理，但总感觉还是不够方便...直到我发现了VuePress，它似乎可以管理我的学习笔记，并且把站点部署到github pages不就是一个在线的云笔记网站了吗\n\n\n# VuePress\n\nVuePress是一个 Vue 驱动的静态网站生成器，正是以Markdown为中心的项目结构，它简洁至上的理念正合我心。对于我这个对Vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-Vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nVuePress的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足15秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nVdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》B站传送 youtube传送，里面有讲到vue起名的故事，一开始想起的名其实是Seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用Vdoing好了...",normalizedContent:"这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# markdown\n\n最初接触markdown的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用txt记录笔记、云笔记、markdown笔记，并把markdown文件上传到github进行管理，但总感觉还是不够方便...直到我发现了vuepress，它似乎可以管理我的学习笔记，并且把站点部署到github pages不就是一个在线的云笔记网站了吗\n\n\n# vuepress\n\nvuepress是一个 vue 驱动的静态网站生成器，正是以markdown为中心的项目结构，它简洁至上的理念正合我心。对于我这个对vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nvuepress的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足15秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nvdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》b站传送 youtube传送，里面有讲到vue起名的故事，一开始想起的名其实是seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用vdoing好了...",charsets:{cjk:!0}},{title:"10.主题初衷与诞生 copy",frontmatter:{title:"10.主题初衷与诞生 copy",date:"2020-05-11T13:59:38.000Z",article:!1,permalink:"/pages/e19315/"},regularPath:"/01.test1/01.%E6%8C%87%E5%8D%97/10.%E4%B8%BB%E9%A2%98%E5%88%9D%E8%A1%B7%E4%B8%8E%E8%AF%9E%E7%94%9F%20copy.html",relativePath:"01.test1/01.指南/10.主题初衷与诞生 copy.md",key:"v-fbcc3296",path:"/pages/e19315/",headers:[{level:2,title:"Markdown",slug:"markdown",normalizedTitle:"markdown",charIndex:109},{level:2,title:"知识管理",slug:"知识管理",normalizedTitle:"知识管理",charIndex:22},{level:2,title:"VuePress",slug:"vuepress",normalizedTitle:"vuepress",charIndex:294},{level:2,title:"知识管理&博客主题-Vdoing的诞生",slug:"知识管理-博客主题-vdoing的诞生",normalizedTitle:"知识管理&amp;博客主题-vdoing的诞生",charIndex:null},{level:3,title:"主题名称",slug:"主题名称",normalizedTitle:"主题名称",charIndex:1058}],headersStr:"Markdown 知识管理 VuePress 知识管理&博客主题-Vdoing的诞生 主题名称",content:"这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# Markdown\n\n最初接触Markdown的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用txt记录笔记、云笔记、Markdown笔记，并把Markdown文件上传到github进行管理，但总感觉还是不够方便...直到我发现了VuePress，它似乎可以管理我的学习笔记，并且把站点部署到github pages不就是一个在线的云笔记网站了吗\n\n\n# VuePress\n\nVuePress是一个 Vue 驱动的静态网站生成器，正是以Markdown为中心的项目结构，它简洁至上的理念正合我心。对于我这个对Vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-Vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nVuePress的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足15秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nVdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》B站传送 youtube传送，里面有讲到vue起名的故事，一开始想起的名其实是Seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用Vdoing好了...",normalizedContent:"这个主题的初衷是打造一个好用的、面向程序员的知识管理工具。\n\n对于程序员来说，繁杂的知识体系难免会有遗忘的地方。如果有一个方便好用的知识管理工具，可以帮助我们很好的管理知识，并能够快速地把遗忘的知识点找回来。\n\n\n# markdown\n\n最初接触markdown的时候，我就被它简洁的语法干净的文本结构吸引住，它的代码块和兼容html标签的能力更是让我爱上它，很高兴找到了一个高效记录学习笔记的工具。\n\n\n# 知识管理\n\n在一段学习的日子里，我尝试过用txt记录笔记、云笔记、markdown笔记，并把markdown文件上传到github进行管理，但总感觉还是不够方便...直到我发现了vuepress，它似乎可以管理我的学习笔记，并且把站点部署到github pages不就是一个在线的云笔记网站了吗\n\n\n# vuepress\n\nvuepress是一个 vue 驱动的静态网站生成器，正是以markdown为中心的项目结构，它简洁至上的理念正合我心。对于我这个对vue还算有一些了解的前端，迫不及待的想去使用它来搭建一个我的云笔记网站。\n\n\n# 知识管理&博客主题-vdoing的诞生\n\n我以前的一个领导和我们说过一个好的知识管理可以帮助我们提高开发质量和开发效率，下面这张图就是他想传达的，我表示赞同：\n\n什么是一个好用的知识管理工具呢？其实我也在不断的寻找和思考中。不过我觉得它至少要结构清晰、管理方便，在查找知识点的过程中可以快速的找到，正像上图所说的要在15秒内找到一个知识点，在添加内容的时候可以很方便的添加，并且保证结构清晰。\n\nvuepress的官方默认主题是专门为写文档而生的，和我心目中的知识库有一些差距，比如在满足结构清晰这点上，每添加一个内容就得手动的添加侧边栏数据，还有在满足15秒内找到一个知识点上还是不够好，因此我觉得需要做一些改造。\n\n在知识管理方面，有三种典型的知识形态：\n\n>  * 结构化：看重知识的条理性和实用性，有一定专业背景才能看懂\n>  * 碎片化：描述具体的知识点，通俗易懂\n>  * 体系化：对某一领域的完整解读，通常是某类知识的专业之作\n\n从这三种知识形态出发，我给主题添加了自动生成结构化侧边栏、目录页、面包屑等等。在满足了结构化之后，写博客应该算得上是一种碎片化的形态，我就给主题添加了分类、标签、归档等等。在满足更方便添加内容上，有了自动生成front matter、批量操作front matter等，更多关于主题的知识从开始使用它去探索吧~~\n\n\n# 主题名称\n\nvdoing，中文大概是维度的意思。起这个名的原因，首先是我看过一个视频《尤雨溪创立vue的心路历程》b站传送 youtube传送，里面有讲到vue起名的故事，一开始想起的名其实是seed.js，但是在npm上被占用了，然后发现vue是一个挺酷的一个词，才决定用vue。发现大佬起名可以这么酷。再者，这个主题我想它可以多维度的快速寻找一个知识点，要么就叫维度吧，那英文名就用vdoing好了...",charsets:{cjk:!0}},{title:"使目录栏支持h2~h6标题",frontmatter:{title:"使目录栏支持h2~h6标题",date:"2022-03-18T15:02:52.000Z",permalink:"/pages/8dfab5/",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/03.%E4%BD%BF%E7%9B%AE%E5%BD%95%E6%A0%8F%E6%94%AF%E6%8C%81h2~h6%E6%A0%87%E9%A2%98.html",relativePath:"01.test1/02.相关文章/03.使目录栏支持h2~h6标题.md",key:"v-72cb89d6",path:"/pages/8dfab5/",headers:[{level:2,title:"markdown.extractHeaders",slug:"markdown-extractheaders",normalizedTitle:"markdown.extractheaders",charIndex:70}],headersStr:"markdown.extractHeaders",content:"在.vuepress/config.js添加如下配置即可使 VuePress 提取相应标题级别的数据，并应用到主题的右侧目录栏中。\n\n\n# markdown.extractHeaders\n\n * 类型: Array\n * 默认: ['h2', 'h3']\n\nMarkdown 文件的 headers (标题 & 小标题) 会在准备阶段被提取出来，并存储在 this.$page.headers 中。默认情况下，VuePress 会提取 h2 和 h3 标题。你可以通过这个选项来修改提取出的标题级别。\n\nmodule.exports = {\n  markdown: {\n    extractHeaders: [ 'h2', 'h3', 'h4', 'h5', 'h6' ]\n  }\n}\n\n\n注：此配置来自 VuePress官方文档",normalizedContent:"在.vuepress/config.js添加如下配置即可使 vuepress 提取相应标题级别的数据，并应用到主题的右侧目录栏中。\n\n\n# markdown.extractheaders\n\n * 类型: array\n * 默认: ['h2', 'h3']\n\nmarkdown 文件的 headers (标题 & 小标题) 会在准备阶段被提取出来，并存储在 this.$page.headers 中。默认情况下，vuepress 会提取 h2 和 h3 标题。你可以通过这个选项来修改提取出的标题级别。\n\nmodule.exports = {\n  markdown: {\n    extractheaders: [ 'h2', 'h3', 'h4', 'h5', 'h6' ]\n  }\n}\n\n\n注：此配置来自 vuepress官方文档",charsets:{cjk:!0}},{title:"如何让你的笔记更有表现力",frontmatter:{title:"如何让你的笔记更有表现力",date:"2020-09-26T21:13:59.000Z",permalink:"/pages/dd027d/",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/06.%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%AC%94%E8%AE%B0%E6%9B%B4%E6%9C%89%E8%A1%A8%E7%8E%B0%E5%8A%9B.html",relativePath:"01.test1/02.相关文章/06.如何让你的笔记更有表现力.md",key:"v-7c1935d0",path:"/pages/dd027d/",headers:[{level:2,title:"1. 文本高亮",slug:"_1-文本高亮",normalizedTitle:"1. 文本高亮",charIndex:126},{level:2,title:"2. 标记",slug:"_2-标记",normalizedTitle:"2. 标记",charIndex:233},{level:3,title:"内置标记",slug:"内置标记",normalizedTitle:"内置标记",charIndex:243},{level:3,title:"外部标记",slug:"外部标记",normalizedTitle:"外部标记",charIndex:348},{level:2,title:"3. 折叠列表",slug:"_3-折叠列表",normalizedTitle:"3. 折叠列表",charIndex:546},{level:2,title:"4. 思维导图 & 流程图",slug:"_4-思维导图-流程图",normalizedTitle:"4. 思维导图 &amp; 流程图",charIndex:null},{level:3,title:"方法一：",slug:"方法一",normalizedTitle:"方法一：",charIndex:721},{level:3,title:"方法二：",slug:"方法二",normalizedTitle:"方法二：",charIndex:972},{level:3,title:"方法三：",slug:"方法三",normalizedTitle:"方法三：",charIndex:1194},{level:2,title:"5.Demo演示框",slug:"_5-demo演示框",normalizedTitle:"5.demo演示框",charIndex:1272},{level:3,title:"方法一：",slug:"方法一-2",normalizedTitle:"方法一：",charIndex:721},{level:3,title:"方法二：",slug:"方法二-2",normalizedTitle:"方法二：",charIndex:972}],headersStr:"1. 文本高亮 2. 标记 内置标记 外部标记 3. 折叠列表 4. 思维导图 & 流程图 方法一： 方法二： 方法三： 5.Demo演示框 方法一： 方法二：",content:'你的知识笔记枯燥无味没有重点？基于本主题，配合各种骚操作，让你的知识笔记表现力爆棚~~\n\n笔记\n\nMarkdown的基本语法就不再重复啦 (对Markdown不了解的可以看 这里), 下面将介绍一些可以在本主题Markdown中使用的骚操作~\n\n\n# 1. 文本高亮\n\n使用<mark>标签让文本高亮\n\nVdoing是一款简洁高效的 &lt;mark>知识管理&amp;博客&lt;/mark> 主题\n\n\nVdoing是一款简洁高效的 知识管理&博客 主题\n\n\n# 2. 标记\n\n\n# 内置标记\n\n主题内置的Badge组件，直接在 Markdown 文件中使用\n\n<Badge text="beta" type="warning"/>\n<Badge text="Vdoing主题"/>\n\n\n\n# 外部标记\n\n使用 shields 生成标记，在Markdown中使用\n\n![npm](https://img.shields.io/npm/v/vuepress-theme-vdoing)\n![star](https://img.shields.io/github/stars/xugaoyi/vuepress-theme-vdoing)\n\n\n\n\n> 这类标记图标可以生成动态统计数据。\n\n\n# 3. 折叠列表\n\n主题内置的容器，直接在 Markdown 文件中使用\n\n::: details\n这是一个详情块\n```js\nconsole.log(\'这是一个详情块\')\n```\n:::\n\n\n点击查看\n\n这是一个详情块\n\nconsole.log(\'这是一个详情块\')\n\n\n> 更多：Markdown 容器\n\n\n# 4. 思维导图 & 流程图\n\n\n# 方法一：\n\n 1. 使用Markmap生成思维导图html文件\n 2. 将html文件放在docs/.vuepress/public/markmap/\n 3. 通过<iframe>插入到Markdown\n\n  <iframe :src="$withBase(\'/markmap/01.html\')" width="100%" height="400" frameborder="0" scrolling="No" leftmargin="0" topmargin="0"></iframe>\n\n\n\n# 方法二：\n\n通过<iframe>标签引入processon或其他在线作图工具生成的链接。\n\n<iframe src="https://www.processon.com/view/link/5e718942e4b015182028682c" width="100%" height="500" frameborder="0" scrolling="No" leftmargin="0" topmargin="0"></iframe>\n\n\n\n# 方法三：\n\n使用流程图插件：\n\n * vuepress-plugin-flowchart\n * vuepress-plugin-mermaidjs\n\n\n# 5.Demo演示框\n\n\n# 方法一：\n\n 1. 安装 vuepress-plugin-demo-block或其他同类插件，使用方法看插件文档\n 2. 在.vuepress/config.js配置插件\n 3. Markdown中使用\n\n> 同类插件：vuepress-plugin-demo-container\n\n<html>\n  <div class="animationBox">\n    <div class="rotate">旋转动画1</div>\n    <div class="play">\n      <div class="img">旋转动画2</div>\n      <span><p class="p2"></p></span>\n      <span><p></p></span>\n      <span><p></p></span>\n      <span><p class="p2"></p></span>\n    </div>\n    <div class="elasticity">弹性动画</div>\n    <div class="elasticity2">曲线弹性</div>\n  </div>\n</html>\n\n<style>\n  .animationBox{overflow: hidden;}\n  .animationBox>div{\n    width: 100px;height: 100px;background: #eee;border-radius: 50%;text-align: center;line-height: 100px;margin: 30px;float:left;\n  }\n  .rotate{\n    animation: rotate 5s linear infinite\n  }\n  .rotate:hover{ animation-play-state: paused}\n  @keyframes rotate {\n    0%{transform: rotate(0);}\n  100%{transform: rotate(360deg);}\n  }\n  .animationBox>.play {\n    position: relative;\n    margin: 50px 30px;\n    background:none;\n  }\n  .play .img{\n    position: absolute;\n    top: 0;\n    left:0;\n    z-index: 1;\n    width: 100px;height: 100px; background: #eee;\n    border-radius: 50%;\n\n    animation: rotate 5s linear infinite\n  }\n  .play span {\n    position: absolute;\n    top: 1px;\n    left:1px;\n    z-index: 0;\n    display: block;\n    width: 96px;\n    height: 96px;\n    border: 1px solid #999;\n    border-radius: 50%;\n  }\n  .play span p{display: block;width: 4px;height: 4px;background: #000;margin: -2px 0 0 50%;border-radius: 50%;opacity: 0.5;}\n  .play span .p2{margin: 50% 0 0 -2px;}\n  .play span{\n    animation: wave 5s linear infinite\n  }\n  .play>span:nth-child(3){\n    /* 延迟时间 */\n    animation-delay:1s;\n  }\n  .play>span:nth-child(4){\n    animation-delay:2.2s;\n  }\n  .play>span:nth-child(5){\n    animation-delay:3.8s;\n  }\n\n  @keyframes wave {\n    0%\n    {\n      transform:scale(1) rotate(360deg);\n      opacity: 0.8;\n    }\n  100%\n    {\n      transform:scale(1.8) rotate(0deg);\n      opacity: 0;\n    }\n  }\n\n\n  .elasticity{\n    animation: elasticity 1s linear 2s infinite\n  }\n\n  @keyframes elasticity{\n    0%{\n      transform: scale(0);\n    }\n    60%{\n      transform: scale(1.1);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n\n  .elasticity2{\n    animation: elasticity2 1s cubic-bezier(.39,.62,.74,1.39) 2s infinite\n  }\n  @keyframes elasticity2{\n    0%{\n      transform: scale(0);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n</style>\n\n\n\n\n\n# 方法二：\n\n嵌入codepen\n\n<iframe height="400" style="width: 100%;" scrolling="no" title="【CSS：行为】使用:hover和attr()定制悬浮提示" src="https://codepen.io/xugaoyi/embed/vYNKNaq?height=400&theme-id=light&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" loading="lazy">\n  See the Pen <a href=\'https://codepen.io/xugaoyi/pen/vYNKNaq\'>【CSS：行为】使用:hover和attr()定制悬浮提示</a> by xugaoyi\n  (<a href=\'https://codepen.io/xugaoyi\'>@xugaoyi</a>) on <a href=\'https://codepen.io\'>CodePen</a>.\n</iframe>\n\n\nSee the Pen 【CSS：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on CodePen.\n\n笔记\n\n<iframe>标签还可以嵌入其他任何外部网页，如视频、地图等',normalizedContent:'你的知识笔记枯燥无味没有重点？基于本主题，配合各种骚操作，让你的知识笔记表现力爆棚~~\n\n笔记\n\nmarkdown的基本语法就不再重复啦 (对markdown不了解的可以看 这里), 下面将介绍一些可以在本主题markdown中使用的骚操作~\n\n\n# 1. 文本高亮\n\n使用<mark>标签让文本高亮\n\nvdoing是一款简洁高效的 &lt;mark>知识管理&amp;博客&lt;/mark> 主题\n\n\nvdoing是一款简洁高效的 知识管理&博客 主题\n\n\n# 2. 标记\n\n\n# 内置标记\n\n主题内置的badge组件，直接在 markdown 文件中使用\n\n<badge text="beta" type="warning"/>\n<badge text="vdoing主题"/>\n\n\n\n# 外部标记\n\n使用 shields 生成标记，在markdown中使用\n\n![npm](https://img.shields.io/npm/v/vuepress-theme-vdoing)\n![star](https://img.shields.io/github/stars/xugaoyi/vuepress-theme-vdoing)\n\n\n\n\n> 这类标记图标可以生成动态统计数据。\n\n\n# 3. 折叠列表\n\n主题内置的容器，直接在 markdown 文件中使用\n\n::: details\n这是一个详情块\n```js\nconsole.log(\'这是一个详情块\')\n```\n:::\n\n\n点击查看\n\n这是一个详情块\n\nconsole.log(\'这是一个详情块\')\n\n\n> 更多：markdown 容器\n\n\n# 4. 思维导图 & 流程图\n\n\n# 方法一：\n\n 1. 使用markmap生成思维导图html文件\n 2. 将html文件放在docs/.vuepress/public/markmap/\n 3. 通过<iframe>插入到markdown\n\n  <iframe :src="$withbase(\'/markmap/01.html\')" width="100%" height="400" frameborder="0" scrolling="no" leftmargin="0" topmargin="0"></iframe>\n\n\n\n# 方法二：\n\n通过<iframe>标签引入processon或其他在线作图工具生成的链接。\n\n<iframe src="https://www.processon.com/view/link/5e718942e4b015182028682c" width="100%" height="500" frameborder="0" scrolling="no" leftmargin="0" topmargin="0"></iframe>\n\n\n\n# 方法三：\n\n使用流程图插件：\n\n * vuepress-plugin-flowchart\n * vuepress-plugin-mermaidjs\n\n\n# 5.demo演示框\n\n\n# 方法一：\n\n 1. 安装 vuepress-plugin-demo-block或其他同类插件，使用方法看插件文档\n 2. 在.vuepress/config.js配置插件\n 3. markdown中使用\n\n> 同类插件：vuepress-plugin-demo-container\n\n<html>\n  <div class="animationbox">\n    <div class="rotate">旋转动画1</div>\n    <div class="play">\n      <div class="img">旋转动画2</div>\n      <span><p class="p2"></p></span>\n      <span><p></p></span>\n      <span><p></p></span>\n      <span><p class="p2"></p></span>\n    </div>\n    <div class="elasticity">弹性动画</div>\n    <div class="elasticity2">曲线弹性</div>\n  </div>\n</html>\n\n<style>\n  .animationbox{overflow: hidden;}\n  .animationbox>div{\n    width: 100px;height: 100px;background: #eee;border-radius: 50%;text-align: center;line-height: 100px;margin: 30px;float:left;\n  }\n  .rotate{\n    animation: rotate 5s linear infinite\n  }\n  .rotate:hover{ animation-play-state: paused}\n  @keyframes rotate {\n    0%{transform: rotate(0);}\n  100%{transform: rotate(360deg);}\n  }\n  .animationbox>.play {\n    position: relative;\n    margin: 50px 30px;\n    background:none;\n  }\n  .play .img{\n    position: absolute;\n    top: 0;\n    left:0;\n    z-index: 1;\n    width: 100px;height: 100px; background: #eee;\n    border-radius: 50%;\n\n    animation: rotate 5s linear infinite\n  }\n  .play span {\n    position: absolute;\n    top: 1px;\n    left:1px;\n    z-index: 0;\n    display: block;\n    width: 96px;\n    height: 96px;\n    border: 1px solid #999;\n    border-radius: 50%;\n  }\n  .play span p{display: block;width: 4px;height: 4px;background: #000;margin: -2px 0 0 50%;border-radius: 50%;opacity: 0.5;}\n  .play span .p2{margin: 50% 0 0 -2px;}\n  .play span{\n    animation: wave 5s linear infinite\n  }\n  .play>span:nth-child(3){\n    /* 延迟时间 */\n    animation-delay:1s;\n  }\n  .play>span:nth-child(4){\n    animation-delay:2.2s;\n  }\n  .play>span:nth-child(5){\n    animation-delay:3.8s;\n  }\n\n  @keyframes wave {\n    0%\n    {\n      transform:scale(1) rotate(360deg);\n      opacity: 0.8;\n    }\n  100%\n    {\n      transform:scale(1.8) rotate(0deg);\n      opacity: 0;\n    }\n  }\n\n\n  .elasticity{\n    animation: elasticity 1s linear 2s infinite\n  }\n\n  @keyframes elasticity{\n    0%{\n      transform: scale(0);\n    }\n    60%{\n      transform: scale(1.1);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n\n  .elasticity2{\n    animation: elasticity2 1s cubic-bezier(.39,.62,.74,1.39) 2s infinite\n  }\n  @keyframes elasticity2{\n    0%{\n      transform: scale(0);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n</style>\n\n\n\n\n\n# 方法二：\n\n嵌入codepen\n\n<iframe height="400" style="width: 100%;" scrolling="no" title="【css：行为】使用:hover和attr()定制悬浮提示" src="https://codepen.io/xugaoyi/embed/vynknaq?height=400&theme-id=light&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true" loading="lazy">\n  see the pen <a href=\'https://codepen.io/xugaoyi/pen/vynknaq\'>【css：行为】使用:hover和attr()定制悬浮提示</a> by xugaoyi\n  (<a href=\'https://codepen.io/xugaoyi\'>@xugaoyi</a>) on <a href=\'https://codepen.io\'>codepen</a>.\n</iframe>\n\n\nsee the pen 【css：行为】使用:hover和attr()定制悬浮提示 by xugaoyi (@xugaoyi) on codepen.\n\n笔记\n\n<iframe>标签还可以嵌入其他任何外部网页，如视频、地图等',charsets:{cjk:!0}},{title:"批量操作front matter工具",frontmatter:{title:"批量操作front matter工具",date:"2020-05-13T11:52:45.000Z",permalink:"/pages/2b8e22",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/07.%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9Cfront%20matter%E5%B7%A5%E5%85%B7.html",relativePath:"01.test1/02.相关文章/07.批量操作front matter工具.md",key:"v-a4d9b7fe",path:"/pages/2b8e22/",headersStr:null,content:'当你想为某个文件夹下的所有.md文件添加、修改、删除某些front matter字段时，这个工具可以快速的为你批量操作。\n\n首先，你需要在package.json的scripts中写入脚本：\n\n// package.json\n{\n  "scripts": {\n       "editFm": "node utils/editFrontmatter.js",\n   }\n}\n\n\n在utils/config.yml配置要批量操作的文件夹和要编辑的字段，示例：\n\n# utils/config.yml\n#批量添加和修改、删除front matter配置文件\n\n# 需要批量处理的路径，docs文件夹内的文件夹 (数组。映射路径：docs/arr[1]/arr[2] ... )\npath:\n  - docs # 第一个成员必须是docs\n  - 《JS教程》专辑\n  - 第一章节\n\n# 要删除的字段 (数组)\ndelete:  \n  - article\n\n # 要添加、修改front matter的数据 （front matter中没有的数据则添加，已有的数据则覆盖）\ndata:\n  author: 齐天大圣\n  sidebar: false\n\n\n比如你要操作的文件夹路径是docs/《JS教程》专辑/第一章节，你需要这样配置路径：\n\npath:\n  - docs # 第一个成员必须是docs\n  - 《JS教程》专辑\n  - 第一章节\n\n\npath数组的第一个成员必须是docs，如果你想操作docs底下除了首页之外所有的.md文件，只需保留第一个成员docs即可。\n\n你想删除article字段：\n\ndelete:  \n  - article\n\n\n你想为这个文件夹下的所有.md文件添加作者author和隐藏侧边栏sidebar：\n\ndata:\n  author: 齐天大圣\n  sidebar: false\n\n\n最后，执行npm run editFm命令，为了防止误操作，会有一个询问过程：\n\nnpm run editFm\n? 批量操作frontmatter有修改数据的风险，确定要继续吗？ (Y/n) \n...\n',normalizedContent:'当你想为某个文件夹下的所有.md文件添加、修改、删除某些front matter字段时，这个工具可以快速的为你批量操作。\n\n首先，你需要在package.json的scripts中写入脚本：\n\n// package.json\n{\n  "scripts": {\n       "editfm": "node utils/editfrontmatter.js",\n   }\n}\n\n\n在utils/config.yml配置要批量操作的文件夹和要编辑的字段，示例：\n\n# utils/config.yml\n#批量添加和修改、删除front matter配置文件\n\n# 需要批量处理的路径，docs文件夹内的文件夹 (数组。映射路径：docs/arr[1]/arr[2] ... )\npath:\n  - docs # 第一个成员必须是docs\n  - 《js教程》专辑\n  - 第一章节\n\n# 要删除的字段 (数组)\ndelete:  \n  - article\n\n # 要添加、修改front matter的数据 （front matter中没有的数据则添加，已有的数据则覆盖）\ndata:\n  author: 齐天大圣\n  sidebar: false\n\n\n比如你要操作的文件夹路径是docs/《js教程》专辑/第一章节，你需要这样配置路径：\n\npath:\n  - docs # 第一个成员必须是docs\n  - 《js教程》专辑\n  - 第一章节\n\n\npath数组的第一个成员必须是docs，如果你想操作docs底下除了首页之外所有的.md文件，只需保留第一个成员docs即可。\n\n你想删除article字段：\n\ndelete:  \n  - article\n\n\n你想为这个文件夹下的所有.md文件添加作者author和隐藏侧边栏sidebar：\n\ndata:\n  author: 齐天大圣\n  sidebar: false\n\n\n最后，执行npm run editfm命令，为了防止误操作，会有一个询问过程：\n\nnpm run editfm\n? 批量操作frontmatter有修改数据的风险，确定要继续吗？ (y/n) \n...\n',charsets:{cjk:!0}},{title:"部署",frontmatter:{title:"部署",date:"2020-05-13T12:10:53.000Z",permalink:"/pages/0fc1d2",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/08.%E9%83%A8%E7%BD%B2.html",relativePath:"01.test1/02.相关文章/08.部署.md",key:"v-345ac108",path:"/pages/0fc1d2/",headers:[{level:2,title:"1.使用deploy.sh脚本部署",slug:"_1-使用deploy-sh脚本部署",normalizedTitle:"1.使用deploy.sh脚本部署",charIndex:122},{level:2,title:"2. 使用GitHub Action自动持续集成",slug:"_2-使用github-action自动持续集成",normalizedTitle:"2. 使用github action自动持续集成",charIndex:576},{level:2,title:"部署升级：同时部署到github和coding",slug:"部署升级-同时部署到github和coding",normalizedTitle:"部署升级：同时部署到github和coding",charIndex:909},{level:3,title:"部署方式有两种：",slug:"部署方式有两种",normalizedTitle:"部署方式有两种：",charIndex:1082},{level:4,title:"1) 、使用如下命令一键部署到github和coding",slug:"_1-、使用如下命令一键部署到github和coding",normalizedTitle:"1) 、使用如下命令一键部署到github和coding",charIndex:1094},{level:4,title:"2）、使用GitHub Action自动部署到github和coding",slug:"_2-、使用github-action自动部署到github和coding",normalizedTitle:"2）、使用github action自动部署到github和coding",charIndex:1143}],headersStr:"1.使用deploy.sh脚本部署 2. 使用GitHub Action自动持续集成 部署升级：同时部署到github和coding 部署方式有两种： 1) 、使用如下命令一键部署到github和coding 2）、使用GitHub Action自动部署到github和coding",content:"注意\n\n目前作者使用的部署方式已改为 vercel，部署方法参考 这里。（2022.01.01）\n更多 部署方式\n\n本项目内置了两种自动部署脚本，用于一键部署到 GitHub Pages 或 国内访问速度更快的Coding Pages\n\n\n# 1.使用deploy.sh脚本部署\n\n第一步，修改deploy.sh脚本内的仓库地址为你的仓库，如有自定义域名则一并修改，没有则注释\n\n# 如果是发布到自定义域名\necho 'xugaoyi.com' > CNAME\n\n# 如果发布到 https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# 如果发布到 https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\n\n第二步，一键部署命令\n\nnpm run deploy\n\n\n> windows系统下使用bash命令窗\n\n第三步，设置仓库的GitHub Pages。\n\n> deploy.sh文件看 这里 看不懂shell代码？ 参考：shell教程\n\n\n# 2. 使用GitHub Action自动持续集成\n\n第一步，按照官方文档，生成一个github token (令牌)。\n\n第二步，将这个密钥储存到当前仓库的Settings/Secrets里面。\n\n> Settings/Secrets是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是ACCESS_TOKEN。如果你不用这个名字，.github/workflows/ci.yml脚本里的变量名也要跟着改。\n\n第三步，push提交代码到GitHub仓库master分支。\n\n第四步，设置仓库的GitHub Pages\n\n> 参考 GitHub Action实现自动部署静态博客 ci.yml文件看 这里 看不懂yaml代码？ 参考：yaml教程\n\n\n# 部署升级：同时部署到github和coding\n\n为了让博客站能够让百度收录，因此我把博客部署到了coding。相关文章。\n\n在原有部署方式上做了升级，主要修改代码文件有下面这两个：\n\n使用前先将github token (令牌) 和coding token (令牌) 同时设置到github仓库的Settings/Secrets位置。\n\n\n# 部署方式有两种：\n\n# 1) 、使用如下命令一键部署到github和coding\n\nnpm run deploy\n\n\n# 2）、使用GitHub Action自动部署到github和coding\n\n只需要push提交代码到github仓库master分支即可。\n\n> 参考 《GitHub Action实现自动部署静态博客》",normalizedContent:"注意\n\n目前作者使用的部署方式已改为 vercel，部署方法参考 这里。（2022.01.01）\n更多 部署方式\n\n本项目内置了两种自动部署脚本，用于一键部署到 github pages 或 国内访问速度更快的coding pages\n\n\n# 1.使用deploy.sh脚本部署\n\n第一步，修改deploy.sh脚本内的仓库地址为你的仓库，如有自定义域名则一并修改，没有则注释\n\n# 如果是发布到自定义域名\necho 'xugaoyi.com' > cname\n\n# 如果发布到 https://<username>.github.io\n# git push -f git@github.com:<username>/<username>.github.io.git master\n\n# 如果发布到 https://<username>.github.io/<repo>\n# git push -f git@github.com:<username>/<repo>.git master:gh-pages\n\n\n第二步，一键部署命令\n\nnpm run deploy\n\n\n> windows系统下使用bash命令窗\n\n第三步，设置仓库的github pages。\n\n> deploy.sh文件看 这里 看不懂shell代码？ 参考：shell教程\n\n\n# 2. 使用github action自动持续集成\n\n第一步，按照官方文档，生成一个github token (令牌)。\n\n第二步，将这个密钥储存到当前仓库的settings/secrets里面。\n\n> settings/secrets是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是access_token。如果你不用这个名字，.github/workflows/ci.yml脚本里的变量名也要跟着改。\n\n第三步，push提交代码到github仓库master分支。\n\n第四步，设置仓库的github pages\n\n> 参考 github action实现自动部署静态博客 ci.yml文件看 这里 看不懂yaml代码？ 参考：yaml教程\n\n\n# 部署升级：同时部署到github和coding\n\n为了让博客站能够让百度收录，因此我把博客部署到了coding。相关文章。\n\n在原有部署方式上做了升级，主要修改代码文件有下面这两个：\n\n使用前先将github token (令牌) 和coding token (令牌) 同时设置到github仓库的settings/secrets位置。\n\n\n# 部署方式有两种：\n\n# 1) 、使用如下命令一键部署到github和coding\n\nnpm run deploy\n\n\n# 2）、使用github action自动部署到github和coding\n\n只需要push提交代码到github仓库master分支即可。\n\n> 参考 《github action实现自动部署静态博客》",charsets:{cjk:!0}},{title:"关于写文章和一级标题",frontmatter:{title:"关于写文章和一级标题",date:"2020-05-13T12:07:32.000Z",permalink:"/pages/9ae0bd",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/09.%E5%85%B3%E4%BA%8E%E5%86%99%E6%96%87%E7%AB%A0%E5%92%8C%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98.html",relativePath:"01.test1/02.相关文章/09.关于写文章和一级标题.md",key:"v-40161696",path:"/pages/9ae0bd/",excerpt:'<p>写文章时，大概的流程是这样的：</p>\n<p>1.首先是创建<code>.md</code>文件，如果在结构化目录下则<strong>需要</strong>添加相应的序号，在碎片化博文目录<code>_posts</code>下<strong>不需要</strong>添加序号，文件名填写文章的标题。</p>\n<p>2.如果你想手动指定文章的分类、标签，则需要在头部front matter填写相应的字段。一般情况下不需要再填写其他字段。不想手动指定分类和标签也可以省略这一步。</p>\n\x3c!--beforebegin--\x3e<div class="language-yaml extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-yaml"><code><span class="token punctuation">---</span>\n<span class="token key atrule">categories</span><span class="token punctuation">:</span> \n  <span class="token punctuation">-</span> 分类1\n<span class="token key atrule">tags</span><span class="token punctuation">:</span> \n  <span class="token punctuation">-</span> 标签1\n  <span class="token punctuation">-</span> 标签2\n<span class="token punctuation">---</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>3.<strong>关于一级标题</strong>，即markdown中的一级标题(<code># 标题</code>)，你可以写也可以不写，在页面中实际显示的文章标题是取自front matter中的<code>title</code>，然后把<code>.md</code>中的一级标题隐藏了。</p>\n<blockquote>\n<p>这样做即可以保留本地文件的一级标题，也可以兼容线上页面的标题。\n同时，对于在新建<code>.md</code>文件时已经输入了一次标题在文件名，不想在文档中重复输入一次标题的，也是可以实现的。</p>\n</blockquote>\n<p>4.<strong>关于文章摘要</strong>，你想在首先文章列表中显示摘要时可以在合适的位置添加一个`</p>\n',headersStr:null,content:"写文章时，大概的流程是这样的：\n\n1.首先是创建.md文件，如果在结构化目录下则需要添加相应的序号，在碎片化博文目录_posts下不需要添加序号，文件名填写文章的标题。\n\n2.如果你想手动指定文章的分类、标签，则需要在头部front matter填写相应的字段。一般情况下不需要再填写其他字段。不想手动指定分类和标签也可以省略这一步。\n\n---\ncategories: \n  - 分类1\ntags: \n  - 标签1\n  - 标签2\n---\n\n\n3.关于一级标题，即markdown中的一级标题(# 标题)，你可以写也可以不写，在页面中实际显示的文章标题是取自front matter中的title，然后把.md中的一级标题隐藏了。\n\n> 这样做即可以保留本地文件的一级标题，也可以兼容线上页面的标题。 同时，对于在新建.md文件时已经输入了一次标题在文件名，不想在文档中重复输入一次标题的，也是可以实现的。\n\n4.关于文章摘要，你想在首先文章列表中显示摘要时可以在合适的位置添加一个\x3c!-- more --\x3e注释，参考：添加摘要\n\n5.最后，就可以正式开始写作啦。",normalizedContent:"写文章时，大概的流程是这样的：\n\n1.首先是创建.md文件，如果在结构化目录下则需要添加相应的序号，在碎片化博文目录_posts下不需要添加序号，文件名填写文章的标题。\n\n2.如果你想手动指定文章的分类、标签，则需要在头部front matter填写相应的字段。一般情况下不需要再填写其他字段。不想手动指定分类和标签也可以省略这一步。\n\n---\ncategories: \n  - 分类1\ntags: \n  - 标签1\n  - 标签2\n---\n\n\n3.关于一级标题，即markdown中的一级标题(# 标题)，你可以写也可以不写，在页面中实际显示的文章标题是取自front matter中的title，然后把.md中的一级标题隐藏了。\n\n> 这样做即可以保留本地文件的一级标题，也可以兼容线上页面的标题。 同时，对于在新建.md文件时已经输入了一次标题在文件名，不想在文档中重复输入一次标题的，也是可以实现的。\n\n4.关于文章摘要，你想在首先文章列表中显示摘要时可以在合适的位置添加一个\x3c!-- more --\x3e注释，参考：添加摘要\n\n5.最后，就可以正式开始写作啦。",charsets:{cjk:!0}},{title:"关于博客搭建与管理",frontmatter:{title:"关于博客搭建与管理",date:"2020-05-13T12:12:33.000Z",permalink:"/pages/26997d",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/10.%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86.html",relativePath:"01.test1/02.相关文章/10.关于博客搭建与管理.md",key:"v-77427173",path:"/pages/26997d/",headersStr:null,content:"这里是我在搭建和管理博客过程中写的一些文章和小技巧。\n\n 1. 评论模块的搭建\n    \n    使用Gitalk实现静态博客无后台评论系统\n\n 2. 自定义域名及解析，详情\n\n 3. SEO相关\n    \n    // config.js\n    module.exports = {\n        description: '填写网站描述', // 以 <meta> 标签渲染到页面html中\n        head: [ // 注入到页面<head> 中的标签,[tagName, { attrName: attrValue }]\n            ['meta', { name: 'keywords', content: '填写关键字'}]\n        ]\n    }\n    \n\n 4. 图床\n    \n    GitHub + jsDelivr + TinyPNG+ PicGo 打造稳定快速、高效免费图床\n\n 5. 结合GitHub Actions开发的每天定时百度推送，加快收录\n    \n    GitHub Actions 定时运行代码：每天定时百度链接推送",normalizedContent:"这里是我在搭建和管理博客过程中写的一些文章和小技巧。\n\n 1. 评论模块的搭建\n    \n    使用gitalk实现静态博客无后台评论系统\n\n 2. 自定义域名及解析，详情\n\n 3. seo相关\n    \n    // config.js\n    module.exports = {\n        description: '填写网站描述', // 以 <meta> 标签渲染到页面html中\n        head: [ // 注入到页面<head> 中的标签,[tagname, { attrname: attrvalue }]\n            ['meta', { name: 'keywords', content: '填写关键字'}]\n        ]\n    }\n    \n\n 4. 图床\n    \n    github + jsdelivr + tinypng+ picgo 打造稳定快速、高效免费图床\n\n 5. 结合github actions开发的每天定时百度推送，加快收录\n    \n    github actions 定时运行代码：每天定时百度链接推送",charsets:{cjk:!0}},{title:"在线编辑和新增文章的方法",frontmatter:{title:"在线编辑和新增文章的方法",date:"2020-05-19T11:17:58.000Z",permalink:"/pages/c5a54d",article:!1},regularPath:"/01.test1/02.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/11.%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E5%92%8C%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E7%9A%84%E6%96%B9%E6%B3%95.html",relativePath:"01.test1/02.相关文章/11.在线编辑和新增文章的方法.md",key:"v-25ca8934",path:"/pages/c5a54d/",headers:[{level:3,title:"在线编辑原有的文章",slug:"在线编辑原有的文章",normalizedTitle:"在线编辑原有的文章",charIndex:61},{level:3,title:"在线新增文章",slug:"在线新增文章",normalizedTitle:"在线新增文章",charIndex:422}],headersStr:"在线编辑原有的文章 在线新增文章",content:"说明\n\n以下方法实现的前提是把博客源码上传到github仓库，并配置好 GitHub Actions 自动部署。\n\n\n# 在线编辑原有的文章\n\n首先，在config.js启用页面的编辑按钮，并配置好github仓库和.md文件所在根目录等，详见 官方文档。\n\n示例：\n\n// config.js\nmodule.exports = {\n  themeConfig: {\n    repo: 'xugaoyi/vuepress-theme-vdoing', // Github仓库地址\n    docsDir: 'docs', // .md文件放在了docs目录下\n    editLinks: true, // 启用编辑链接\n    editLinkText: '编辑',\n  }\n}\n\n\n配置好之后，每个文章页面底下都会有一个编辑按钮，点击即可跳到github在线编辑，编辑完成后提交就会自动触发GitHub Actions自动部署。\n\n\n# 在线新增文章\n\n在github博客源码仓库相应的文章目录下，新建.md文件，编辑好文章并提交后会触发GitHub Actions自动部署。\n\n> 提示：当使用过在线编辑或新增后，下次在本地编辑之前先拉取代码。",normalizedContent:"说明\n\n以下方法实现的前提是把博客源码上传到github仓库，并配置好 github actions 自动部署。\n\n\n# 在线编辑原有的文章\n\n首先，在config.js启用页面的编辑按钮，并配置好github仓库和.md文件所在根目录等，详见 官方文档。\n\n示例：\n\n// config.js\nmodule.exports = {\n  themeconfig: {\n    repo: 'xugaoyi/vuepress-theme-vdoing', // github仓库地址\n    docsdir: 'docs', // .md文件放在了docs目录下\n    editlinks: true, // 启用编辑链接\n    editlinktext: '编辑',\n  }\n}\n\n\n配置好之后，每个文章页面底下都会有一个编辑按钮，点击即可跳到github在线编辑，编辑完成后提交就会自动触发github actions自动部署。\n\n\n# 在线新增文章\n\n在github博客源码仓库相应的文章目录下，新建.md文件，编辑好文章并提交后会触发github actions自动部署。\n\n> 提示：当使用过在线编辑或新增后，下次在本地编辑之前先拉取代码。",charsets:{cjk:!0}},{title:"主题配置",frontmatter:{title:"主题配置",date:"2020-05-12T14:57:21.000Z",permalink:"/pages/a20ce8",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/01.%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html",relativePath:"02.test12/01.配置/01.主题配置.md",key:"v-37ac5f90",path:"/pages/a20ce8/",headers:[{level:2,title:"是否打开分类、标签、归档",slug:"是否打开分类、标签、归档",normalizedTitle:"是否打开分类、标签、归档",charIndex:107},{level:3,title:"category",slug:"category",normalizedTitle:"category",charIndex:124},{level:3,title:"tag",slug:"tag",normalizedTitle:"tag",charIndex:271},{level:3,title:"archive",slug:"archive",normalizedTitle:"archive",charIndex:413},{level:3,title:"使用分类页、标签页、归档页链接",slug:"使用分类页、标签页、归档页链接",normalizedTitle:"使用分类页、标签页、归档页链接",charIndex:560},{level:2,title:"碎片化文章默认分类值",slug:"碎片化文章默认分类值",normalizedTitle:"碎片化文章默认分类值",charIndex:682},{level:3,title:"categoryText",slug:"categorytext",normalizedTitle:"categorytext",charIndex:697},{level:2,title:"页面风格",slug:"页面风格",normalizedTitle:"页面风格",charIndex:768},{level:3,title:"pageStyle",slug:"pagestyle",normalizedTitle:"pagestyle",charIndex:777},{level:3,title:"defaultMode",slug:"defaultmode",normalizedTitle:"defaultmode",charIndex:932},{level:2,title:"body背景大图",slug:"body背景大图",normalizedTitle:"body背景大图",charIndex:1056},{level:3,title:"bodyBgImg",slug:"bodybgimg",normalizedTitle:"bodybgimg",charIndex:833},{level:3,title:"bodyBgImgOpacity",slug:"bodybgimgopacity",normalizedTitle:"bodybgimgopacity",charIndex:1190},{level:3,title:"bodyBgImgInterval",slug:"bodybgimginterval",normalizedTitle:"bodybgimginterval",charIndex:1162},{level:2,title:"文章标题前的图标",slug:"文章标题前的图标",normalizedTitle:"文章标题前的图标",charIndex:1335},{level:3,title:"titleBadge",slug:"titlebadge",normalizedTitle:"titlebadge",charIndex:1348},{level:3,title:"titleBadgeIcons",slug:"titlebadgeicons",normalizedTitle:"titlebadgeicons",charIndex:1401},{level:2,title:"文章内容块的背景底纹",slug:"文章内容块的背景底纹",normalizedTitle:"文章内容块的背景底纹",charIndex:1456},{level:3,title:"contentBgStyle",slug:"contentbgstyle",normalizedTitle:"contentbgstyle",charIndex:1471},{level:2,title:"侧边栏",slug:"侧边栏",normalizedTitle:"侧边栏",charIndex:1598},{level:3,title:"sidebar",slug:"sidebar",normalizedTitle:"sidebar",charIndex:1606},{level:3,title:"sidebarOpen",slug:"sidebaropen",normalizedTitle:"sidebaropen",charIndex:1860},{level:3,title:"对指定页面禁用侧边栏",slug:"对指定页面禁用侧边栏",normalizedTitle:"对指定页面禁用侧边栏",charIndex:1958},{level:3,title:"碎片化文章的侧边栏",slug:"碎片化文章的侧边栏",normalizedTitle:"碎片化文章的侧边栏",charIndex:2031},{level:2,title:"最近更新栏",slug:"最近更新栏",normalizedTitle:"最近更新栏",charIndex:2118},{level:3,title:"updateBar",slug:"updatebar",normalizedTitle:"updatebar",charIndex:2128},{level:3,title:"非文章页的设置",slug:"非文章页的设置",normalizedTitle:"非文章页的设置",charIndex:2316},{level:2,title:"右侧文章大纲栏",slug:"右侧文章大纲栏",normalizedTitle:"右侧文章大纲栏",charIndex:2471},{level:3,title:"rightMenuBar",slug:"rightmenubar",normalizedTitle:"rightmenubar",charIndex:2483},{level:2,title:"快捷翻页按钮",slug:"快捷翻页按钮",normalizedTitle:"快捷翻页按钮",charIndex:2611},{level:3,title:"pageButton",slug:"pagebutton",normalizedTitle:"pagebutton",charIndex:2622},{level:2,title:"文章作者信息",slug:"文章作者信息",normalizedTitle:"文章作者信息",charIndex:2703},{level:3,title:"author",slug:"author",normalizedTitle:"author",charIndex:2714},{level:3,title:"指定的文章作者信息",slug:"指定的文章作者信息",normalizedTitle:"指定的文章作者信息",charIndex:2834},{level:2,title:"博主信息",slug:"博主信息",normalizedTitle:"博主信息",charIndex:2971},{level:3,title:"blogger",slug:"blogger",normalizedTitle:"blogger",charIndex:2980},{level:2,title:"社交图标",slug:"社交图标",normalizedTitle:"社交图标",charIndex:3135},{level:3,title:"social",slug:"social",normalizedTitle:"social",charIndex:3144},{level:3,title:"主题内置的社交图标",slug:"主题内置的社交图标",normalizedTitle:"主题内置的社交图标",charIndex:3439},{level:2,title:"扩展自动生成front matter",slug:"扩展自动生成front-matter",normalizedTitle:"扩展自动生成front matter",charIndex:3700},{level:3,title:"extendFrontmatter",slug:"extendfrontmatter",normalizedTitle:"extendfrontmatter",charIndex:3723},{level:2,title:"页脚版权栏",slug:"页脚版权栏",normalizedTitle:"页脚版权栏",charIndex:4080},{level:3,title:"footer",slug:"footer",normalizedTitle:"footer",charIndex:4090},{level:2,title:"自定义html模块",slug:"自定义html模块",normalizedTitle:"自定义html模块",charIndex:4298},{level:3,title:"htmlModules",slug:"htmlmodules",normalizedTitle:"htmlmodules",charIndex:4325}],headersStr:"是否打开分类、标签、归档 category tag archive 使用分类页、标签页、归档页链接 碎片化文章默认分类值 categoryText 页面风格 pageStyle defaultMode body背景大图 bodyBgImg bodyBgImgOpacity bodyBgImgInterval 文章标题前的图标 titleBadge titleBadgeIcons 文章内容块的背景底纹 contentBgStyle 侧边栏 sidebar sidebarOpen 对指定页面禁用侧边栏 碎片化文章的侧边栏 最近更新栏 updateBar 非文章页的设置 右侧文章大纲栏 rightMenuBar 快捷翻页按钮 pageButton 文章作者信息 author 指定的文章作者信息 博主信息 blogger 社交图标 social 主题内置的社交图标 扩展自动生成front matter extendFrontmatter 页脚版权栏 footer 自定义html模块 htmlModules",content:"主题的配置在.vuepress/config.ts文件的themeConfig字段中，是在原有配置的基础上做的新增和修改，配置示例请查看：config.ts。\n\n更多官方配置，请查看vuepress文档。\n\n\n# 是否打开分类、标签、归档\n\n\n# category\n\n * 类型：boolean\n * 默认：true\n\n是否打开分类功能。 如打开，会做的事情有：\n\n 1. 自动生成的front matter包含分类字段\n 2. 页面中显示与分类相关的信息和模块\n 3. 自动生成分类页面（在@pages文件夹）\n\n如关闭，则反之。\n\n\n# tag\n\n * 类型：boolean\n * 默认：true\n\n是否打开标签功能。 如打开，会做的事情有：\n\n 1. 自动生成的front matter包含标签字段\n 2. 页面中显示与标签相关的信息和模块\n 3. 自动生成标签页面（在@pages文件夹）\n\n如关闭，则反之。\n\n\n# archive\n\n * 类型：boolean\n * 默认：true\n\n是否打开归档功能。 如打开，会做的事情有：\n\n 1. 自动生成归档页面（在@pages文件夹）\n\n如关闭，则反之。\n\n提示\n\n如果你仅仅是想使用这个主题来搭建知识库，并不想使用分类、标签、归档功能，就可以关闭它们。\n\n\n# 使用分类页、标签页、归档页链接\n\n当你打开了分类、标签、归档功能，就可以在导航或其他地方添加分类页、标签页、归档页的链接：\n\n * 分类页: /categories/\n * 标签页: /tags/\n * 归档页: /archives/\n\n\n# 碎片化文章默认分类值\n\n\n# categoryText\n\n * 类型：string\n * 默认：'随笔'\n\n碎片化文章（_posts文件夹的文章）默认生成的分类值\n\n\n# 页面风格\n\n\n# pageStyle\n\n * 类型：string\n * 可选值：'card' | 'line' （line在未设置bodyBgImg时才生效）\n * 默认：'card'\n\n页面风格，card时背景显示灰色衬托出卡片样式，line时背景显示纯色，并且部分模块带线条边框（未设置bodyBgImg时才生效）\n\n\n# defaultMode\n\n * 类型：string\n * 可选值：'auto' | 'light' | 'dark' | 'read'\n * 默认：'auto'\n\n默认外观模式，用户未在页面手动修改过模式时才生效，否则以用户设置的模式为准\n\n\n# body背景大图\n\n\n# bodyBgImg\n\n * 类型：string | array\n * 默认：undefined\n\nbody背景大图，单张图片使用String，多张图片使用Array， 多张图片时每隔 <bodyBgImgInterval> 秒换一张\n\n\n# bodyBgImgOpacity\n\n * 类型：number\n * 默认：0.5\n * 选值范围：0 ~ 1.0\n\nbody背景图透明度\n\n\n# bodyBgImgInterval\n\n * 类型：number\n * 默认：15\n * 单位：s\n\nbody有多张背景大图时的切换间隔\n\n\n# 文章标题前的图标\n\n\n# titleBadge\n\n * 类型：boolean\n * 默认：true\n\n是否打开文章标题图标\n\n\n# titleBadgeIcons\n\n * 类型：array\n * 默认：内置图标\n\n文章标题图标的地址\n\n\n# 文章内容块的背景底纹\n\n\n# contentBgStyle\n\n * 类型：number\n * 默认：undefined\n * 选值：1 => 方格 | 2 => 横线 | 3 => 竖线 | 4 => 左斜线 | 5 => 右斜线 | 6 => 点状\n\n文章内容块的背景底纹\n\n\n# 侧边栏\n\n\n# sidebar\n\n * 类型：srting | object | array\n * 在默认主题原有的配置上新增两项参数：\n   * 'structuring' 自动生成结构化侧边栏\n   * { mode: 'structuring', collapsable: Boolean} 自动生成结构化侧边栏，并设置侧边栏是否可折叠，默认true\n\n提示\n\n如需构建结构化站点请把此配置设置为structuring 或 { mode: 'structuring', collapsable: false}\n\n\n# sidebarOpen\n\n * 类型：boolean\n * 默认：true\n\n初始状态下是否打开侧边栏\n\n提示\n\n在侧边栏关闭状态下，页面向下滚动时会隐藏顶部导航栏，让用户更专注于阅读。\n\n\n# 对指定页面禁用侧边栏\n\n你可以通过 front matter 来禁用指定页面的侧边栏：\n\n---\nsidebar: false\n---\n\n\n\n# 碎片化文章的侧边栏\n\n在_posts文件夹的文章会自动在 front matter 添加 sidebar: auto\n\n---\nsidebar: auto\n---\n\n\n\n# 最近更新栏\n\n\n# updateBar\n\n * 类型：object\n * 默认：{showToArticle: true, moreArticle: '/archives/'}\n   * showToArticle 显示到文章页底部，默认true\n   * moreArticle “更多文章”跳转的页面，默认'/archives/'\n\n最近更新栏，显示于文章页底部和简约版首页文章列表\n\n\n# 非文章页的设置\n\n对于非文章页，如目录页、关于、友情链接等自定义页面，最好在front matter设置article: false，设置之后这个页面将被认定为非文章页，不显示面包屑和作者、时间，不显示最近更新栏，不会参与到最近更新文章的数据计算中。\n\n---\narticle: false\n---\n\n\n\n# 右侧文章大纲栏\n\n\n# rightMenuBar\n\n * 类型：boolean\n * 默认：true\n\n是否显示右侧文章大纲栏。设置为false或屏宽小于1300px时，文章大纲将与左侧侧边栏混合在一起。 (注：在屏宽小于1300px下无论如何都不显示右侧文章大纲栏。)\n\n\n# 快捷翻页按钮\n\n\n# pageButton\n\n * 类型：boolean\n * 默认：true\n\n是否显示快捷翻页按钮 (此按钮是文章页左右两边的箭头按钮，小屏中不会显示。)\n\n\n# 文章作者信息\n\n\n# author\n\n * 类型：string | {name: String, link: String}\n * 默认：undefined\n * 属性：\n   * name 作者名称\n   * link 作者链接\n\n文章默认的作者信息\n\n\n# 指定的文章作者信息\n\n你也可以在指定的文章front matter设置作者信息，优先级比默认作者信息高，示例：\n\n---\nauthor:\n  name: 作者名\n  link: https://xxx.com\n---\n 或\n---\nauthor: 作者名\n---\n\n\n\n# 博主信息\n\n\n# blogger\n\n * 参数和类型：{avatar: String, name: String, slogan: String}\n * 默认：undefined\n   * avatar 头像，必需\n   * name 博主名称，必需\n   * slogan 标语，可选\n\n博主信息显示于首页博主信息栏\n\n\n# 社交图标\n\n\n# social\n\n * 参数和类型：{iconfontCssFile: String, icons: [{iconClass: String, title: String, link: String}]}\n * 默认：undefined\n   * iconfontCssFile 可选，阿里图标库（或其他）的在线css字体图标文件地址，对于主题没有的图标可自由添加\n   * icons 图标列表，数量自由\n     * iconClass 图标的Class名称\n     * title 图标的title\n     * link 图标的跳转链接\n\n社交图标显示于博主信息栏和页脚栏\n\n\n# 主题内置的社交图标\n\n微信            QQ        邮件             npm        github        gitee        微博\n                                                                             \nicon-weixin   icon-QQ   icon-youjian   icon-npm   icon-github   icon-gitee   icon-weibo\n\n\n# 扩展自动生成front matter\n\n\n# extendFrontmatter\n\n * 类型：Object\n * 默认：undefined\n\n当.md文件的front matter不存在extendFrontmatter内相应的字段时，将在运行开发服务dev或打包build时自动添加，但不会覆盖已有的数据。\n\n例子：\n\nextendFrontmatter: {\n  author: {\n    name: 'xugaoyi',\n    link: 'https://github.com/xugaoyi'\n  },\n  titleTag: '',\n}\n\n\n生成到front matter：\n\n---\nauthor:\n  name: xugaoyi\n  link: https://github.com/xugaoyi\ntitleTag:\n---\n\n\n\n# 页脚版权栏\n\n\n# footer\n\n * 参数和类型：{createYear: Number | String, copyrightInfo: String}\n * 默认：undefined\n   * createYear 博客创建的年份\n   * copyrightInfo 可以配置包括版权信息、备案信息在内的所有信息，支持a标签\n\n页脚版权栏信息，原默认主题在首页的front matter中的footer配置项已弃用。\n\n\n# 自定义html模块\n\n> 可用于插入广告模块\n\n\n# htmlModules\n\n * 类型：object\n\n * 默认：undefined\n\n * 属性：\n   \n   * homeSidebarB 首页侧边栏底部\n   * sidebarT 所有左侧边栏顶部\n   * sidebarB 所有左侧边栏底部\n   * pageT 页面顶部\n   * pageB 页面底部\n   * pageTshowMode 页面顶部的显示方式\n     * 未配置 默认所有页面显示\n     * 'article' 仅文章页①显示\n     * 'custom' 仅自定义页①显示\n   * pageBshowMode 页面底部的显示方式\n     * 未配置 默认全局显示\n     * 'article' 仅文章页①显示\n     * 'custom' 仅自定义页①显示\n   * windowLB 全局窗口左下角②\n   * windowRB 全局窗口右下角②\n   \n   \n   > ①注：在.md文件front matter配置article: false的页面是自定义页，未配置的默认是文章页（首页除外）。\n   > \n   > ②注：windowLB 和 windowRB：1.展示区块最大宽高200px*400px。2.请给自定义元素定一个不超过200px*400px的宽高。3.在屏幕宽度小于960px时无论如何都不会显示。\n\n * 格式：\n\nhtmlModules: {\n   homeSidebarB: htmlString,\n   sidebarT: htmlString,\n   sidebarB: htmlString,\n   pageT: htmlString,\n   pageB: htmlString,\n   pageTshowMode: 'article' | 'custom',\n   pageBshowMode: 'article' | 'custom',\n   windowLB: htmlString,\n   windowRB: htmlString,\n }\n",normalizedContent:"主题的配置在.vuepress/config.ts文件的themeconfig字段中，是在原有配置的基础上做的新增和修改，配置示例请查看：config.ts。\n\n更多官方配置，请查看vuepress文档。\n\n\n# 是否打开分类、标签、归档\n\n\n# category\n\n * 类型：boolean\n * 默认：true\n\n是否打开分类功能。 如打开，会做的事情有：\n\n 1. 自动生成的front matter包含分类字段\n 2. 页面中显示与分类相关的信息和模块\n 3. 自动生成分类页面（在@pages文件夹）\n\n如关闭，则反之。\n\n\n# tag\n\n * 类型：boolean\n * 默认：true\n\n是否打开标签功能。 如打开，会做的事情有：\n\n 1. 自动生成的front matter包含标签字段\n 2. 页面中显示与标签相关的信息和模块\n 3. 自动生成标签页面（在@pages文件夹）\n\n如关闭，则反之。\n\n\n# archive\n\n * 类型：boolean\n * 默认：true\n\n是否打开归档功能。 如打开，会做的事情有：\n\n 1. 自动生成归档页面（在@pages文件夹）\n\n如关闭，则反之。\n\n提示\n\n如果你仅仅是想使用这个主题来搭建知识库，并不想使用分类、标签、归档功能，就可以关闭它们。\n\n\n# 使用分类页、标签页、归档页链接\n\n当你打开了分类、标签、归档功能，就可以在导航或其他地方添加分类页、标签页、归档页的链接：\n\n * 分类页: /categories/\n * 标签页: /tags/\n * 归档页: /archives/\n\n\n# 碎片化文章默认分类值\n\n\n# categorytext\n\n * 类型：string\n * 默认：'随笔'\n\n碎片化文章（_posts文件夹的文章）默认生成的分类值\n\n\n# 页面风格\n\n\n# pagestyle\n\n * 类型：string\n * 可选值：'card' | 'line' （line在未设置bodybgimg时才生效）\n * 默认：'card'\n\n页面风格，card时背景显示灰色衬托出卡片样式，line时背景显示纯色，并且部分模块带线条边框（未设置bodybgimg时才生效）\n\n\n# defaultmode\n\n * 类型：string\n * 可选值：'auto' | 'light' | 'dark' | 'read'\n * 默认：'auto'\n\n默认外观模式，用户未在页面手动修改过模式时才生效，否则以用户设置的模式为准\n\n\n# body背景大图\n\n\n# bodybgimg\n\n * 类型：string | array\n * 默认：undefined\n\nbody背景大图，单张图片使用string，多张图片使用array， 多张图片时每隔 <bodybgimginterval> 秒换一张\n\n\n# bodybgimgopacity\n\n * 类型：number\n * 默认：0.5\n * 选值范围：0 ~ 1.0\n\nbody背景图透明度\n\n\n# bodybgimginterval\n\n * 类型：number\n * 默认：15\n * 单位：s\n\nbody有多张背景大图时的切换间隔\n\n\n# 文章标题前的图标\n\n\n# titlebadge\n\n * 类型：boolean\n * 默认：true\n\n是否打开文章标题图标\n\n\n# titlebadgeicons\n\n * 类型：array\n * 默认：内置图标\n\n文章标题图标的地址\n\n\n# 文章内容块的背景底纹\n\n\n# contentbgstyle\n\n * 类型：number\n * 默认：undefined\n * 选值：1 => 方格 | 2 => 横线 | 3 => 竖线 | 4 => 左斜线 | 5 => 右斜线 | 6 => 点状\n\n文章内容块的背景底纹\n\n\n# 侧边栏\n\n\n# sidebar\n\n * 类型：srting | object | array\n * 在默认主题原有的配置上新增两项参数：\n   * 'structuring' 自动生成结构化侧边栏\n   * { mode: 'structuring', collapsable: boolean} 自动生成结构化侧边栏，并设置侧边栏是否可折叠，默认true\n\n提示\n\n如需构建结构化站点请把此配置设置为structuring 或 { mode: 'structuring', collapsable: false}\n\n\n# sidebaropen\n\n * 类型：boolean\n * 默认：true\n\n初始状态下是否打开侧边栏\n\n提示\n\n在侧边栏关闭状态下，页面向下滚动时会隐藏顶部导航栏，让用户更专注于阅读。\n\n\n# 对指定页面禁用侧边栏\n\n你可以通过 front matter 来禁用指定页面的侧边栏：\n\n---\nsidebar: false\n---\n\n\n\n# 碎片化文章的侧边栏\n\n在_posts文件夹的文章会自动在 front matter 添加 sidebar: auto\n\n---\nsidebar: auto\n---\n\n\n\n# 最近更新栏\n\n\n# updatebar\n\n * 类型：object\n * 默认：{showtoarticle: true, morearticle: '/archives/'}\n   * showtoarticle 显示到文章页底部，默认true\n   * morearticle “更多文章”跳转的页面，默认'/archives/'\n\n最近更新栏，显示于文章页底部和简约版首页文章列表\n\n\n# 非文章页的设置\n\n对于非文章页，如目录页、关于、友情链接等自定义页面，最好在front matter设置article: false，设置之后这个页面将被认定为非文章页，不显示面包屑和作者、时间，不显示最近更新栏，不会参与到最近更新文章的数据计算中。\n\n---\narticle: false\n---\n\n\n\n# 右侧文章大纲栏\n\n\n# rightmenubar\n\n * 类型：boolean\n * 默认：true\n\n是否显示右侧文章大纲栏。设置为false或屏宽小于1300px时，文章大纲将与左侧侧边栏混合在一起。 (注：在屏宽小于1300px下无论如何都不显示右侧文章大纲栏。)\n\n\n# 快捷翻页按钮\n\n\n# pagebutton\n\n * 类型：boolean\n * 默认：true\n\n是否显示快捷翻页按钮 (此按钮是文章页左右两边的箭头按钮，小屏中不会显示。)\n\n\n# 文章作者信息\n\n\n# author\n\n * 类型：string | {name: string, link: string}\n * 默认：undefined\n * 属性：\n   * name 作者名称\n   * link 作者链接\n\n文章默认的作者信息\n\n\n# 指定的文章作者信息\n\n你也可以在指定的文章front matter设置作者信息，优先级比默认作者信息高，示例：\n\n---\nauthor:\n  name: 作者名\n  link: https://xxx.com\n---\n 或\n---\nauthor: 作者名\n---\n\n\n\n# 博主信息\n\n\n# blogger\n\n * 参数和类型：{avatar: string, name: string, slogan: string}\n * 默认：undefined\n   * avatar 头像，必需\n   * name 博主名称，必需\n   * slogan 标语，可选\n\n博主信息显示于首页博主信息栏\n\n\n# 社交图标\n\n\n# social\n\n * 参数和类型：{iconfontcssfile: string, icons: [{iconclass: string, title: string, link: string}]}\n * 默认：undefined\n   * iconfontcssfile 可选，阿里图标库（或其他）的在线css字体图标文件地址，对于主题没有的图标可自由添加\n   * icons 图标列表，数量自由\n     * iconclass 图标的class名称\n     * title 图标的title\n     * link 图标的跳转链接\n\n社交图标显示于博主信息栏和页脚栏\n\n\n# 主题内置的社交图标\n\n微信            qq        邮件             npm        github        gitee        微博\n                                                                             \nicon-weixin   icon-qq   icon-youjian   icon-npm   icon-github   icon-gitee   icon-weibo\n\n\n# 扩展自动生成front matter\n\n\n# extendfrontmatter\n\n * 类型：object\n * 默认：undefined\n\n当.md文件的front matter不存在extendfrontmatter内相应的字段时，将在运行开发服务dev或打包build时自动添加，但不会覆盖已有的数据。\n\n例子：\n\nextendfrontmatter: {\n  author: {\n    name: 'xugaoyi',\n    link: 'https://github.com/xugaoyi'\n  },\n  titletag: '',\n}\n\n\n生成到front matter：\n\n---\nauthor:\n  name: xugaoyi\n  link: https://github.com/xugaoyi\ntitletag:\n---\n\n\n\n# 页脚版权栏\n\n\n# footer\n\n * 参数和类型：{createyear: number | string, copyrightinfo: string}\n * 默认：undefined\n   * createyear 博客创建的年份\n   * copyrightinfo 可以配置包括版权信息、备案信息在内的所有信息，支持a标签\n\n页脚版权栏信息，原默认主题在首页的front matter中的footer配置项已弃用。\n\n\n# 自定义html模块\n\n> 可用于插入广告模块\n\n\n# htmlmodules\n\n * 类型：object\n\n * 默认：undefined\n\n * 属性：\n   \n   * homesidebarb 首页侧边栏底部\n   * sidebart 所有左侧边栏顶部\n   * sidebarb 所有左侧边栏底部\n   * paget 页面顶部\n   * pageb 页面底部\n   * pagetshowmode 页面顶部的显示方式\n     * 未配置 默认所有页面显示\n     * 'article' 仅文章页①显示\n     * 'custom' 仅自定义页①显示\n   * pagebshowmode 页面底部的显示方式\n     * 未配置 默认全局显示\n     * 'article' 仅文章页①显示\n     * 'custom' 仅自定义页①显示\n   * windowlb 全局窗口左下角②\n   * windowrb 全局窗口右下角②\n   \n   \n   > ①注：在.md文件front matter配置article: false的页面是自定义页，未配置的默认是文章页（首页除外）。\n   > \n   > ②注：windowlb 和 windowrb：1.展示区块最大宽高200px*400px。2.请给自定义元素定一个不超过200px*400px的宽高。3.在屏幕宽度小于960px时无论如何都不会显示。\n\n * 格式：\n\nhtmlmodules: {\n   homesidebarb: htmlstring,\n   sidebart: htmlstring,\n   sidebarb: htmlstring,\n   paget: htmlstring,\n   pageb: htmlstring,\n   pagetshowmode: 'article' | 'custom',\n   pagebshowmode: 'article' | 'custom',\n   windowlb: htmlstring,\n   windowrb: htmlstring,\n }\n",charsets:{cjk:!0}},{title:"首页配置",frontmatter:{title:"首页配置",date:"2020-05-12T15:36:50.000Z",permalink:"/pages/f14bdb",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/02.%E9%A6%96%E9%A1%B5%E9%85%8D%E7%BD%AE.html",relativePath:"02.test12/01.配置/02.首页配置.md",key:"v-420d7ee0",path:"/pages/f14bdb/",headers:[{level:3,title:"bannerBg",slug:"bannerbg",normalizedTitle:"bannerbg",charIndex:219},{level:3,title:"features",slug:"features",normalizedTitle:"features",charIndex:373},{level:3,title:"postList",slug:"postlist",normalizedTitle:"postlist",charIndex:776},{level:3,title:"simplePostListLength",slug:"simplepostlistlength",normalizedTitle:"simplepostlistlength",charIndex:797},{level:3,title:"hideRightBar",slug:"hiderightbar",normalizedTitle:"hiderightbar",charIndex:871}],headersStr:"bannerBg features postList simplePostListLength hideRightBar",content:"在docs目录下的index.md或README.md的 front matter 指定 home: true，就会为你的站点生成一个首页，示例：\n\n---\nhome: true\n# heroImage: /img/web.png\nheroText: Evan's blog\ntagline: Web前端技术博客，积跬步以至千里，致敬每个爱学习的你。\n# actionText: 立刻进入 →\n# actionLink: /web/\n# bannerBg: auto # auto => 网格纹背景(有bodyBgImg时无背景)，默认 | none => 无 | '大图地址' | background: 自定义背景样式       提示：如发现文本颜色不适应你的背景时可以到palette.styl修改$bannerTextColor变量\n\nfeatures: # 可选的\n  - title: 前端\n    details: JavaScript、ES6、Vue框架等前端技术\n    link: /web/ # 可选\n    imgUrl: /img/web.png # 可选\n  - title: 页面\n    details: html(5)/css(3)，前端页面相关技术\n    link: /ui/\n    imgUrl: /img/ui.png\n  - title: 技术\n    details: 技术文档、教程、技巧、总结等文章\n    link: /technology/\n    imgUrl: /img/other.png\n\n# 文章列表显示方式: detailed 默认，显示详细版文章列表（包括作者、分类、标签、摘要、分页等）| simple => 显示简约版文章列表（仅标题和日期）| none 不显示文章列表\n# postList: detailed\n# simplePostListLength: 10 # 简约版文章列表显示的文章数量，默认10。（仅在postList设置为simple时生效）\n# hideRightBar: true # 是否隐藏右侧边栏 (v1.11.2+)\n---\n\n\n一些字段还是沿用默认主题的，这里只对修改的地方做一个补充。\n\n\n# bannerBg\n\n * 类型：string\n * 可选参数：\n   * auto 自动背景，一般会显示网格纹背景，如果在config.js设置了bodyBgImg时则无背景\n   * none 无背景\n   * <大图地址>，如/img/bg.jpeg\n   * background: <自定义背景样式>，如background: blue\n * 默认： auto\n\n\n# features\n\n * 类型：{title: string, details: string, link?: string, imgUrl?: string}[]\n\nfeatures是在banner栏显示的特性描述，主题添加了图片的展示和点击跳转的链接\n\n * features[index].link 当前feature跳转的链接，可选\n * features[index].imgUrl 当前feature的图片地址，可选\n\n\n# postList\n\n * 类型：'detailed' | 'simple' | 'none'\n * 可选参数：\n   * detailed 显示详细版文章列表（包括标题、日期、作者、分类、标签、摘要、分页等）\n   * simple 显示简约版文章列表（仅标题和日期）\n   * none 不显示文章列表\n * 默认： detailed\n\n首页内容中的文章列表显示方式\n\n\n# simplePostListLength\n\n * 类型：number\n * 默认： 10\n\n简约版文章列表显示的文章数量，默认10。（仅在postList设置为simple时生效）\n\n\n# hideRightBar\n\n * 类型：boolean\n * 默认： false\n\n是否隐藏右侧边栏\n\n注意\n\n原默认主题首页的footer字段已改到config.js文件里设置",normalizedContent:"在docs目录下的index.md或readme.md的 front matter 指定 home: true，就会为你的站点生成一个首页，示例：\n\n---\nhome: true\n# heroimage: /img/web.png\nherotext: evan's blog\ntagline: web前端技术博客，积跬步以至千里，致敬每个爱学习的你。\n# actiontext: 立刻进入 →\n# actionlink: /web/\n# bannerbg: auto # auto => 网格纹背景(有bodybgimg时无背景)，默认 | none => 无 | '大图地址' | background: 自定义背景样式       提示：如发现文本颜色不适应你的背景时可以到palette.styl修改$bannertextcolor变量\n\nfeatures: # 可选的\n  - title: 前端\n    details: javascript、es6、vue框架等前端技术\n    link: /web/ # 可选\n    imgurl: /img/web.png # 可选\n  - title: 页面\n    details: html(5)/css(3)，前端页面相关技术\n    link: /ui/\n    imgurl: /img/ui.png\n  - title: 技术\n    details: 技术文档、教程、技巧、总结等文章\n    link: /technology/\n    imgurl: /img/other.png\n\n# 文章列表显示方式: detailed 默认，显示详细版文章列表（包括作者、分类、标签、摘要、分页等）| simple => 显示简约版文章列表（仅标题和日期）| none 不显示文章列表\n# postlist: detailed\n# simplepostlistlength: 10 # 简约版文章列表显示的文章数量，默认10。（仅在postlist设置为simple时生效）\n# hiderightbar: true # 是否隐藏右侧边栏 (v1.11.2+)\n---\n\n\n一些字段还是沿用默认主题的，这里只对修改的地方做一个补充。\n\n\n# bannerbg\n\n * 类型：string\n * 可选参数：\n   * auto 自动背景，一般会显示网格纹背景，如果在config.js设置了bodybgimg时则无背景\n   * none 无背景\n   * <大图地址>，如/img/bg.jpeg\n   * background: <自定义背景样式>，如background: blue\n * 默认： auto\n\n\n# features\n\n * 类型：{title: string, details: string, link?: string, imgurl?: string}[]\n\nfeatures是在banner栏显示的特性描述，主题添加了图片的展示和点击跳转的链接\n\n * features[index].link 当前feature跳转的链接，可选\n * features[index].imgurl 当前feature的图片地址，可选\n\n\n# postlist\n\n * 类型：'detailed' | 'simple' | 'none'\n * 可选参数：\n   * detailed 显示详细版文章列表（包括标题、日期、作者、分类、标签、摘要、分页等）\n   * simple 显示简约版文章列表（仅标题和日期）\n   * none 不显示文章列表\n * 默认： detailed\n\n首页内容中的文章列表显示方式\n\n\n# simplepostlistlength\n\n * 类型：number\n * 默认： 10\n\n简约版文章列表显示的文章数量，默认10。（仅在postlist设置为simple时生效）\n\n\n# hiderightbar\n\n * 类型：boolean\n * 默认： false\n\n是否隐藏右侧边栏\n\n注意\n\n原默认主题首页的footer字段已改到config.js文件里设置",charsets:{cjk:!0}},{title:"front matter配置",frontmatter:{title:"front matter配置",date:"2020-05-12T15:37:00.000Z",permalink:"/pages/3216b0",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/03.front%20matter%E9%85%8D%E7%BD%AE.html",relativePath:"02.test12/01.配置/03.front matter配置.md",key:"v-5bd507f9",path:"/pages/3216b0/",headers:[{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:275},{level:3,title:"titleTag",slug:"titletag",normalizedTitle:"titletag",charIndex:131},{level:3,title:"sidebar",slug:"sidebar",normalizedTitle:"sidebar",charIndex:154},{level:3,title:"article",slug:"article",normalizedTitle:"article",charIndex:169},{level:3,title:"comment",slug:"comment",normalizedTitle:"comment",charIndex:184},{level:3,title:"editLink",slug:"editlink",normalizedTitle:"editlink",charIndex:199},{level:3,title:"author",slug:"author",normalizedTitle:"author",charIndex:215},{level:3,title:"sticky (置顶)",slug:"sticky-置顶",normalizedTitle:"sticky (置顶)",charIndex:811}],headersStr:"配置项 titleTag sidebar article comment editLink author sticky (置顶)",content:"一个比较完整的front matter示例：\n\n---\ntitle: 标题\ndate: 2020-02-21 14:40:19\npermalink: /pages/a1bc87\ncategories:\n  - 分类1\n  - 分类2\ntags:\n  - 标签1\ntitleTag: 原创 # v1.9.0+\nsidebar: false\narticle: false\ncomment: false\neditLink: false\nauthor:\n name: 作者\n link: https://xxx.com\nsticky: 1\n---\n\n\n\n# 配置项\n\n自动生成的front matter字段包括title、date、permalink、categories、tags，这里就不再重复赘述，参考：自动生成front matter\n\n\n# titleTag\n\n * 用于给标题添加 原创、转载 、优质、推荐 等自定义标记。\n\n添加了标题标记的文章，在文章页和文章列表、最近更新栏、归档页的文章标题都会显示此标记。\n\n\n# sidebar\n\n * false 不显示侧边栏\n * auto 显示自动侧边栏（只包含本文标题和子标题）\n\n\n# article\n\n * false 判定当前页面为非文章页\n\n对于非文章页，如目录页、关于、友情链接等自定义页面，需要设置此项。设置之后这个页面将被认定为非文章页，不显示面包屑和作者、时间，不显示最近更新栏，不会参与到最近更新文章的数据计算中。\n\n\n# comment\n\n * false 不显示评论区，这是评论插件的一个配置\n\n\n# editLink\n\n * false 不显示编辑链接\n\n\n# author\n\n * author.name 作者名称\n * author.link 作者链接\n\n指定当前页面的作者信息，如没有作者链接时可以这样：author: 作者名称\n\n\n# sticky (置顶)\n\n * 类型： number\n * 排序：允许有多个置顶文章，按照 1, 2, 3, ... 来降低置顶文章的排列优先级\n\n文章置顶，设置了此项将在首页详细版文章列表中处于置顶位置。",normalizedContent:"一个比较完整的front matter示例：\n\n---\ntitle: 标题\ndate: 2020-02-21 14:40:19\npermalink: /pages/a1bc87\ncategories:\n  - 分类1\n  - 分类2\ntags:\n  - 标签1\ntitletag: 原创 # v1.9.0+\nsidebar: false\narticle: false\ncomment: false\neditlink: false\nauthor:\n name: 作者\n link: https://xxx.com\nsticky: 1\n---\n\n\n\n# 配置项\n\n自动生成的front matter字段包括title、date、permalink、categories、tags，这里就不再重复赘述，参考：自动生成front matter\n\n\n# titletag\n\n * 用于给标题添加 原创、转载 、优质、推荐 等自定义标记。\n\n添加了标题标记的文章，在文章页和文章列表、最近更新栏、归档页的文章标题都会显示此标记。\n\n\n# sidebar\n\n * false 不显示侧边栏\n * auto 显示自动侧边栏（只包含本文标题和子标题）\n\n\n# article\n\n * false 判定当前页面为非文章页\n\n对于非文章页，如目录页、关于、友情链接等自定义页面，需要设置此项。设置之后这个页面将被认定为非文章页，不显示面包屑和作者、时间，不显示最近更新栏，不会参与到最近更新文章的数据计算中。\n\n\n# comment\n\n * false 不显示评论区，这是评论插件的一个配置\n\n\n# editlink\n\n * false 不显示编辑链接\n\n\n# author\n\n * author.name 作者名称\n * author.link 作者链接\n\n指定当前页面的作者信息，如没有作者链接时可以这样：author: 作者名称\n\n\n# sticky (置顶)\n\n * 类型： number\n * 排序：允许有多个置顶文章，按照 1, 2, 3, ... 来降低置顶文章的排列优先级\n\n文章置顶，设置了此项将在首页详细版文章列表中处于置顶位置。",charsets:{cjk:!0}},{title:"目录页配置",frontmatter:{title:"目录页配置",date:"2020-05-13T10:58:07.000Z",permalink:"/pages/54651a",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/04.%E7%9B%AE%E5%BD%95%E9%A1%B5%E9%85%8D%E7%BD%AE.html",relativePath:"02.test12/01.配置/04.目录页配置.md",key:"v-6407fe0b",path:"/pages/54651a/",headers:[{level:2,title:"目录页说明",slug:"目录页说明",normalizedTitle:"目录页说明",charIndex:2},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:911},{level:3,title:"pageComponent.name",slug:"pagecomponent-name",normalizedTitle:"pagecomponent.name",charIndex:919},{level:3,title:"pageComponent.data",slug:"pagecomponent-data",normalizedTitle:"pagecomponent.data",charIndex:979},{level:3,title:"pageComponent.data.path",slug:"pagecomponent-data-path",normalizedTitle:"pagecomponent.data.path",charIndex:1016},{level:3,title:"pageComponent.data.imgUrl",slug:"pagecomponent-data-imgurl",normalizedTitle:"pagecomponent.data.imgurl",charIndex:1186},{level:3,title:"pageComponent.data.description",slug:"pagecomponent-data-description",normalizedTitle:"pagecomponent.data.description",charIndex:1268},{level:2,title:"如何在导航栏中添加目录页链接",slug:"如何在导航栏中添加目录页链接",normalizedTitle:"如何在导航栏中添加目录页链接",charIndex:1348}],headersStr:"目录页说明 配置项 pageComponent.name pageComponent.data pageComponent.data.path pageComponent.data.imgUrl pageComponent.data.description 如何在导航栏中添加目录页链接",content:"# 目录页说明\n\n注意\n\n目录页数据需要依赖于结构化的侧边栏数据，就是说你需要在config.js配置 sidebar: 'structuring' 或 sidebar: { mode: 'structuring', collapsable: false} 才能实现目录页数据的获取。\n\n>  * 目录页文件(.md文件)可以放置在二级目录、三级目录和四级目录。（级别说明）\n>  * 如果你不想在侧边栏显示目录页，你可以在一级目录中单独创建一个文件夹放置你的目录页(.md文件)，并在front matter中设置sidebar: false。\n>  * 如果你想让目录页和其他页面一起出现在侧边栏，你可以和其他页面共同放置在相应的文件夹。(不要设置sidebar: false)\n>  * 参照下面的示例配置好front matter，然后就可以在导航栏或首页添加目录页链接了。\n\n示例：\n\n---\npageComponent: # 使用页面组件\n  name: Catalogue # 组件名：Catalogue => 目录页组件\n  data: # 组件所需数据\n    path:  01.学习笔记/01.前端 # 设置为`docs/`下面的某个文件夹相对路径，如‘01.学习笔记/01.前端’ 或 ’01.学习笔记‘ (有序号的要带序号)\n    imgUrl: /img/web.png # 目录页内的图片\n    description: JavaScript、ES6、Vue框架等前端技术 # 目录描述（可加入a标签）\n\ntitle: 前端 # 页面标题\ndate: 2020-01-12 11:51:53 # 创建日期\npermalink: /note/javascript # 永久链接\nsidebar: false # 不显示侧边栏\narticle: false # 不是文章页 (不显示面包屑栏、最近更新栏等)\ncomment: false # 不显示评论栏\neditLink: false # 不显示编辑按钮\n---\n\n\n提示\n\n配置好目录页之后，点击文章页的面包屑将会跳转到目录页。\n\n\n# 配置项\n\n\n# pageComponent.name\n\n * 组件名，必需\n * 使用目录页时 必须 设置为Catalogue\n\n\n# pageComponent.data\n\n * 组件所需数据，必需\n\n\n# pageComponent.data.path\n\n * 要为其生成目录页的文件夹的相对路径，必需\n * 必须是在docs目录底下的文件夹相对路径\n * 示例：01.学习笔记或01.学习笔记/01.前端(有序号的要带序号)\n\n注意\n\n在v1.8.2版本之前，没有path属性，使用key代替。但key只支持指定一级目录的文件夹名称。\n\n\n# pageComponent.data.imgUrl\n\n * 目录页内的图片，可选。(v1.9.4之前必填)\n * 图片尺寸在页面中显示为80px*80px\n\n\n# pageComponent.data.description\n\n * 目录描述，必需\n * 可加a标签（如需加入a标签时，标签内部的引号请使用单引号）\n\n\n# 如何在导航栏中添加目录页链接\n\n // config.js\nmodule.exports = {\n    themeConfig: {\n        nav:  [\n            // 没有二级导航时可以直接添加\n           {text: '目录页', link: '/web/'},\n\n          // 有二级导航时\n           {text: '页面',\n               link: '/ui/',   //目录页， vdoing主题新增的配置项，有二级导航时，可以点击一级导航跳到目录页\n               items: [\n                 {text: 'HTML', link: '/pages/11/'},\n                 {text: 'CSS', link: '/pages/22/'},\n               ]\n            },\n       ]\n    }\n}\n\n\n参考：.vuepress/config/nav.js",normalizedContent:"# 目录页说明\n\n注意\n\n目录页数据需要依赖于结构化的侧边栏数据，就是说你需要在config.js配置 sidebar: 'structuring' 或 sidebar: { mode: 'structuring', collapsable: false} 才能实现目录页数据的获取。\n\n>  * 目录页文件(.md文件)可以放置在二级目录、三级目录和四级目录。（级别说明）\n>  * 如果你不想在侧边栏显示目录页，你可以在一级目录中单独创建一个文件夹放置你的目录页(.md文件)，并在front matter中设置sidebar: false。\n>  * 如果你想让目录页和其他页面一起出现在侧边栏，你可以和其他页面共同放置在相应的文件夹。(不要设置sidebar: false)\n>  * 参照下面的示例配置好front matter，然后就可以在导航栏或首页添加目录页链接了。\n\n示例：\n\n---\npagecomponent: # 使用页面组件\n  name: catalogue # 组件名：catalogue => 目录页组件\n  data: # 组件所需数据\n    path:  01.学习笔记/01.前端 # 设置为`docs/`下面的某个文件夹相对路径，如‘01.学习笔记/01.前端’ 或 ’01.学习笔记‘ (有序号的要带序号)\n    imgurl: /img/web.png # 目录页内的图片\n    description: javascript、es6、vue框架等前端技术 # 目录描述（可加入a标签）\n\ntitle: 前端 # 页面标题\ndate: 2020-01-12 11:51:53 # 创建日期\npermalink: /note/javascript # 永久链接\nsidebar: false # 不显示侧边栏\narticle: false # 不是文章页 (不显示面包屑栏、最近更新栏等)\ncomment: false # 不显示评论栏\neditlink: false # 不显示编辑按钮\n---\n\n\n提示\n\n配置好目录页之后，点击文章页的面包屑将会跳转到目录页。\n\n\n# 配置项\n\n\n# pagecomponent.name\n\n * 组件名，必需\n * 使用目录页时 必须 设置为catalogue\n\n\n# pagecomponent.data\n\n * 组件所需数据，必需\n\n\n# pagecomponent.data.path\n\n * 要为其生成目录页的文件夹的相对路径，必需\n * 必须是在docs目录底下的文件夹相对路径\n * 示例：01.学习笔记或01.学习笔记/01.前端(有序号的要带序号)\n\n注意\n\n在v1.8.2版本之前，没有path属性，使用key代替。但key只支持指定一级目录的文件夹名称。\n\n\n# pagecomponent.data.imgurl\n\n * 目录页内的图片，可选。(v1.9.4之前必填)\n * 图片尺寸在页面中显示为80px*80px\n\n\n# pagecomponent.data.description\n\n * 目录描述，必需\n * 可加a标签（如需加入a标签时，标签内部的引号请使用单引号）\n\n\n# 如何在导航栏中添加目录页链接\n\n // config.js\nmodule.exports = {\n    themeconfig: {\n        nav:  [\n            // 没有二级导航时可以直接添加\n           {text: '目录页', link: '/web/'},\n\n          // 有二级导航时\n           {text: '页面',\n               link: '/ui/',   //目录页， vdoing主题新增的配置项，有二级导航时，可以点击一级导航跳到目录页\n               items: [\n                 {text: 'html', link: '/pages/11/'},\n                 {text: 'css', link: '/pages/22/'},\n               ]\n            },\n       ]\n    }\n}\n\n\n参考：.vuepress/config/nav.js",charsets:{cjk:!0}},{title:"添加摘要",frontmatter:{title:"添加摘要",date:"2020-05-13T11:47:49.000Z",permalink:"/pages/1cc523",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/05.%E6%B7%BB%E5%8A%A0%E6%91%98%E8%A6%81.html",relativePath:"02.test12/01.配置/05.添加摘要.md",key:"v-3dd8a8fe",path:"/pages/1cc523/",excerpt:"<p>文章摘要会显示于首页的详细版文章列表中，在编写文章时（<code>.md</code>文件中）在合适的位置添加一个`</p>\n",headersStr:null,content:"文章摘要会显示于首页的详细版文章列表中，在编写文章时（.md文件中）在合适的位置添加一个\x3c!-- more --\x3e注释。注释前面的内容将会暴露在摘要中。\n\n示例：\n\n# 如何根据系统主题自动响应CSS深色模式\n\n![Dark](https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg)\n\n很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。\n\n\x3c!-- more --\x3e\n\n## CSS 深色模式 (Dark Mode)\n\n...\n\n\n\n如示例的内容，在\x3c!-- more --\x3e注释前面的除了标题之外所有内容将显示到摘要中。摘要在文章列表的显示效果如下：\n\n\n\n\n\n值得注意的是摘要的内容也是文章内容的一部分，会显示在文章详情页中。",normalizedContent:"文章摘要会显示于首页的详细版文章列表中，在编写文章时（.md文件中）在合适的位置添加一个\x3c!-- more --\x3e注释。注释前面的内容将会暴露在摘要中。\n\n示例：\n\n# 如何根据系统主题自动响应css深色模式\n\n![dark](https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg)\n\n很多人喜欢选择app或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的css深色模式，根据访客的系统主题来自动响应。\n\n\x3c!-- more --\x3e\n\n## css 深色模式 (dark mode)\n\n...\n\n\n\n如示例的内容，在\x3c!-- more --\x3e注释前面的除了标题之外所有内容将显示到摘要中。摘要在文章列表的显示效果如下：\n\n\n\n\n\n值得注意的是摘要的内容也是文章内容的一部分，会显示在文章详情页中。",charsets:{cjk:!0}},{title:"修改主题颜色和样式",frontmatter:{title:"修改主题颜色和样式",date:"2020-05-13T11:48:50.000Z",permalink:"/pages/f51918",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/06.%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2%E5%92%8C%E6%A0%B7%E5%BC%8F.html",relativePath:"02.test12/01.配置/06.修改主题颜色和样式.md",key:"v-6ebe052f",path:"/pages/f51918/",headers:[{level:2,title:"主题样式变量",slug:"主题样式变量",normalizedTitle:"主题样式变量",charIndex:2},{level:2,title:"样式修改与适配",slug:"样式修改与适配",normalizedTitle:"样式修改与适配",charIndex:1417}],headersStr:"主题样式变量 样式修改与适配",content:"# 主题样式变量\n\n下面是vdoing主题使用的css变量，你可以在.vuepress/styles/palette.styl修改这些变量覆盖它们：\n\n//***vdoing主题-CSS变量***//\n\n// 颜色\n$bannerTextColor = #fff // 首页banner区(博客标题区)的文本颜色\n$accentColor = #11A8CD\n$activeColor = #ff5722\n$arrowBgColor = #ccc\n\n// 布局\n$navbarHeight = 3.6rem\n$sidebarWidth = 18rem\n$contentWidth = 860px\n$homePageWidth = 1100px\n$rightMenuWidth = 230px // 右侧菜单\n\n// 代码块\n$lineNumbersWrapperWidth = 2.5rem\n\n// 浅色模式\n.theme-mode-light\n  --bodyBg: #f4f4f4\n  --mainBg: rgba(255,255,255,1)\n  --sidebarBg: rgba(255,255,255,.8)\n  --blurBg: rgba(255,255,255,.9)\n  --textColor: #004050\n  --textLightenColor: #0085AD\n  --borderColor: rgba(0,0,0,.15)\n  // 代码块浅色主题\n  --codeBg: #f6f6f6\n  --codeColor: #525252\n  codeThemeLight()\n  // 代码块深色主题\n  // --codeBg: #252526\n  // --codeColor: #fff\n  // codeThemeDark()\n\n// 深色模式\n.theme-mode-dark\n  --bodyBg: rgb(39,39,43)\n  --mainBg: rgba(30,30,34,1)\n  --sidebarBg: rgba(30,30,34,.8)\n  --blurBg: rgba(30,30,34,.8)\n  --textColor: rgb(140,140,150)\n  --textLightenColor: #0085AD\n  --borderColor: #2C2C3A\n  --codeBg: #252526\n  --codeColor: #fff\n  codeThemeDark()\n\n// 阅读模式\n.theme-mode-read\n  --bodyBg: rgb(240,240,208)\n  --mainBg: rgba(245,245,213,1)\n  --sidebarBg: rgba(245,245,213,.8)\n  --blurBg: rgba(245,245,213,.9)\n  --textColor: #004050\n  --textLightenColor: #0085AD\n  --borderColor: rgba(0,0,0,.15)\n  --codeBg: #282c34\n  --codeColor: #fff\n  codeThemeDark()\n\n\n上面的变量值可能不是最新的，最新的变量值可查看：palette.styl\n\n\n# 样式修改与适配\n\n当你想修改主题某个地方的样式时，或者你在给博客添加了一些新的模块或插件，发现样式和主题的样式不协调时，都可以在.vuepress/styles/index.styl 添加css样式来做修改。 需要注意的是，你在自己写的css样式中，请尽量使用主题提供的变量来进行适配。\n\n> 小技巧：当你发现自己写的css样式优先级没有原来的样式高时，可以在样式后面添加!improtant后缀，使你的样式优先级是最高的。",normalizedContent:"# 主题样式变量\n\n下面是vdoing主题使用的css变量，你可以在.vuepress/styles/palette.styl修改这些变量覆盖它们：\n\n//***vdoing主题-css变量***//\n\n// 颜色\n$bannertextcolor = #fff // 首页banner区(博客标题区)的文本颜色\n$accentcolor = #11a8cd\n$activecolor = #ff5722\n$arrowbgcolor = #ccc\n\n// 布局\n$navbarheight = 3.6rem\n$sidebarwidth = 18rem\n$contentwidth = 860px\n$homepagewidth = 1100px\n$rightmenuwidth = 230px // 右侧菜单\n\n// 代码块\n$linenumberswrapperwidth = 2.5rem\n\n// 浅色模式\n.theme-mode-light\n  --bodybg: #f4f4f4\n  --mainbg: rgba(255,255,255,1)\n  --sidebarbg: rgba(255,255,255,.8)\n  --blurbg: rgba(255,255,255,.9)\n  --textcolor: #004050\n  --textlightencolor: #0085ad\n  --bordercolor: rgba(0,0,0,.15)\n  // 代码块浅色主题\n  --codebg: #f6f6f6\n  --codecolor: #525252\n  codethemelight()\n  // 代码块深色主题\n  // --codebg: #252526\n  // --codecolor: #fff\n  // codethemedark()\n\n// 深色模式\n.theme-mode-dark\n  --bodybg: rgb(39,39,43)\n  --mainbg: rgba(30,30,34,1)\n  --sidebarbg: rgba(30,30,34,.8)\n  --blurbg: rgba(30,30,34,.8)\n  --textcolor: rgb(140,140,150)\n  --textlightencolor: #0085ad\n  --bordercolor: #2c2c3a\n  --codebg: #252526\n  --codecolor: #fff\n  codethemedark()\n\n// 阅读模式\n.theme-mode-read\n  --bodybg: rgb(240,240,208)\n  --mainbg: rgba(245,245,213,1)\n  --sidebarbg: rgba(245,245,213,.8)\n  --blurbg: rgba(245,245,213,.9)\n  --textcolor: #004050\n  --textlightencolor: #0085ad\n  --bordercolor: rgba(0,0,0,.15)\n  --codebg: #282c34\n  --codecolor: #fff\n  codethemedark()\n\n\n上面的变量值可能不是最新的，最新的变量值可查看：palette.styl\n\n\n# 样式修改与适配\n\n当你想修改主题某个地方的样式时，或者你在给博客添加了一些新的模块或插件，发现样式和主题的样式不协调时，都可以在.vuepress/styles/index.styl 添加css样式来做修改。 需要注意的是，你在自己写的css样式中，请尽量使用主题提供的变量来进行适配。\n\n> 小技巧：当你发现自己写的css样式优先级没有原来的样式高时，可以在样式后面添加!improtant后缀，使你的样式优先级是最高的。",charsets:{cjk:!0}},{title:"评论栏",frontmatter:{title:"评论栏",date:"2020-05-13T12:00:39.000Z",permalink:"/pages/ce175c",article:!1},regularPath:"/02.test12/01.%E9%85%8D%E7%BD%AE/07.%E8%AF%84%E8%AE%BA%E6%A0%8F.html",relativePath:"02.test12/01.配置/07.评论栏.md",key:"v-64c4e09a",path:"/pages/ce175c/",headers:[{level:3,title:"vuepress-plugin-comment",slug:"vuepress-plugin-comment",normalizedTitle:"vuepress-plugin-comment",charIndex:61},{level:3,title:"vuepress-plugin-vssue",slug:"vuepress-plugin-vssue",normalizedTitle:"vuepress-plugin-vssue",charIndex:117},{level:3,title:"vuepress-plugin-vssue-global",slug:"vuepress-plugin-vssue-global",normalizedTitle:"vuepress-plugin-vssue-global",charIndex:169},{level:3,title:"Twikoo",slug:"twikoo",normalizedTitle:"twikoo",charIndex:235}],headersStr:"vuepress-plugin-comment vuepress-plugin-vssue vuepress-plugin-vssue-global Twikoo",content:"评论栏推荐使用vuepress插件的方式来导入，这里推荐一些vuepress的评论插件，使用方法查阅相应的文档。\n\n\n# vuepress-plugin-comment\n\n * vuepress-plugin-comment\n\n\n# vuepress-plugin-vssue\n\n * vuepress-plugin-vssue\n\n\n# vuepress-plugin-vssue-global\n\n * vuepress-plugin-vssue-global\n\n\n# Twikoo\n\n * Twikoo",normalizedContent:"评论栏推荐使用vuepress插件的方式来导入，这里推荐一些vuepress的评论插件，使用方法查阅相应的文档。\n\n\n# vuepress-plugin-comment\n\n * vuepress-plugin-comment\n\n\n# vuepress-plugin-vssue\n\n * vuepress-plugin-vssue\n\n\n# vuepress-plugin-vssue-global\n\n * vuepress-plugin-vssue-global\n\n\n# twikoo\n\n * twikoo",charsets:{cjk:!0}},{title:"资源",frontmatter:{title:"资源",date:"2020-05-12T15:10:15.000Z",permalink:"/pages/db78e2",article:!1},regularPath:"/03.test123/01.%E8%B5%84%E6%BA%90.html",relativePath:"03.test123/01.资源.md",key:"v-3e64f9ee",path:"/pages/db78e2/",headers:[{level:2,title:"插件推荐",slug:"插件推荐",normalizedTitle:"插件推荐",charIndex:2},{level:2,title:"社区优秀解决方案",slug:"社区优秀解决方案",normalizedTitle:"社区优秀解决方案",charIndex:524},{level:3,title:"1. 站点信息模块",slug:"_1-站点信息模块",normalizedTitle:"1. 站点信息模块",charIndex:537},{level:3,title:"2. 私密文章功能",slug:"_2-私密文章功能",normalizedTitle:"2. 私密文章功能",charIndex:597},{level:3,title:"3. 首页大图模块",slug:"_3-首页大图模块",normalizedTitle:"3. 首页大图模块",charIndex:648},{level:2,title:"文章管理和发布",slug:"文章管理和发布",normalizedTitle:"文章管理和发布",charIndex:683},{level:2,title:"图标&配图",slug:"图标-配图",normalizedTitle:"图标&amp;配图",charIndex:null},{level:3,title:"静态图标",slug:"静态图标",normalizedTitle:"静态图标",charIndex:805},{level:3,title:"萌系图标",slug:"萌系图标",normalizedTitle:"萌系图标",charIndex:860},{level:3,title:"动态图标",slug:"动态图标",normalizedTitle:"动态图标",charIndex:898},{level:3,title:"插画",slug:"插画",normalizedTitle:"插画",charIndex:926},{level:3,title:"配图",slug:"配图",normalizedTitle:"配图",charIndex:751},{level:3,title:"Logo",slug:"logo",normalizedTitle:"logo",charIndex:973},{level:3,title:"Emoji表情",slug:"emoji表情",normalizedTitle:"emoji表情",charIndex:999},{level:2,title:"共享资源",slug:"共享资源",normalizedTitle:"共享资源",charIndex:1096}],headersStr:"插件推荐 社区优秀解决方案 1. 站点信息模块 2. 私密文章功能 3. 首页大图模块 文章管理和发布 图标&配图 静态图标 萌系图标 动态图标 插画 配图 Logo Emoji表情 共享资源",content:'# 插件推荐\n\n * vuepress-plugin-fulltext-search 全文搜索\n\n * vuepress-plugin-thirdparty-search 可以添加第三方搜索链接的搜索框\n\n * vuepress-plugin-one-click-copy 代码块一键复制\n\n * vuepress-plugin-comment 评论区\n\n * vuepress-plugin-vssue 评论区（单页）\n\n * vuepress-plugin-vssue-global 评论区（全局）\n\n * vuepress-plugin-smplayer 播放器\n\n * vuepress-plugin-flowchart 流程图\n\n * vuepress-plugin-mathjax 数学公式\n\n * vuepress-plugin-tabs 选项卡\n\n * vuepress-plugin-element-ui Element UI\n\n * 花里胡哨的插件 鼠标点击特效、背景彩带、音乐播放器等花里胡哨的插件\n\n更多插件...\n\n * Awesome VuePress\n\n * 在npm中搜索"vuepress–plugin"\n\n\n# 社区优秀解决方案\n\n\n# 1. 站点信息模块\n\n在首页添加站点信息模块，效果：\n\n\n\n在文章页添加文章字数、阅读时间、浏览量，效果：\n\n\n\n\n# 2. 私密文章功能\n\n当大家想要「云端备份」文章到博客时，又不希望别人看到，该功能能满足你。\n\n\n# 3. 首页大图模块\n\n喜欢首页大图模式的朋友可以参考此教程。\n\n\n# 文章管理和发布\n\n使用 此插件 src-sy-post-publisher 发布思源笔记的文章到Vuepress等平台。\n\n\n# 图标&配图\n\n说明：以下图标非主题内置，你可以选择喜欢的图标右键保存或到图标库下载。更多图标：阿里图标库\n\n\n# 静态图标\n\n编程   服务器   机器学习   计算机网络   面向对象   软件开发   数据结构\n\n\n# 萌系图标\n\n * 猫咪系列\n   \n * 数码宝贝\n * 水果系列\n\n\n# 动态图标\n\n猫1   猫2   猫3   猫4\n\n\n# 插画\n\n免费插画\n2D/3D/手绘插画\n阿里插画库\n\n\n\n# 配图\n\n可画-文章配图\n\n\n# Logo\n\nlogo生成1\nlogo生成2\n\n\n# Emoji表情\n\nEmoji百科\n\n小技巧\n\n在任意输入框快速打开emoji表情方法：\nWindows系统下按Win + .\nMac系统下按Control + Command + 空格\n\n\n# 共享资源\n\n如果您有不错的资源，欢迎在 资源分享区 留言。\n\n',normalizedContent:'# 插件推荐\n\n * vuepress-plugin-fulltext-search 全文搜索\n\n * vuepress-plugin-thirdparty-search 可以添加第三方搜索链接的搜索框\n\n * vuepress-plugin-one-click-copy 代码块一键复制\n\n * vuepress-plugin-comment 评论区\n\n * vuepress-plugin-vssue 评论区（单页）\n\n * vuepress-plugin-vssue-global 评论区（全局）\n\n * vuepress-plugin-smplayer 播放器\n\n * vuepress-plugin-flowchart 流程图\n\n * vuepress-plugin-mathjax 数学公式\n\n * vuepress-plugin-tabs 选项卡\n\n * vuepress-plugin-element-ui element ui\n\n * 花里胡哨的插件 鼠标点击特效、背景彩带、音乐播放器等花里胡哨的插件\n\n更多插件...\n\n * awesome vuepress\n\n * 在npm中搜索"vuepress–plugin"\n\n\n# 社区优秀解决方案\n\n\n# 1. 站点信息模块\n\n在首页添加站点信息模块，效果：\n\n\n\n在文章页添加文章字数、阅读时间、浏览量，效果：\n\n\n\n\n# 2. 私密文章功能\n\n当大家想要「云端备份」文章到博客时，又不希望别人看到，该功能能满足你。\n\n\n# 3. 首页大图模块\n\n喜欢首页大图模式的朋友可以参考此教程。\n\n\n# 文章管理和发布\n\n使用 此插件 src-sy-post-publisher 发布思源笔记的文章到vuepress等平台。\n\n\n# 图标&配图\n\n说明：以下图标非主题内置，你可以选择喜欢的图标右键保存或到图标库下载。更多图标：阿里图标库\n\n\n# 静态图标\n\n编程   服务器   机器学习   计算机网络   面向对象   软件开发   数据结构\n\n\n# 萌系图标\n\n * 猫咪系列\n   \n * 数码宝贝\n * 水果系列\n\n\n# 动态图标\n\n猫1   猫2   猫3   猫4\n\n\n# 插画\n\n免费插画\n2d/3d/手绘插画\n阿里插画库\n\n\n\n# 配图\n\n可画-文章配图\n\n\n# logo\n\nlogo生成1\nlogo生成2\n\n\n# emoji表情\n\nemoji百科\n\n小技巧\n\n在任意输入框快速打开emoji表情方法：\nwindows系统下按win + .\nmac系统下按control + command + 空格\n\n\n# 共享资源\n\n如果您有不错的资源，欢迎在 资源分享区 留言。\n\n',charsets:{cjk:!0}},{title:"案例",frontmatter:{title:"案例",date:"2020-05-14T11:39:45.000Z",permalink:"/pages/5d571c",article:!1},regularPath:"/04.test1234/01.%E6%A1%88%E4%BE%8B.html",relativePath:"04.test1234/01.案例.md",key:"v-44ea450a",path:"/pages/5d571c/",headers:[{level:2,title:"特别用户",slug:"特别用户",normalizedTitle:"特别用户",charIndex:2},{level:2,title:"知识库兼博客",slug:"知识库兼博客",normalizedTitle:"知识库兼博客",charIndex:1982},{level:2,title:"知识库",slug:"知识库",normalizedTitle:"知识库",charIndex:1982},{level:2,title:"社区类",slug:"社区类",normalizedTitle:"社区类",charIndex:13799},{level:2,title:"博客类",slug:"博客类",normalizedTitle:"博客类",charIndex:14082},{level:2,title:"文档类",slug:"文档类",normalizedTitle:"文档类",charIndex:14997},{level:2,title:"申请加入案例",slug:"申请加入案例",normalizedTitle:"申请加入案例",charIndex:18010}],headersStr:"特别用户 知识库兼博客 知识库 社区类 博客类 文档类 申请加入案例",content:"# 特别用户\n\nMyBatis-Plus官网\n\n🚀为简化开发而生\n\n青苗\n\nDeepin 社区文档\n\nDeepin 应用开发技术分享、DTK开发经验等\n\nDeepin\n\nVForm官网\n\n低代码表单优选方案，拖拽式设计，一键生成源码\n\nvformAdmin\n\nLiteFlow官网\n\n轻量，快速，稳定可编排的组件式规则引擎\n\n铂赛东\n\nEasy-Es官网\n\n傻瓜级ElasticSearch搜索引擎ORM框架\n\n老汉\n\nconfig:\n    imgHeight: 140px\n\ndata:\n  # - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20210729-233554@2x.22bdqeiem2sg.png\n  #   link: https://docs.openharmony.cn/pages/000000/\n  #   name: OpenHarmony\n  #   desc: 开放原子开源基金会\n  #   author: OpenHarmony\n  #   avatar: https://www.openharmony.cn/static/img/core-card-item2.a72a0d10.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20211215-144040.hgt2875r2zc.webp\n    link: https://baomidou.com/\n    name: MyBatis-Plus官网\n    desc: 🚀为简化开发而生\n    author: 青苗\n    avatar: https://baomidou.com/img/logo.svg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20210729-235804@2x.75e9lfd65t40.png\n    link: https://docs.deepin.org\n    name: Deepin 社区文档\n    desc: Deepin 应用开发技术分享、DTK开发经验等\n    author: Deepin\n    avatar: https://fastly.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/deepin.png\n  - img: https://ks3-cn-beijing.ksyuncs.com/vform-static/img/vform_website.png\n    link: http://www.vform666.com\n    name: VForm官网\n    desc: 低代码表单优选方案，拖拽式设计，一键生成源码\n    author: vformAdmin\n    avatar: https://www.vform666.com/vform-logo.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/xxx.7feub7n1y0g0.png\n    link: https://liteflow.yomahub.com\n    name: LiteFlow官网\n    desc: 轻量，快速，稳定可编排的组件式规则引擎\n    author: 铂赛东\n    avatar: https://portrait.gitee.com/uploads/avatars/user/367/1102362_bryan31_1578940308.png!avatar60\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/176866696-743faf44-4afd-4c12-9728-f982ea885836.2205nb3vf5mo.webp\n    link: https://easy-es.cn/\n    name: Easy-Es官网\n    desc: 傻瓜级ElasticSearch搜索引擎ORM框架\n    author: 老汉\n    avatar: https://iknow.hs.net/9fa0407f-30ff-4d8b-82da-a4990e41a04b.png\n\n\n\n# 知识库兼博客\n\nEvan's blog\n\nWeb前端技术博客，积跬步以至千里，致敬每个爱学习的你。\n\nEvan Xu\n\n麋鹿鲁哟\n\n运气交给锦鲤，\n你只管努力就好。 (●ˇ∀ˇ●)\n\n麋鹿鲁哟\n\nLingze's blog\n\n少侠, 别来无恙?\n\n令则\n\nsummer's blog\n\nDevops运维技术博客，分享运维技术\n\n夏苏文\n\nGocifer's DB & Blog\n\n一个中二少年，专注于计算机基础架构、云原生、网络、云计算的所学、所思、所行、所想。\n\ngocifer.jay\n\nDra-M\n\nJAVA后端\n\n莫小龙\n\n跟着老侯玩编程\n\n一个乐于编程知识分享的站点\n\n舞动的代码\n\n学习笔记\n\n平时的技术积累|分享交流技术心得|温故而知新\n\n爱做梦的奋斗青年\n\n研究院\n\n一万年太久，只争朝夕\n\nxwyang\n\nKimen's Blog\n\n全沾攻城狮\n\nKimen\n\nXLONG's blog\n\n蒸汽波、咖啡\n\nlixianglong3210\n\n偷吃了鸡蛋的梨\n\n捣鼓这,捣鼓那。\n\nAwrtiger\n\nXinghai's Blog\n\nWeb Security | Java Security\n\nXinghai\n\n二丫讲梵\n\n学习，记录，分享。(运维生活编程)\n\n二丫讲梵\n\n松松的一尺三分地\n\n记录工作和学习中的所得\n\nmasongsong\n\nYoung Kbt Blog\n\n记录学习Java, Web, 框架, 工具, 前端等相关知识, 记录生活和技术路程, 分享编程技巧。\n\nShip Liu\n\n断桥烟雨の学习笔记\n\n学习爱我，我爱学习～\n\nべ断桥烟雨ミ\n\n梵一的博客\n\n个人博客和知识分享\n\n梵一\n\n未读代码\n\nJava 开发知识库，分享原创文章\n\n程序猿阿朗\n\n松本松的博客儿\n\nWeb前端技术博客，积跬步以至千里。\n\nsimonzhangs\n\n远方的灯塔\n\n专注于服务端技术分享\n\nterwer\n\nSuya's blog\n\n个人博客，分享技术文章，学习笔记，植物相关知识等。\n\nSuya\n\nColorPanda\n\n日语中文英文学习网站\n\nColorPanda\n\nZihanio\n\nZihan的学习博客\n\nZihan\n\n不器小窝\n\n但知行好事,莫要问前程\n\n不器\n\nVdoing主题博客模板\n\nVdoing主题博客模板\n\neryajf\n\nJava essay\n\nJava散文知识库，Spring全家桶，SpringCloud全家桶，高可用高并发架构，面试等\n\nMr.Fire\n\n行百里er\n\nJava,个人技术博客,后端开发,技术架构,分布式技术,Spring Cloud Alibaba,Elasticsearch,Redis,算法,数据结构,Git\n\n行百里er\n\nCaptain\n\n学习技术，Java基础、面试知识点、项目经验总结和一些学习笔记\n\nCaptain\n\nconfig:\n    imgHeight: 140px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114033.png\n    link: https://xugaoyi.com/\n    name: Evan's blog\n    desc: Web前端技术博客，积跬步以至千里，致敬每个爱学习的你。\n    author: Evan Xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200727170555.jpg\n    link: https://miluluyo.github.io/vdoingBlog/\n    name: 麋鹿鲁哟\n    desc: 运气交给锦鲤，</br>你只管努力就好。  (●ˇ∀ˇ●)\n    author: 麋鹿鲁哟\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg\n  - img: https://i.loli.net/2020/07/26/BUCplirGIq9YTNA.png\n    link: https://lingze.xyz/\n    name: Lingze's blog\n    desc: 少侠, 别来无恙?\n    author: 令则\n    avatar: https://i.loli.net/2020/07/11/XhqR7Idnk5LD8bC.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20210730-000829@2x.6pjgy10flk00.png\n    link: https://www.xswsym.online/\n    name: summer's blog\n    desc: Devops运维技术博客，分享运维技术\n    author: 夏苏文\n    avatar: https://fastly.jsdelivr.net/gh/summerking1/image@main/tx.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20201110221457.png\n    link: https://gocifer.github.io\n    name: Gocifer's DB & Blog\n    desc: 一个中二少年，专注于计算机基础架构、云原生、网络、云计算的所学、所思、所行、所想。\n    author: gocifer.jay\n    avatar: https://gocifer.github.io/img/avatar/gocifer.png\n  - img: https://dra-m.com/images/thumbnail.png\n    link: https://dra-m.com/\n    name: Dra-M\n    desc: JAVA后端\n    author: 莫小龙\n    avatar: https://q1.qlogo.cn/g?b=qq&nk=975425198&s=640\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200905142134.png\n    link: https://www.coder163.com/\n    name: 跟着老侯玩编程\n    desc: 一个乐于编程知识分享的站点\n    author: 舞动的代码\n    avatar: https://www.coder163.com/img/qun.png\n\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20210119213748.jpg\n    link: https://haijunit.top/\n    name: 学习笔记\n    desc: 平时的技术积累|分享交流技术心得|温故而知新\n    author: 爱做梦的奋斗青年\n    avatar: https://haijunit.top/images/avatar.png\n  - img: https://fastly.jsdelivr.net/gh/yxw839841231/images/studying-icu/20210120110320.png\n    link: https://www.studying.icu/\n    name: 研究院\n    desc: 一万年太久，只争朝夕\n    author: xwyang\n    avatar: https://avatars1.githubusercontent.com/u/13757119?s=80&v=4\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20210704-230751@2x.3pw80u1fo6u0.png\n    link: https://blog.kimen.com.cn/\n    name: Kimen's Blog\n    desc: 全沾攻城狮\n    author: Kimen\n    avatar: https://avatars.githubusercontent.com/u/25970284?s=460&u=69b419ad6de33eaa1d6b73d7f065f710076d6c55&v=4\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20211101-165045-(1).4b4axinii160.png\n    link: https://lixianglong3210.gitee.io/xlong-vdoing/\n    name: XLONG's blog\n    desc: 蒸汽波、咖啡\n    author: lixianglong3210\n    avatar: http://www.lixianglong.cn/bg_store/img/avatar/default.jpg\n  - img: https://fastly.jsdelivr.net/gh/Awrtiger/mirrorfile/img/web.png\n    link: https://www.ool.cool/\n    name: 偷吃了鸡蛋的梨\n    desc: 捣鼓这,捣鼓那。\n    author: Awrtiger\n    avatar: https://fastly.jsdelivr.net/gh/Awrtiger/mirrorfile/img/avatar.jpg\n  - img: https://image-1302577725.cos.ap-beijing.myqcloud.com/img/20210402183053.png\n    link: https://f4de-bak.github.io/\n    name: Xinghai's Blog\n    desc: Web Security | Java Security\n    author: Xinghai\n    avatar: https://image-1302577725.cos.ap-beijing.myqcloud.com/img/20210328234543.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/eyjf.png\n    link: https://wiki.eryajf.net\n    name: 二丫讲梵\n    desc: 学习，记录，分享。(运维生活编程)\n    author: 二丫讲梵\n    avatar: https://wiki.eryajf.net/img/logo.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/ss.2tev477ruza0.png\n    link: https://masongsong.cn\n    name: 松松的一尺三分地\n    desc: 记录工作和学习中的所得\n    author: masongsong\n    avatar: https://fastly.jsdelivr.net/gh/MssText/learn@master/images/49203535.35emn5vryma0.png\n  - img: https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/user/20211218235045.png\n    link: https://notes.youngkbt.cn/\n    name: Young Kbt Blog\n    desc: 记录学习Java, Web, 框架, 工具, 前端等相关知识, 记录生活和技术路程, 分享编程技巧。\n    author: Ship Liu\n    avatar: https://fastly.jsdelivr.net/gh/Kele-Bingtang/static/user/avatar2.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/123.57gcfayi85k0.webp\n    link: https://blog.dragon1573.wang/\n    name: 断桥烟雨の学习笔记\n    desc: 学习爱我，我爱学习～\n    author: べ断桥烟雨ミ\n    avatar: https://avatars.githubusercontent.com/u/49941141\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/20220210094650.3q09d26tigc0.webp\n    link: https://chuck6.github.io/blog/\n    name: 梵一的博客\n    desc: 个人博客和知识分享\n    author: 梵一\n    avatar: https://chuck6.github.io/blog/img/paizhao.jpg\n  - img: https://fastly.jsdelivr.net/gh/niumoo/cdn-assets/2021/20220316145528.png\n    link: https://www.wdbyte.com\n    name: 未读代码\n    desc: Java 开发知识库，分享原创文章\n    author: 程序猿阿朗\n    avatar: https://avatars.githubusercontent.com/u/26371673?v=4\n  - img: https://fastly.jsdelivr.net/gh/simonzhangs/image-hosting@master/vue-plugin-example/blog.qg2buhe5h4g.webp\n    link: https://simonzhangs.github.io/\n    name: 松本松的博客儿\n    desc: Web前端技术博客，积跬步以至千里。\n    author: simonzhangs\n    avatar: https://fastly.jsdelivr.net/gh/simonzhangs/image-hosting@master/20220319/image.4x708q9wzse0.webp\n  - img: https://fastly.jsdelivr.net/gh/terwer/upload/img/image-20220422000045653.png\n    link: http://terwergreen.com\n    name: 远方的灯塔\n    desc: 专注于服务端技术分享\n    author: terwer\n    avatar: https://fastly.jsdelivr.net/gh/terwer/upload/img/photo.jpg\n  - img: https://fastly.jsdelivr.net/gh/nksuya/image_store@main/suyablog_home.5iou2ogjrm80.webp\n    link: https://suyaspace.com/\n    name: Suya's blog\n    desc: 个人博客，分享技术文章，学习笔记，植物相关知识等。\n    author: Suya\n    avatar: https://fastly.jsdelivr.net/gh/nksuya/image_store@master/tech/avatar.2tycyyc1ebr4.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store2@master/img/QQ20220526-224620@2x.44o82ibj9qq0.png\n    link: https://colorpanda.aifan.jp/\n    name: ColorPanda\n    desc: 日语中文英文学习网站\n    author: ColorPanda\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store2@master/img/image.3qr8m501tl20.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/asdf.23jsekfejla8.jpeg\n    link: https://inannan423.github.io/\n    name: Zihanio\n    desc: Zihan的学习博客\n    author: Zihan\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/xxx.67b3ygadagk0.jpeg\n  - img: https://user-images.githubusercontent.com/866409/175853573-28ded198-2348-4a82-8ddd-05088161e3fe.png\n    link: https://xingcxb.com\n    name: 不器小窝\n    desc: 但知行好事,莫要问前程\n    author: 不器\n    avatar: https://avatars.githubusercontent.com/u/866409?v=4\n  - img: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/QQ20220722-141037.22uk9ow7ary.png\n    link: https://eryajf.github.io/vdoing-template/\n    name: Vdoing主题博客模板\n    desc: Vdoing主题博客模板\n    author: eryajf\n    avatar: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/33259379.277tur21ir40.jpeg\n  - img: https://cdn.jsdelivr.net/gh/FireHH/github_img_repository/logo/微信截图_20220810164903.png\n    link: https://javaessay.cn/\n    name: Java essay\n    desc: Java散文知识库，Spring全家桶，SpringCloud全家桶，高可用高并发架构，面试等\n    author: Mr.Fire\n    avatar: https://cdn.jsdelivr.net/gh/FireHH/github_img_repository/logo/huge.jpg\n  - img: https://chendapeng.cn/images/about/blog_image.png\n    link: https://chendapeng.cn\n    name: 行百里er\n    desc: Java,个人技术博客,后端开发,技术架构,分布式技术,Spring Cloud Alibaba,Elasticsearch,Redis,算法,数据结构,Git\n    author: 行百里er\n    avatar: https://chendapeng.cn/images/about/avatar.png\n  - img: http://xyhwh-nav.cn/img/index.png\n    link: http://xyhwh-nav.cn\n    name: Captain\n    desc: 学习技术，Java基础、面试知识点、项目经验总结和一些学习笔记\n    author: Captain\n    avatar: http://xyhwh-nav.cn/img/logo.png\n\n\n\n# 知识库\n\n知识库演示\n\nVdoing主题演示-知识库\n\nEvan Xu\n\nX86软路由和NAS\n\n记录X86软路由和NAS的一些知识\n\nMonoLogueChi\n\n计算模拟学习笔记\n\n《能源环境材料计算模拟方法》学习笔记，涉及密度泛函理论、第一性原理等和Materials Studio、VASP等的使用。\n\nNorthword\n\nSingerw's Repository\n\n技术的风花雪月之事，有个存档的地方，对于复盘，回忆，都是一个极好的方谭。\n\nSingerw\n\nhippo4j\n\n🔥 动态线程池框架，附带监控报警功能，轻量级的运维监控平台\n\nAcmenlt\n\n地信遥感数据汇\n\n解决目前地信遥感方向数据混杂，资源难以寻找的问题，构建一个地信遥感学习、讨论、交流的平台。\n\n锐多宝\n\nDe7v\n\n专注于安卓领域的技术传播\n\nwresource\n\nHowToStartOpenSource\n\nGitHub开源项目维护协作指南\n\neryajf\n\nconfig:\n    imgHeight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114035.png\n    link: https://xugaoyi.github.io/vdoing-demo-repository/\n    name: 知识库演示\n    desc: Vdoing主题演示-知识库\n    author: Evan Xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20201219205536.jpg\n    link: https://wiki.router86.com/\n    name: X86软路由和NAS\n    desc: 记录X86软路由和NAS的一些知识\n    author: MonoLogueChi\n    avatar: https://blog.xxwhite.com/assets/img/avatar.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20201219205318.jpg\n    link: https://blog.northword.cn/dft-learning\n    name: 计算模拟学习笔记\n    desc: 《能源环境材料计算模拟方法》学习笔记，涉及密度泛函理论、第一性原理等和Materials Studio、VASP等的使用。\n    author: Northword\n    avatar: https://storage.live.com/items/28C1032A24A9C53B!25785?authkey=AHAx3GOYEKGqm8I\n  - img: https://singerwimg-1300001977.cos.accelerate.myqcloud.com/20211008/WccSrJ0s.png\n    link: https://repository.singerw.com\n    name: Singerw's Repository\n    desc: 技术的风花雪月之事，有个存档的地方，对于复盘，回忆，都是一个极好的方谭。\n    author: Singerw\n    avatar: https://singerwimg-1300001977.cos.accelerate.myqcloud.com/2021/09/20/76f29482ffc9b.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/QQ20220113-114927.5oha7j06c580.webp\n    link: https://hippox.cn\n    name: hippo4j\n    desc: 🔥 动态线程池框架，附带监控报警功能，轻量级的运维监控平台\n    author: Acmenlt\n    avatar: https://hippox.cn/img/web.png\n  - img: https://pics.landcover100.com/pics/624e63f4c82b8.png\n    link: https://www.gisrsdata.com\n    name: 地信遥感数据汇\n    desc: 解决目前地信遥感方向数据混杂，资源难以寻找的问题，构建一个地信遥感学习、讨论、交流的平台。\n    author: 锐多宝\n    avatar: https://pics.landcover100.com/pics/624e6469cbb8a.jpg\n  - img: https://img.de7v.com/img/site-pic.jpg\n    link: https://www.de7v.com\n    name: De7v\n    desc: 专注于安卓领域的技术传播\n    author: wresource\n    avatar: https://img.de7v.com/img/wresource.png\n  - img: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/11123.1aljpnjyr074.png\n    link: https://eryajf.github.io/HowToStartOpenSource/\n    name: HowToStartOpenSource\n    desc: GitHub开源项目维护协作指南\n    author: eryajf\n    avatar: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/33259379.277tur21ir40.jpeg\n\n\n\n# 社区类\n\n奕维投资教程站\n\n股票投资\n\n奕维\n\nconfig:\n    imgHeight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200921220111.png\n    link: https://course.yiwiz.com/\n    name: 奕维投资教程站\n    desc: 股票投资\n    author: 奕维\n    avatar: https://course.yiwiz.com/img/logo.png\n\n\n\n# 博客类\n\nVdoing's blog\n\nVdoing主题演示-博客\n\nEvan Xu\n\nTeler的日常\n\n好好学习，天天向上\n\nTeler\n\nxustudyxu's Blog\n\n一起学习编程!\n\nxustudyxu\n\nconfig:\n    imgHeight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114034.png\n    link: https://xugaoyi.github.io/vdoing-demo-blog/\n    name: Vdoing's blog\n    desc: Vdoing主题演示-博客\n    author: Evan Xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://s4.ax1x.com/2022/02/25/bAjINF.png\n    link: https://fangweilong.github.io/\n    name: Teler的日常\n    desc: 好好学习，天天向上\n    author: Teler\n    avatar: https://s4.ax1x.com/2022/02/25/bAva8J.jpg\n  - img: https://user-images.githubusercontent.com/53399655/163007243-1b99b96b-cac3-49ca-9950-03a1e877a6d8.png\n    link: https://xustudyxu.github.io/\n    name: xustudyxu's Blog\n    desc: 一起学习编程!\n    author: xustudyxu\n    avatar: https://xustudyxu.github.io/img/01.png\n\n\n\n# 文档类\n\nvdoing(本站)\n\n🚀一款简洁高效的VuePress 知识管理&博客 主题\n\nEvan Xu\n\nJA Plus 开发者文档\n\n一款开源的登录认证中间件\n\nyadong,zhang\n\nDokiMod 开发文档\n\n为 DDLC Mod 开发提供的完善文档\n\nimgradeone\n\nJeeSite 在线文档\n\nJeeSite 快速开发平台 - 在线文档\n\nThinkGem\n\nCleanPHP\n\nCleanPHP开发者文档\n\nankio\n\nJpom\n\n简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件\n\n不忘初心\n\n物美智能\n\n物美智能开源物联网平台，简单易用，可用于搭建物联网平台以及二次开发和学习。适用于智能家居、智慧办公、智慧社区、农业监测、水利监测、工业控制等。\n\n随遇而安 / kerwincui\n\ntrace-recorder官网\n\n简单的， 可伸缩的， 高性能的跟踪记录仪\n\n蔡旺\n\nconfig:\n    imgHeight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114036.png\n    link: https://xugaoyi.github.io/vuepress-theme-vdoing-doc/\n    name: vdoing(本站)\n    desc: 🚀一款简洁高效的VuePress 知识管理&博客 主题\n    author: Evan Xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/QQ20210925-124836@2x (1).6ogvf85maog0.png\n    link: https://justauth.plus/\n    name: JA Plus 开发者文档\n    desc: 一款开源的登录认证中间件\n    author: yadong,zhang\n    avatar: https://portrait.gitee.com/uploads/avatars/user/261/784199_yadong.zhang_1578932767.png!avatar200\n  - img: https://assets.imgradeone.com/docsdokimod-pv.png\n    link: https://docs.dokimod.cn\n    name: DokiMod 开发文档\n    desc: 为 DDLC Mod 开发提供的完善文档\n    author: imgradeone\n    avatar: https://docs.dokimod.cn/logo_128x128.png\n  # - img: http://yogoyun.oss-cn-beijing.aliyuncs.com/help/public/other/20200630125515.png\n  #   link: http://help.yogoyun.com/\n  #   name: 柚果云服务\n  #   desc: 智能商业应用程序服务商。\n  #   author: 柚果云服务\n  #   avatar: http://yogoyun.oss-cn-beijing.aliyuncs.com/admin/console/logo.png\n  - img: https://jeesite.com/docs/img/docs.png\n    link: http://docs.jeesite.com\n    name: JeeSite 在线文档\n    desc: JeeSite 快速开发平台 - 在线文档\n    author: ThinkGem\n    avatar: https://jeesite.com/docs/img/logo.png\n  - img: https://fastly.jsdelivr.net/gh/dreamncn/picBed@master/uPic/2022_05_12_20_40_04_1652359204_1652359204449_9mVkaR.png\n    link: https://cleanphp.ankio.net/\n    name: CleanPHP\n    desc: CleanPHP开发者文档\n    author: ankio\n    avatar: https://fastly.jsdelivr.net/gh/dreamncn/picBed@master/uPic/2022_04_04_19_48_51_1649072931_1649072931346_h4BGpQ.jpg\n  - img: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/28284d.56bkx9qvhc00.webp\n    link: https://jpom-docs.keepbx.cn/\n    name: Jpom\n    desc: 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件\n    author: 不忘初心\n    avatar: https://jpom-docs.keepbx.cn/images/jpom_logo.png\n  - img: https://wumei.live/kerwincui/document/raw/branch/master/images/img.png\n    link: https://wumei.live/doc/\n    name: 物美智能\n    desc: 物美智能开源物联网平台，简单易用，可用于搭建物联网平台以及二次开发和学习。适用于智能家居、智慧办公、智慧社区、农业监测、水利监测、工业控制等。\n    author: 随遇而安 / kerwincui\n    avatar: https://portrait.gitee.com/uploads/avatars/user/611/1834441_kerwincui_1581523162.png!avatar200\n  - img: https://pic.imgdb.cn/item/637c92ef16f2c2beb11293c7.jpg\n    link: https://trace-recorder.xusc.cn\n    name: trace-recorder官网\n    desc: 简单的， 可伸缩的， 高性能的跟踪记录仪\n    author: 蔡旺\n    avatar: https://pic.imgdb.cn/item/637c933516f2c2beb112ed43.jpg\n\n\n\n\n\n\n\n# 申请加入案例\n\n你想在这个页面展示你的站点吗？\n\n欢迎使用Vdoing主题的小伙伴到 这里 留下你的站点信息，你的站点将有机会出现在这个页面里~",normalizedContent:"# 特别用户\n\nmybatis-plus官网\n\n🚀为简化开发而生\n\n青苗\n\ndeepin 社区文档\n\ndeepin 应用开发技术分享、dtk开发经验等\n\ndeepin\n\nvform官网\n\n低代码表单优选方案，拖拽式设计，一键生成源码\n\nvformadmin\n\nliteflow官网\n\n轻量，快速，稳定可编排的组件式规则引擎\n\n铂赛东\n\neasy-es官网\n\n傻瓜级elasticsearch搜索引擎orm框架\n\n老汉\n\nconfig:\n    imgheight: 140px\n\ndata:\n  # - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20210729-233554@2x.22bdqeiem2sg.png\n  #   link: https://docs.openharmony.cn/pages/000000/\n  #   name: openharmony\n  #   desc: 开放原子开源基金会\n  #   author: openharmony\n  #   avatar: https://www.openharmony.cn/static/img/core-card-item2.a72a0d10.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20211215-144040.hgt2875r2zc.webp\n    link: https://baomidou.com/\n    name: mybatis-plus官网\n    desc: 🚀为简化开发而生\n    author: 青苗\n    avatar: https://baomidou.com/img/logo.svg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20210729-235804@2x.75e9lfd65t40.png\n    link: https://docs.deepin.org\n    name: deepin 社区文档\n    desc: deepin 应用开发技术分享、dtk开发经验等\n    author: deepin\n    avatar: https://fastly.jsdelivr.net/gh/xmuli/xmulipic@pic/2021/deepin.png\n  - img: https://ks3-cn-beijing.ksyuncs.com/vform-static/img/vform_website.png\n    link: http://www.vform666.com\n    name: vform官网\n    desc: 低代码表单优选方案，拖拽式设计，一键生成源码\n    author: vformadmin\n    avatar: https://www.vform666.com/vform-logo.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/xxx.7feub7n1y0g0.png\n    link: https://liteflow.yomahub.com\n    name: liteflow官网\n    desc: 轻量，快速，稳定可编排的组件式规则引擎\n    author: 铂赛东\n    avatar: https://portrait.gitee.com/uploads/avatars/user/367/1102362_bryan31_1578940308.png!avatar60\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/176866696-743faf44-4afd-4c12-9728-f982ea885836.2205nb3vf5mo.webp\n    link: https://easy-es.cn/\n    name: easy-es官网\n    desc: 傻瓜级elasticsearch搜索引擎orm框架\n    author: 老汉\n    avatar: https://iknow.hs.net/9fa0407f-30ff-4d8b-82da-a4990e41a04b.png\n\n\n\n# 知识库兼博客\n\nevan's blog\n\nweb前端技术博客，积跬步以至千里，致敬每个爱学习的你。\n\nevan xu\n\n麋鹿鲁哟\n\n运气交给锦鲤，\n你只管努力就好。 (●ˇ∀ˇ●)\n\n麋鹿鲁哟\n\nlingze's blog\n\n少侠, 别来无恙?\n\n令则\n\nsummer's blog\n\ndevops运维技术博客，分享运维技术\n\n夏苏文\n\ngocifer's db & blog\n\n一个中二少年，专注于计算机基础架构、云原生、网络、云计算的所学、所思、所行、所想。\n\ngocifer.jay\n\ndra-m\n\njava后端\n\n莫小龙\n\n跟着老侯玩编程\n\n一个乐于编程知识分享的站点\n\n舞动的代码\n\n学习笔记\n\n平时的技术积累|分享交流技术心得|温故而知新\n\n爱做梦的奋斗青年\n\n研究院\n\n一万年太久，只争朝夕\n\nxwyang\n\nkimen's blog\n\n全沾攻城狮\n\nkimen\n\nxlong's blog\n\n蒸汽波、咖啡\n\nlixianglong3210\n\n偷吃了鸡蛋的梨\n\n捣鼓这,捣鼓那。\n\nawrtiger\n\nxinghai's blog\n\nweb security | java security\n\nxinghai\n\n二丫讲梵\n\n学习，记录，分享。(运维生活编程)\n\n二丫讲梵\n\n松松的一尺三分地\n\n记录工作和学习中的所得\n\nmasongsong\n\nyoung kbt blog\n\n记录学习java, web, 框架, 工具, 前端等相关知识, 记录生活和技术路程, 分享编程技巧。\n\nship liu\n\n断桥烟雨の学习笔记\n\n学习爱我，我爱学习～\n\nべ断桥烟雨ミ\n\n梵一的博客\n\n个人博客和知识分享\n\n梵一\n\n未读代码\n\njava 开发知识库，分享原创文章\n\n程序猿阿朗\n\n松本松的博客儿\n\nweb前端技术博客，积跬步以至千里。\n\nsimonzhangs\n\n远方的灯塔\n\n专注于服务端技术分享\n\nterwer\n\nsuya's blog\n\n个人博客，分享技术文章，学习笔记，植物相关知识等。\n\nsuya\n\ncolorpanda\n\n日语中文英文学习网站\n\ncolorpanda\n\nzihanio\n\nzihan的学习博客\n\nzihan\n\n不器小窝\n\n但知行好事,莫要问前程\n\n不器\n\nvdoing主题博客模板\n\nvdoing主题博客模板\n\neryajf\n\njava essay\n\njava散文知识库，spring全家桶，springcloud全家桶，高可用高并发架构，面试等\n\nmr.fire\n\n行百里er\n\njava,个人技术博客,后端开发,技术架构,分布式技术,spring cloud alibaba,elasticsearch,redis,算法,数据结构,git\n\n行百里er\n\ncaptain\n\n学习技术，java基础、面试知识点、项目经验总结和一些学习笔记\n\ncaptain\n\nconfig:\n    imgheight: 140px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114033.png\n    link: https://xugaoyi.com/\n    name: evan's blog\n    desc: web前端技术博客，积跬步以至千里，致敬每个爱学习的你。\n    author: evan xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200727170555.jpg\n    link: https://miluluyo.github.io/vdoingblog/\n    name: 麋鹿鲁哟\n    desc: 运气交给锦鲤，</br>你只管努力就好。  (●ˇ∀ˇ●)\n    author: 麋鹿鲁哟\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200122153807.jpg\n  - img: https://i.loli.net/2020/07/26/bucplirgiq9ytna.png\n    link: https://lingze.xyz/\n    name: lingze's blog\n    desc: 少侠, 别来无恙?\n    author: 令则\n    avatar: https://i.loli.net/2020/07/11/xhqr7idnk5ld8bc.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20210730-000829@2x.6pjgy10flk00.png\n    link: https://www.xswsym.online/\n    name: summer's blog\n    desc: devops运维技术博客，分享运维技术\n    author: 夏苏文\n    avatar: https://fastly.jsdelivr.net/gh/summerking1/image@main/tx.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20201110221457.png\n    link: https://gocifer.github.io\n    name: gocifer's db & blog\n    desc: 一个中二少年，专注于计算机基础架构、云原生、网络、云计算的所学、所思、所行、所想。\n    author: gocifer.jay\n    avatar: https://gocifer.github.io/img/avatar/gocifer.png\n  - img: https://dra-m.com/images/thumbnail.png\n    link: https://dra-m.com/\n    name: dra-m\n    desc: java后端\n    author: 莫小龙\n    avatar: https://q1.qlogo.cn/g?b=qq&nk=975425198&s=640\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200905142134.png\n    link: https://www.coder163.com/\n    name: 跟着老侯玩编程\n    desc: 一个乐于编程知识分享的站点\n    author: 舞动的代码\n    avatar: https://www.coder163.com/img/qun.png\n\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20210119213748.jpg\n    link: https://haijunit.top/\n    name: 学习笔记\n    desc: 平时的技术积累|分享交流技术心得|温故而知新\n    author: 爱做梦的奋斗青年\n    avatar: https://haijunit.top/images/avatar.png\n  - img: https://fastly.jsdelivr.net/gh/yxw839841231/images/studying-icu/20210120110320.png\n    link: https://www.studying.icu/\n    name: 研究院\n    desc: 一万年太久，只争朝夕\n    author: xwyang\n    avatar: https://avatars1.githubusercontent.com/u/13757119?s=80&v=4\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20210704-230751@2x.3pw80u1fo6u0.png\n    link: https://blog.kimen.com.cn/\n    name: kimen's blog\n    desc: 全沾攻城狮\n    author: kimen\n    avatar: https://avatars.githubusercontent.com/u/25970284?s=460&u=69b419ad6de33eaa1d6b73d7f065f710076d6c55&v=4\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20211101-165045-(1).4b4axinii160.png\n    link: https://lixianglong3210.gitee.io/xlong-vdoing/\n    name: xlong's blog\n    desc: 蒸汽波、咖啡\n    author: lixianglong3210\n    avatar: http://www.lixianglong.cn/bg_store/img/avatar/default.jpg\n  - img: https://fastly.jsdelivr.net/gh/awrtiger/mirrorfile/img/web.png\n    link: https://www.ool.cool/\n    name: 偷吃了鸡蛋的梨\n    desc: 捣鼓这,捣鼓那。\n    author: awrtiger\n    avatar: https://fastly.jsdelivr.net/gh/awrtiger/mirrorfile/img/avatar.jpg\n  - img: https://image-1302577725.cos.ap-beijing.myqcloud.com/img/20210402183053.png\n    link: https://f4de-bak.github.io/\n    name: xinghai's blog\n    desc: web security | java security\n    author: xinghai\n    avatar: https://image-1302577725.cos.ap-beijing.myqcloud.com/img/20210328234543.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/eyjf.png\n    link: https://wiki.eryajf.net\n    name: 二丫讲梵\n    desc: 学习，记录，分享。(运维生活编程)\n    author: 二丫讲梵\n    avatar: https://wiki.eryajf.net/img/logo.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/ss.2tev477ruza0.png\n    link: https://masongsong.cn\n    name: 松松的一尺三分地\n    desc: 记录工作和学习中的所得\n    author: masongsong\n    avatar: https://fastly.jsdelivr.net/gh/msstext/learn@master/images/49203535.35emn5vryma0.png\n  - img: https://fastly.jsdelivr.net/gh/kele-bingtang/static/user/20211218235045.png\n    link: https://notes.youngkbt.cn/\n    name: young kbt blog\n    desc: 记录学习java, web, 框架, 工具, 前端等相关知识, 记录生活和技术路程, 分享编程技巧。\n    author: ship liu\n    avatar: https://fastly.jsdelivr.net/gh/kele-bingtang/static/user/avatar2.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/123.57gcfayi85k0.webp\n    link: https://blog.dragon1573.wang/\n    name: 断桥烟雨の学习笔记\n    desc: 学习爱我，我爱学习～\n    author: べ断桥烟雨ミ\n    avatar: https://avatars.githubusercontent.com/u/49941141\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/20220210094650.3q09d26tigc0.webp\n    link: https://chuck6.github.io/blog/\n    name: 梵一的博客\n    desc: 个人博客和知识分享\n    author: 梵一\n    avatar: https://chuck6.github.io/blog/img/paizhao.jpg\n  - img: https://fastly.jsdelivr.net/gh/niumoo/cdn-assets/2021/20220316145528.png\n    link: https://www.wdbyte.com\n    name: 未读代码\n    desc: java 开发知识库，分享原创文章\n    author: 程序猿阿朗\n    avatar: https://avatars.githubusercontent.com/u/26371673?v=4\n  - img: https://fastly.jsdelivr.net/gh/simonzhangs/image-hosting@master/vue-plugin-example/blog.qg2buhe5h4g.webp\n    link: https://simonzhangs.github.io/\n    name: 松本松的博客儿\n    desc: web前端技术博客，积跬步以至千里。\n    author: simonzhangs\n    avatar: https://fastly.jsdelivr.net/gh/simonzhangs/image-hosting@master/20220319/image.4x708q9wzse0.webp\n  - img: https://fastly.jsdelivr.net/gh/terwer/upload/img/image-20220422000045653.png\n    link: http://terwergreen.com\n    name: 远方的灯塔\n    desc: 专注于服务端技术分享\n    author: terwer\n    avatar: https://fastly.jsdelivr.net/gh/terwer/upload/img/photo.jpg\n  - img: https://fastly.jsdelivr.net/gh/nksuya/image_store@main/suyablog_home.5iou2ogjrm80.webp\n    link: https://suyaspace.com/\n    name: suya's blog\n    desc: 个人博客，分享技术文章，学习笔记，植物相关知识等。\n    author: suya\n    avatar: https://fastly.jsdelivr.net/gh/nksuya/image_store@master/tech/avatar.2tycyyc1ebr4.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store2@master/img/qq20220526-224620@2x.44o82ibj9qq0.png\n    link: https://colorpanda.aifan.jp/\n    name: colorpanda\n    desc: 日语中文英文学习网站\n    author: colorpanda\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store2@master/img/image.3qr8m501tl20.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/asdf.23jsekfejla8.jpeg\n    link: https://inannan423.github.io/\n    name: zihanio\n    desc: zihan的学习博客\n    author: zihan\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/blog-gitalk-comment@master/img/xxx.67b3ygadagk0.jpeg\n  - img: https://user-images.githubusercontent.com/866409/175853573-28ded198-2348-4a82-8ddd-05088161e3fe.png\n    link: https://xingcxb.com\n    name: 不器小窝\n    desc: 但知行好事,莫要问前程\n    author: 不器\n    avatar: https://avatars.githubusercontent.com/u/866409?v=4\n  - img: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/qq20220722-141037.22uk9ow7ary.png\n    link: https://eryajf.github.io/vdoing-template/\n    name: vdoing主题博客模板\n    desc: vdoing主题博客模板\n    author: eryajf\n    avatar: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/33259379.277tur21ir40.jpeg\n  - img: https://cdn.jsdelivr.net/gh/firehh/github_img_repository/logo/微信截图_20220810164903.png\n    link: https://javaessay.cn/\n    name: java essay\n    desc: java散文知识库，spring全家桶，springcloud全家桶，高可用高并发架构，面试等\n    author: mr.fire\n    avatar: https://cdn.jsdelivr.net/gh/firehh/github_img_repository/logo/huge.jpg\n  - img: https://chendapeng.cn/images/about/blog_image.png\n    link: https://chendapeng.cn\n    name: 行百里er\n    desc: java,个人技术博客,后端开发,技术架构,分布式技术,spring cloud alibaba,elasticsearch,redis,算法,数据结构,git\n    author: 行百里er\n    avatar: https://chendapeng.cn/images/about/avatar.png\n  - img: http://xyhwh-nav.cn/img/index.png\n    link: http://xyhwh-nav.cn\n    name: captain\n    desc: 学习技术，java基础、面试知识点、项目经验总结和一些学习笔记\n    author: captain\n    avatar: http://xyhwh-nav.cn/img/logo.png\n\n\n\n# 知识库\n\n知识库演示\n\nvdoing主题演示-知识库\n\nevan xu\n\nx86软路由和nas\n\n记录x86软路由和nas的一些知识\n\nmonologuechi\n\n计算模拟学习笔记\n\n《能源环境材料计算模拟方法》学习笔记，涉及密度泛函理论、第一性原理等和materials studio、vasp等的使用。\n\nnorthword\n\nsingerw's repository\n\n技术的风花雪月之事，有个存档的地方，对于复盘，回忆，都是一个极好的方谭。\n\nsingerw\n\nhippo4j\n\n🔥 动态线程池框架，附带监控报警功能，轻量级的运维监控平台\n\nacmenlt\n\n地信遥感数据汇\n\n解决目前地信遥感方向数据混杂，资源难以寻找的问题，构建一个地信遥感学习、讨论、交流的平台。\n\n锐多宝\n\nde7v\n\n专注于安卓领域的技术传播\n\nwresource\n\nhowtostartopensource\n\ngithub开源项目维护协作指南\n\neryajf\n\nconfig:\n    imgheight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114035.png\n    link: https://xugaoyi.github.io/vdoing-demo-repository/\n    name: 知识库演示\n    desc: vdoing主题演示-知识库\n    author: evan xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20201219205536.jpg\n    link: https://wiki.router86.com/\n    name: x86软路由和nas\n    desc: 记录x86软路由和nas的一些知识\n    author: monologuechi\n    avatar: https://blog.xxwhite.com/assets/img/avatar.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20201219205318.jpg\n    link: https://blog.northword.cn/dft-learning\n    name: 计算模拟学习笔记\n    desc: 《能源环境材料计算模拟方法》学习笔记，涉及密度泛函理论、第一性原理等和materials studio、vasp等的使用。\n    author: northword\n    avatar: https://storage.live.com/items/28c1032a24a9c53b!25785?authkey=ahax3goyekgqm8i\n  - img: https://singerwimg-1300001977.cos.accelerate.myqcloud.com/20211008/wccsrj0s.png\n    link: https://repository.singerw.com\n    name: singerw's repository\n    desc: 技术的风花雪月之事，有个存档的地方，对于复盘，回忆，都是一个极好的方谭。\n    author: singerw\n    avatar: https://singerwimg-1300001977.cos.accelerate.myqcloud.com/2021/09/20/76f29482ffc9b.png\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/qq20220113-114927.5oha7j06c580.webp\n    link: https://hippox.cn\n    name: hippo4j\n    desc: 🔥 动态线程池框架，附带监控报警功能，轻量级的运维监控平台\n    author: acmenlt\n    avatar: https://hippox.cn/img/web.png\n  - img: https://pics.landcover100.com/pics/624e63f4c82b8.png\n    link: https://www.gisrsdata.com\n    name: 地信遥感数据汇\n    desc: 解决目前地信遥感方向数据混杂，资源难以寻找的问题，构建一个地信遥感学习、讨论、交流的平台。\n    author: 锐多宝\n    avatar: https://pics.landcover100.com/pics/624e6469cbb8a.jpg\n  - img: https://img.de7v.com/img/site-pic.jpg\n    link: https://www.de7v.com\n    name: de7v\n    desc: 专注于安卓领域的技术传播\n    author: wresource\n    avatar: https://img.de7v.com/img/wresource.png\n  - img: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/11123.1aljpnjyr074.png\n    link: https://eryajf.github.io/howtostartopensource/\n    name: howtostartopensource\n    desc: github开源项目维护协作指南\n    author: eryajf\n    avatar: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/33259379.277tur21ir40.jpeg\n\n\n\n# 社区类\n\n奕维投资教程站\n\n股票投资\n\n奕维\n\nconfig:\n    imgheight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200921220111.png\n    link: https://course.yiwiz.com/\n    name: 奕维投资教程站\n    desc: 股票投资\n    author: 奕维\n    avatar: https://course.yiwiz.com/img/logo.png\n\n\n\n# 博客类\n\nvdoing's blog\n\nvdoing主题演示-博客\n\nevan xu\n\nteler的日常\n\n好好学习，天天向上\n\nteler\n\nxustudyxu's blog\n\n一起学习编程!\n\nxustudyxu\n\nconfig:\n    imgheight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114034.png\n    link: https://xugaoyi.github.io/vdoing-demo-blog/\n    name: vdoing's blog\n    desc: vdoing主题演示-博客\n    author: evan xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://s4.ax1x.com/2022/02/25/bajinf.png\n    link: https://fangweilong.github.io/\n    name: teler的日常\n    desc: 好好学习，天天向上\n    author: teler\n    avatar: https://s4.ax1x.com/2022/02/25/bava8j.jpg\n  - img: https://user-images.githubusercontent.com/53399655/163007243-1b99b96b-cac3-49ca-9950-03a1e877a6d8.png\n    link: https://xustudyxu.github.io/\n    name: xustudyxu's blog\n    desc: 一起学习编程!\n    author: xustudyxu\n    avatar: https://xustudyxu.github.io/img/01.png\n\n\n\n# 文档类\n\nvdoing(本站)\n\n🚀一款简洁高效的vuepress 知识管理&博客 主题\n\nevan xu\n\nja plus 开发者文档\n\n一款开源的登录认证中间件\n\nyadong,zhang\n\ndokimod 开发文档\n\n为 ddlc mod 开发提供的完善文档\n\nimgradeone\n\njeesite 在线文档\n\njeesite 快速开发平台 - 在线文档\n\nthinkgem\n\ncleanphp\n\ncleanphp开发者文档\n\nankio\n\njpom\n\n简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件\n\n不忘初心\n\n物美智能\n\n物美智能开源物联网平台，简单易用，可用于搭建物联网平台以及二次开发和学习。适用于智能家居、智慧办公、智慧社区、农业监测、水利监测、工业控制等。\n\n随遇而安 / kerwincui\n\ntrace-recorder官网\n\n简单的， 可伸缩的， 高性能的跟踪记录仪\n\n蔡旺\n\nconfig:\n    imgheight: 150px\n\ndata:\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200530114036.png\n    link: https://xugaoyi.github.io/vuepress-theme-vdoing-doc/\n    name: vdoing(本站)\n    desc: 🚀一款简洁高效的vuepress 知识管理&博客 主题\n    author: evan xu\n    avatar: https://fastly.jsdelivr.net/gh/xugaoyi/image_store/blog/20200103123203.jpg\n  - img: https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/qq20210925-124836@2x (1).6ogvf85maog0.png\n    link: https://justauth.plus/\n    name: ja plus 开发者文档\n    desc: 一款开源的登录认证中间件\n    author: yadong,zhang\n    avatar: https://portrait.gitee.com/uploads/avatars/user/261/784199_yadong.zhang_1578932767.png!avatar200\n  - img: https://assets.imgradeone.com/docsdokimod-pv.png\n    link: https://docs.dokimod.cn\n    name: dokimod 开发文档\n    desc: 为 ddlc mod 开发提供的完善文档\n    author: imgradeone\n    avatar: https://docs.dokimod.cn/logo_128x128.png\n  # - img: http://yogoyun.oss-cn-beijing.aliyuncs.com/help/public/other/20200630125515.png\n  #   link: http://help.yogoyun.com/\n  #   name: 柚果云服务\n  #   desc: 智能商业应用程序服务商。\n  #   author: 柚果云服务\n  #   avatar: http://yogoyun.oss-cn-beijing.aliyuncs.com/admin/console/logo.png\n  - img: https://jeesite.com/docs/img/docs.png\n    link: http://docs.jeesite.com\n    name: jeesite 在线文档\n    desc: jeesite 快速开发平台 - 在线文档\n    author: thinkgem\n    avatar: https://jeesite.com/docs/img/logo.png\n  - img: https://fastly.jsdelivr.net/gh/dreamncn/picbed@master/upic/2022_05_12_20_40_04_1652359204_1652359204449_9mvkar.png\n    link: https://cleanphp.ankio.net/\n    name: cleanphp\n    desc: cleanphp开发者文档\n    author: ankio\n    avatar: https://fastly.jsdelivr.net/gh/dreamncn/picbed@master/upic/2022_04_04_19_48_51_1649072931_1649072931346_h4bgpq.jpg\n  - img: https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/28284d.56bkx9qvhc00.webp\n    link: https://jpom-docs.keepbx.cn/\n    name: jpom\n    desc: 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件\n    author: 不忘初心\n    avatar: https://jpom-docs.keepbx.cn/images/jpom_logo.png\n  - img: https://wumei.live/kerwincui/document/raw/branch/master/images/img.png\n    link: https://wumei.live/doc/\n    name: 物美智能\n    desc: 物美智能开源物联网平台，简单易用，可用于搭建物联网平台以及二次开发和学习。适用于智能家居、智慧办公、智慧社区、农业监测、水利监测、工业控制等。\n    author: 随遇而安 / kerwincui\n    avatar: https://portrait.gitee.com/uploads/avatars/user/611/1834441_kerwincui_1581523162.png!avatar200\n  - img: https://pic.imgdb.cn/item/637c92ef16f2c2beb11293c7.jpg\n    link: https://trace-recorder.xusc.cn\n    name: trace-recorder官网\n    desc: 简单的， 可伸缩的， 高性能的跟踪记录仪\n    author: 蔡旺\n    avatar: https://pic.imgdb.cn/item/637c933516f2c2beb112ed43.jpg\n\n\n\n\n\n\n\n# 申请加入案例\n\n你想在这个页面展示你的站点吗？\n\n欢迎使用vdoing主题的小伙伴到 这里 留下你的站点信息，你的站点将有机会出现在这个页面里~",charsets:{cjk:!0}},{title:"问答",frontmatter:{title:"问答",date:"2020-05-25T12:01:52.000Z",permalink:"/pages/9cc27d",article:!1},regularPath:"/05.test12345/01.%E9%97%AE%E7%AD%94.html",relativePath:"05.test12345/01.问答.md",key:"v-255a8306",path:"/pages/9cc27d/",headers:[{level:2,title:"我是一个小白，想使用这个主题搭建博客（知识库）需要做哪些工作？",slug:"我是一个小白-想使用这个主题搭建博客-知识库-需要做哪些工作",normalizedTitle:"我是一个小白，想使用这个主题搭建博客（知识库）需要做哪些工作？",charIndex:2},{level:2,title:"clone 项目后需要修改哪些地方？",slug:"clone-项目后需要修改哪些地方",normalizedTitle:"clone 项目后需要修改哪些地方？",charIndex:220},{level:2,title:"可减少项目冗余的地方有哪些？",slug:"可减少项目冗余的地方有哪些",normalizedTitle:"可减少项目冗余的地方有哪些？",charIndex:371},{level:2,title:"我可以不使用永久链接吗？",slug:"我可以不使用永久链接吗",normalizedTitle:"我可以不使用永久链接吗？",charIndex:533},{level:2,title:"是否支持国际化？",slug:"是否支持国际化",normalizedTitle:"是否支持国际化？",charIndex:756},{level:2,title:"打包后在本地预览怎么没有样式？",slug:"打包后在本地预览怎么没有样式",normalizedTitle:"打包后在本地预览怎么没有样式？",charIndex:834},{level:2,title:"在build时出现错误，但是在dev时是正常的",slug:"在build时出现错误-但是在dev时是正常的",normalizedTitle:"在build时出现错误，但是在dev时是正常的",charIndex:974}],headersStr:"我是一个小白，想使用这个主题搭建博客（知识库）需要做哪些工作？ clone 项目后需要修改哪些地方？ 可减少项目冗余的地方有哪些？ 我可以不使用永久链接吗？ 是否支持国际化？ 打包后在本地预览怎么没有样式？ 在build时出现错误，但是在dev时是正常的",content:"# 我是一个小白，想使用这个主题搭建博客（知识库）需要做哪些工作？\n\n答：使用这个主题前需要你掌握下面这些知识：\n\n * 掌握 markdown、yaml 语法\n * 会使用终端（命令行），会使用 git\n * 会阅读文档、搜索文档\n * 会VuePress的基本使用和默认主题的基本配置\n\n以上知识都掌握之后，再查看本文档。你也可以运行我的主题项目，一边看代码，一边查看文档。主题项目内写了比较多的注释代码，方便你的学习和使用。\n\n\n# clone 项目后需要修改哪些地方？\n\n答：大致的修改流程是这样的：\n\n 1. 首先让项目正常的跑起来\n 2. 根据需求构建和替换 docs/<结构化目录> 的目录及内容\n 3. 根据需求修改 config.js 配置\n 4. 修改 首页配置\n 5. 修改 主题颜色和样式（如果你想修改的话）\n\n\n# 可减少项目冗余的地方有哪些？\n\n答：在完成项目的搭建之后，对于没有使用到的一些文件和代码，可以看情况删减，可删减的地方有:\n\n * 卸载config.js中未使用的插件依赖包\n * 参照 目录结构，删除未使用到的 可选 文件\n * 删除.vusepress目录内未使用到的 可选 文件\n * 删除各文件内的注释代码\n\n\n# 我可以不使用永久链接吗？\n\n答：不可以。当你没有在front matter指定永久链接时，主题会自动生成永久链接到front matter，你可以修改永久链接的值。 使用永久链接是出于以下几点考虑:\n\n 1. 在config.js配置nav时使用永久链接，就不会因为文件的路径或名称的改变而改变。\n 2. 对于博客而言，当别人收藏了你的文章，在未来的时间里都可以通过永久链接来访问到。\n 3. 主题中的目录页需要通过永久链接来访问文章。\n\n\n# 是否支持国际化？\n\n答：暂不支持。目前的国际化方案，只能是使用不同项目来处理，比如：一个项目是中文，一个项目是英文，在导航中添加中英文站点的链接。\n\n\n# 打包后在本地预览怎么没有样式？\n\n答：因vuepress打包后的CSS、JS等资源链接采用绝对路径引入，在本地预览时的引入链接是不正确的，部署到服务器即可正常引入和预览。如果你确实需要本地预览，可以使用vuepress-plugin-serve插件，使用方法看相应文档。\n\n\n# 在build时出现错误，但是在dev时是正常的\n\n答：这种情况多半是因为你在created或beforeCreate生命周期调用了浏览器API的原因导致，详情查看：浏览器的 API 访问限制",normalizedContent:"# 我是一个小白，想使用这个主题搭建博客（知识库）需要做哪些工作？\n\n答：使用这个主题前需要你掌握下面这些知识：\n\n * 掌握 markdown、yaml 语法\n * 会使用终端（命令行），会使用 git\n * 会阅读文档、搜索文档\n * 会vuepress的基本使用和默认主题的基本配置\n\n以上知识都掌握之后，再查看本文档。你也可以运行我的主题项目，一边看代码，一边查看文档。主题项目内写了比较多的注释代码，方便你的学习和使用。\n\n\n# clone 项目后需要修改哪些地方？\n\n答：大致的修改流程是这样的：\n\n 1. 首先让项目正常的跑起来\n 2. 根据需求构建和替换 docs/<结构化目录> 的目录及内容\n 3. 根据需求修改 config.js 配置\n 4. 修改 首页配置\n 5. 修改 主题颜色和样式（如果你想修改的话）\n\n\n# 可减少项目冗余的地方有哪些？\n\n答：在完成项目的搭建之后，对于没有使用到的一些文件和代码，可以看情况删减，可删减的地方有:\n\n * 卸载config.js中未使用的插件依赖包\n * 参照 目录结构，删除未使用到的 可选 文件\n * 删除.vusepress目录内未使用到的 可选 文件\n * 删除各文件内的注释代码\n\n\n# 我可以不使用永久链接吗？\n\n答：不可以。当你没有在front matter指定永久链接时，主题会自动生成永久链接到front matter，你可以修改永久链接的值。 使用永久链接是出于以下几点考虑:\n\n 1. 在config.js配置nav时使用永久链接，就不会因为文件的路径或名称的改变而改变。\n 2. 对于博客而言，当别人收藏了你的文章，在未来的时间里都可以通过永久链接来访问到。\n 3. 主题中的目录页需要通过永久链接来访问文章。\n\n\n# 是否支持国际化？\n\n答：暂不支持。目前的国际化方案，只能是使用不同项目来处理，比如：一个项目是中文，一个项目是英文，在导航中添加中英文站点的链接。\n\n\n# 打包后在本地预览怎么没有样式？\n\n答：因vuepress打包后的css、js等资源链接采用绝对路径引入，在本地预览时的引入链接是不正确的，部署到服务器即可正常引入和预览。如果你确实需要本地预览，可以使用vuepress-plugin-serve插件，使用方法看相应文档。\n\n\n# 在build时出现错误，但是在dev时是正常的\n\n答：这种情况多半是因为你在created或beforecreate生命周期调用了浏览器api的原因导致，详情查看：浏览器的 api 访问限制",charsets:{cjk:!0}},{title:"支持这个项目",frontmatter:{title:"支持这个项目",date:"2020-05-12T15:09:57.000Z",permalink:"/pages/1b12ed",sidebar:!1,article:!1},regularPath:"/06.test12345/01.%E8%B5%9E%E5%8A%A9.html",relativePath:"06.test12345/01.赞助.md",key:"v-4d748a5c",path:"/pages/1b12ed/",headers:[{level:2,title:"赞助商",slug:"赞助商",normalizedTitle:"赞助商",charIndex:109},{level:2,title:"成为赞助商",slug:"成为赞助商",normalizedTitle:"成为赞助商",charIndex:290},{level:2,title:"公众号",slug:"公众号",normalizedTitle:"公众号",charIndex:415},{level:2,title:"致谢",slug:"致谢",normalizedTitle:"致谢",charIndex:522}],headersStr:"赞助商 成为赞助商 公众号 致谢",content:"如果您正在使用这个项目并感觉良好，或者是想支持我继续开发，您可以通过如下任意方式支持我：\n\n 1. Star并分享 vuepress-theme-vdoing 🚀\n 2. 轻轻点击一次页面广告 😄\n 3. 进入下面赞助商花十几秒钟扫码注册一下， 赞助商就会代您赞助一笔小钱。 😄\n 4. 通过以下二维码 一次性捐款，打赏作者一杯茶。🍵\n\n谢谢！ ❤️\n\n微信赞赏   微信   支付宝\n            \n\n\n# 赞助商\n\n> 如果您想支持我们，奈何囊中羞涩，您可以花十几秒点击下方赞助商链接进入注册（只需微信扫码就可以），赞助商就会代您赞助一笔小钱。\n\n\n\n\n# 成为赞助商\n\n成为赞助商，即可将您的品牌LOGO及标语同时展示在：\n\n * GitHub仓库主页顶部\n * 官网首页顶部\n * 官网所有文档页左侧边栏顶部\n\n主题官网平均每月约8w+浏览量 + GitHub仓库每月约1w+浏览量\n\n联系方式\n\n\n# 公众号\n\n有趣研究社是本人对各种有趣的、好玩的、沙雕的创意和想法以在线小网站或者文章的形式表达出来，比如：\n\n * 小霸王游戏机\n * 爱国头像生成器\n * 到账语音生成器\n\n还有更多好玩的等你去探索吧~\n\n\n# 致谢\n\n感谢给予支持的朋友，您的支持是我前进的动力 🎉",normalizedContent:"如果您正在使用这个项目并感觉良好，或者是想支持我继续开发，您可以通过如下任意方式支持我：\n\n 1. star并分享 vuepress-theme-vdoing 🚀\n 2. 轻轻点击一次页面广告 😄\n 3. 进入下面赞助商花十几秒钟扫码注册一下， 赞助商就会代您赞助一笔小钱。 😄\n 4. 通过以下二维码 一次性捐款，打赏作者一杯茶。🍵\n\n谢谢！ ❤️\n\n微信赞赏   微信   支付宝\n            \n\n\n# 赞助商\n\n> 如果您想支持我们，奈何囊中羞涩，您可以花十几秒点击下方赞助商链接进入注册（只需微信扫码就可以），赞助商就会代您赞助一笔小钱。\n\n\n\n\n# 成为赞助商\n\n成为赞助商，即可将您的品牌logo及标语同时展示在：\n\n * github仓库主页顶部\n * 官网首页顶部\n * 官网所有文档页左侧边栏顶部\n\n主题官网平均每月约8w+浏览量 + github仓库每月约1w+浏览量\n\n联系方式\n\n\n# 公众号\n\n有趣研究社是本人对各种有趣的、好玩的、沙雕的创意和想法以在线小网站或者文章的形式表达出来，比如：\n\n * 小霸王游戏机\n * 爱国头像生成器\n * 到账语音生成器\n\n还有更多好玩的等你去探索吧~\n\n\n# 致谢\n\n感谢给予支持的朋友，您的支持是我前进的动力 🎉",charsets:{cjk:!0}},{title:"001.基础篇001",frontmatter:{title:"001.基础篇001",categories:["Java","基础"],tags:["Java基础"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-01T10:12:04.000Z",permalink:"/pages/0d3040/"},regularPath:"/07.Java/01.%E5%9F%BA%E7%A1%80%E7%AF%87/001.%E5%9F%BA%E7%A1%80%E7%AF%87001.html",relativePath:"07.Java/01.基础篇/001.基础篇001.md",key:"v-2411c268",path:"/pages/0d3040/",headers:[{level:2,title:"1、 Java语言有哪些特点",slug:"_1、-java语言有哪些特点",normalizedTitle:"1、 java语言有哪些特点",charIndex:13},{level:2,title:"2、面向对象和面向过程的区别",slug:"_2、面向对象和面向过程的区别",normalizedTitle:"2、面向对象和面向过程的区别",charIndex:137},{level:2,title:"3 、八种基本数据类型的大小，以及他们的封装类",slug:"_3-、八种基本数据类型的大小-以及他们的封装类",normalizedTitle:"3 、八种基本数据类型的大小，以及他们的封装类",charIndex:367},{level:2,title:"4、标识符的命名规则。",slug:"_4、标识符的命名规则。",normalizedTitle:"4、标识符的命名规则。",charIndex:1328},{level:2,title:"5、instanceof 关键字的作用",slug:"_5、instanceof-关键字的作用",normalizedTitle:"5、instanceof 关键字的作用",charIndex:1542},{level:2,title:"6、Java自动装箱与拆箱",slug:"_6、java自动装箱与拆箱",normalizedTitle:"6、java自动装箱与拆箱",charIndex:2162},{level:4,title:"面试题1： 以下代码会输出什么？",slug:"面试题1-以下代码会输出什么",normalizedTitle:"面试题1： 以下代码会输出什么？",charIndex:2462},{level:4,title:"面试题2：以下代码输出什么",slug:"面试题2-以下代码输出什么",normalizedTitle:"面试题2：以下代码输出什么",charIndex:4058},{level:2,title:"7、 重载和重写的区别",slug:"_7、-重载和重写的区别",normalizedTitle:"7、 重载和重写的区别",charIndex:4394},{level:4,title:"重写(Override)",slug:"重写-override",normalizedTitle:"重写(override)",charIndex:4409},{level:4,title:"重载（Overload）",slug:"重载-overload",normalizedTitle:"重载（overload）",charIndex:5170},{level:2,title:"8、 equals与==的区别",slug:"_8、-equals与-的区别",normalizedTitle:"8、 equals与==的区别",charIndex:5774},{level:4,title:"== ：",slug:"",normalizedTitle:"== ：",charIndex:5793},{level:4,title:"equals：",slug:"equals",normalizedTitle:"equals：",charIndex:6041},{level:4,title:"总结：",slug:"总结",normalizedTitle:"总结：",charIndex:5003},{level:2,title:"9、 Hashcode的作用",slug:"_9、-hashcode的作用",normalizedTitle:"9、 hashcode的作用",charIndex:6334},{level:2,title:"10、String、String StringBuﬀer 和 StringBuilder 的区别是什么?",slug:"_10、string、string-stringbuffer-和-stringbuilder-的区别是什么",normalizedTitle:"10、string、string stringbuﬀer 和 stringbuilder 的区别是什么?",charIndex:6799},{level:2,title:"11、ArrayList和linkedList的区别",slug:"_11、arraylist和linkedlist的区别",normalizedTitle:"11、arraylist和linkedlist的区别",charIndex:7370},{level:4,title:"Array（数组）",slug:"array-数组",normalizedTitle:"array（数组）",charIndex:7400},{level:4,title:"List",slug:"list",normalizedTitle:"list",charIndex:6364},{level:2,title:"12、 HashMap和HashTable的区别",slug:"_12、-hashmap和hashtable的区别",normalizedTitle:"12、 hashmap和hashtable的区别",charIndex:7935},{level:4,title:"1、两者父类不同",slug:"_1、两者父类不同",normalizedTitle:"1、两者父类不同",charIndex:7963},{level:4,title:"2、对外提供的接口不同",slug:"_2、对外提供的接口不同",normalizedTitle:"2、对外提供的接口不同",charIndex:8083},{level:4,title:"3、对null的支持不同",slug:"_3、对null的支持不同",normalizedTitle:"3、对null的支持不同",charIndex:8331},{level:4,title:"4、安全性不同",slug:"_4、安全性不同",normalizedTitle:"4、安全性不同",charIndex:8450},{level:4,title:"5、初始容量大小和每次扩充容量大小不同",slug:"_5、初始容量大小和每次扩充容量大小不同",normalizedTitle:"5、初始容量大小和每次扩充容量大小不同",charIndex:8769},{level:4,title:"6、计算hash值的方法不同",slug:"_6、计算hash值的方法不同",normalizedTitle:"6、计算hash值的方法不同",charIndex:8792},{level:2,title:"13、 Collection包结构，与Collections的区别",slug:"_13、-collection包结构-与collections的区别",normalizedTitle:"13、 collection包结构，与collections的区别",charIndex:8811},{level:2,title:"14、 Java的四种引用，强弱软虚",slug:"_14、-java的四种引用-强弱软虚",normalizedTitle:"14、 java的四种引用，强弱软虚",charIndex:9039},{level:4,title:"强引用",slug:"强引用",normalizedTitle:"强引用",charIndex:9061},{level:4,title:"软引用",slug:"软引用",normalizedTitle:"软引用",charIndex:9174},{level:4,title:"弱引用",slug:"弱引用",normalizedTitle:"弱引用",charIndex:9429},{level:4,title:"虚引用",slug:"虚引用",normalizedTitle:"虚引用",charIndex:9628},{level:4,title:"注:",slug:"注",normalizedTitle:"注:",charIndex:9968},{level:2,title:"15、 泛型常用特点",slug:"_15、-泛型常用特点",normalizedTitle:"15、 泛型常用特点",charIndex:10037},{level:4,title:"使用泛型的好处？",slug:"使用泛型的好处",normalizedTitle:"使用泛型的好处？",charIndex:10345}],headersStr:"1、 Java语言有哪些特点 2、面向对象和面向过程的区别 3 、八种基本数据类型的大小，以及他们的封装类 4、标识符的命名规则。 5、instanceof 关键字的作用 6、Java自动装箱与拆箱 面试题1： 以下代码会输出什么？ 面试题2：以下代码输出什么 7、 重载和重写的区别 重写(Override) 重载（Overload） 8、 equals与==的区别 == ： equals： 总结： 9、 Hashcode的作用 10、String、String StringBuﬀer 和 StringBuilder 的区别是什么? 11、ArrayList和linkedList的区别 Array（数组） List 12、 HashMap和HashTable的区别 1、两者父类不同 2、对外提供的接口不同 3、对null的支持不同 4、安全性不同 5、初始容量大小和每次扩充容量大小不同 6、计算hash值的方法不同 13、 Collection包结构，与Collections的区别 14、 Java的四种引用，强弱软虚 强引用 软引用 弱引用 虚引用 注: 15、 泛型常用特点 使用泛型的好处？",content:'# 基础篇001\n\n\n# 1、 Java语言有哪些特点\n\n 1. 简单易学、有丰富的类库\n\n 2. 面向对象（Java最重要的特性，让程序耦合度更低，内聚性更高）\n\n 3. 与平台无关性（JVM是Java跨平台使用的根本）\n\n 4. 可靠安全\n\n 5. 支持多线程\n\n\n# 2、面向对象和面向过程的区别\n\n面向过程：是分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发\n\n面向对象：是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低。\n\n\n# 3 、八种基本数据类型的大小，以及他们的封装类\n\n基本类型      大小（字节）   默认值            封装类\nbyte      1        (byte)0        Byte\nshort     2        (short)0       Short\nint       4        0              Integer\nlong      8        0L             Long\nﬂoat      4        0.0f           Float\ndouble    8        0.0d           Double\nboolean   -        false          Boolean\nchar      2        \\u0000(null)   Character\n\n注：\n\n 1. int是基本数据类型，Integer是int的封装类，是引用类型。int默认值是0，而Integer默认值是null，所以Integer能区分出0和null的情况。一旦java看到null，就知道这个引用还没有指向某个对象，再任何引用使用前，必须为其指定一个对象，否则会报错。\n\n 2. 基本数据类型在声明时系统会自动给它分配空间，而引用类型声明时只是分配了引用空间，必须通过实例化开辟数据空间之后才可以赋值。数组对象也是一个引用对象，将一个数组赋值给另一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看的见。\n\n 3. 虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素 boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字节。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的是32/64位系统，而是指CPU硬件层面），具有高效存取的特点。\n\n\n# 4、标识符的命名规则。\n\n标识符的含义： 是指在程序中，我们自己定义的内容，譬如，类的名字，方法名称以及变量名称等等，都是标识符。\n\n命名规则：（硬性要求） 标识符可以包含英文字母，0-9的数字，$以及_ 标识符不能以数字开头 标识符不是关键字\n\n命名规范：（非硬性要求） 类名规范：首字符大写，后面每个单词首字母大写（大驼峰式）。 变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。 方法名规范：同变量名。\n\n\n# 5、instanceof 关键字的作用\n\ninstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例，用法 为：boolean result = obj instanceof Class\n\n其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接 或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。 注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能 确定类型，则通过编译，具体看运行时定。\n\nint i = 0;\nSystem.out.println(i instanceof Integer);//编译不通过 i必须是引用类型，不能是基本类型\nSystem.out.println(i instanceof Object);//编译不通过\n\n\nInteger integer = new Integer(1);\nSystem.out.println(integer instanceof Integer);//true\n\n\n//false ,在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回 false。\nSystem.out.println(null instanceof Object);\n\n\n\n# 6、Java自动装箱与拆箱\n\n装箱就是自动将基本数据类型转换为包装器类型（int--\x3eInteger）；调用方法：Integer的valueOf(int) 方法\n\n拆箱就是自动将包装器类型转换为基本数据类型（Integer--\x3eint）。调用方法：Integer的intValue方法\n\n在Java SE5之前，如果要生成一个数值为10的Integer对象，必须这样进行：\n\nInteger i = new Integer(10);\n\n\n而在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要 这样就可以了：\n\nInteger i = 10;\n\n\n# 面试题1： 以下代码会输出什么？\n\npublic class Main {\npublic static void main(String[] args) {\n\n\tInteger i1 = 100;\n    Integer i2 = 100; \n    Integer i3 = 200; \n    Integer i4 = 200;\n    \n\tSystem.out.println(i1==i2);\n    System.out.println(i3==i4);\n    \n\t}\n}\n\n\n运行结果：\n\ntrue\nfalse\n\n\n为什么会出现这样的结果？输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对 象。此时只需一看源码便知究竟，下面这段代码是Integer的valueOf方法的具体实现：\n\npublic static Integer valueOf(int i) {\n\t\tif(i >= -128 && i <= IntegerCache.high)\n\t\t\treturn IntegerCache.cache[i + 128];\n\t\telse\n\t\t\treturn new Integer(i);\n}\n\n\n其中IntegerCache类的实现为：\n\nprivate static class IntegerCache { \n    static final int high;\n    static final Integer cache[];\n\n    static {\n    final int low = -128;\n\n    // high value may be configured by property 高值可以通过属性来配置 \n    int h = 127;\n    if (integerCacheHighPropValue != null) {\n        // Use Long.decode here to avoid invoking methods that  在这里使用Long.decode，以避免调用以下方法\n        // require Integer\'s autoboxing cache to be initialized  需要Integer的自动搜索缓存被初始化的方法。\n        int i = Long.decode(integerCacheHighPropValue).intValue();\n        i = Math.max(i, 127);\n        // Maximum array size is Integer.MAX_VALUE 最大数组大小为Integer.MAX_VALUE\n        h = Math.min(i, Integer.MAX_VALUE - -low);\n    }\n    high = h;\n\n    cache = new Integer[(high - low) + 1];\n    int j = low;\n    for(int k = 0; k < cache.length; k++)\n    \tcache[k] = new Integer(j++);\n    }\n\n    private IntegerCache() {}\n}\n\n\n\n从这2段代码可以看出，在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间， 便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。 上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是 同一个对象，而i3和i4则是分别指向不同的对象。\n\n# 面试题2：以下代码输出什么\n\npublic class Main {\n    public static void main(String[] args) {\n        Double i1 = 100.0;\n        Double i2 = 100.0;\n        Double i3 = 200.0;\n        Double i4 = 200.0;\n        \n        System.out.println(i1==i2);\n        System.out.println(i3==i4);\n    }\n}\n\n\n运行结果：\n\nfalse\nfalse\n\n\n原因： 在某个范围内的整型数值的个数是有限的，而浮点数却不是。\n\n\n# 7、 重载和重写的区别\n\n# 重写(Override)\n\n从字面上看，重写就是 重新写一遍的意思。其实就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或重写，这就是重写。但要注意子类函数的访问修饰权限不能少于父类的。\n\npublic class Father {\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n        Son s = new Son();\n        s.sayHello();\n    }\n    public void sayHello() {\n    \tSystem.out.println("Hello");\n    }\n    }\nclass Son extends Father{\n    @Override\n    public void sayHello() {\n        // TODO Auto-generated method stub\n        System.out.println("hello by ");\n    }\n}\n\n\n重写 总结： 1.发生在父类与子类之间 2.方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同 3.访问修饰符的限制一定要大于被重写方法的访问修饰符\n\n（public>protected>default>private) 4.重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常\n\n# 重载（Overload）\n\n在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。\n\npublic class Father {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub \n        Father s = new Father();\n        s.sayHello(); \n        s.sayHello("wintershii");\n    }\n\n    public void sayHello() { \n    \tSystem.out.println("Hello");\n    }\n\n    public void sayHello(String name) {\n    \tSystem.out.println("Hello" + " " + name);\n    }\n}\n\n\n重载 总结： 1.重载Overload是一个类中多态性的一种表现 2.重载要求同名方法的参数列表不同(参数类型，参数个数甚至是参数顺序) 3.重载的时候，返回值类型可以相同也可以不相同。无法以返回型别作为重载函数的区分标准\n\n\n# 8、 equals与==的区别\n\n# == ：\n\n== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。\n\n1、比较的是操作符两端的操作数是否是同一个对象。\n\n2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。\n\n3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为 true，如： int a=10 与 long b=10L 与 double c=10.0都是相同的（为true），因为他们都指向地址为10的堆。\n\n# equals：\n\nequals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是==的判断。\n\n# 总结：\n\n所有比较是否相等时，都是用equals 并且在对常量相比较时，把常量写在前面，因为使用object的equals object可能为null 则空指针\n\n在阿里的代码规范中只使用equals ，阿里插件默认会识别，并可以快速修改，推荐安装阿里插件来排查老代码使用“==”，替换成equals\n\n\n# 9、 Hashcode的作用\n\njava的集合有两类，一类是List，还有一类是Set。前者有序可重复，后者无序不重复。当我们在set中插入的时候怎么判断是否已经存在该元素呢，可以通过equals方法。但是如果元素太多，用这样的方法就会比较满。\n\n于是有人发明了哈希算法来提高集合中查找元素的效率。 这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。\n\nhashCode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当集合要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。\n\n\n# 10、String、String StringBuﬀer 和 StringBuilder 的区别是什么?\n\nString是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码来看是一个ﬁnal类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对String的操作都会生成新的String对象。\n\nprivate final char value[];\n\n\n每次+操作 ： 隐式在堆上new了一个跟原字符串相同的StringBuilder对象，再调用append方法 拼接+后面的字符。 StringBuffer和StringBuilder他们两都继承了AbstractStringBuilder抽象类，从AbstractStringBuilder抽象类中我们可以看到\n\n/**\n* The value is used for character storage.\n*/\nchar[] value;\n\n\n他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用StringBuffer和 StringBuilder来进行操作。 另外StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所 以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。\n\n\n# 11、ArrayList和linkedList的区别\n\n# Array（数组）\n\n是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的。\n\nArray获取数据的时间复杂度是O(1),但是要删除数据却是开销很大，因为这需要重排数组中的所有数据, (因为删除数据以后, 需要把后面所有的数据前移)\n\n缺点 : 数组初始化必须指定初始化的长度, 否则报错例如:\n\nint[] a = new int[4];//推介使用int[] 这种方式初始化\nint c[] = {23,43,56,78};//长度：4，索引范围：[0,3]\n\n\n# List\n\n是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。 List有两个重要的实现类：ArrayList和LinkedList\n\nArrayList: 可以看作是能够自动增长容量的数组ArrayList的toArray方法返回一个数组ArrayList的asList方法返回一个列表ArrayList底层的实现是Array, 数组扩容实现\n\nLinkList是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于ArrayList.当然,这些对比都是指数据量很大或者操作很频繁。\n\n\n# 12、 HashMap和HashTable的区别\n\n# 1、两者父类不同\n\nHashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都实现了同时实现了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。\n\n# 2、对外提供的接口不同\n\nHashtable比HashMap多提供了elments() 和contains() 两个方法。 elments() 方法继承自\n\nHashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的value的枚举。\n\ncontains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上，contansValue() 就只是调用了一下contains() 方法。\n\n# 3、对null的支持不同\n\nHashtable：key和value都不能为null。\n\nHashMap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个 key值对应的value为null。\n\n# 4、安全性不同\n\nHashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己处理多线程的安全问题。\n\nHashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。\n\n虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部分的使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。\n\nConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为 ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。\n\n# 5、初始容量大小和每次扩充容量大小不同\n\n# 6、计算hash值的方法不同\n\n\n# 13、 Collection包结构，与Collections的区别\n\n 1. Collection是集合类的上级接口，子接口有 Set、List、LinkedList、ArrayList、Vector、Stack、 Set；\n 2. Collections是集合类的一个帮助类， 它包含有各种有关集合操作的静态多态方法，用于实现对各种集合的搜索、排序、线程安全化等操作。此类不能实例化，就像一个工具类，服务于Java的 Collection框架。\n\n\n# 14、 Java的四种引用，强弱软虚\n\n# 强引用\n\n强引用是平常中使用最多的引用，强引用在程序内存不足（OOM）的时候也不会被回收，使用方式：\n\nString str = new String("str");\nSystem.out.println(str);\n\n\n# 软引用\n\n软引用在程序内存不足时，会被回收，使用方式：\n\n// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的，\n// 这里的软引用指的是指向new String("str")的引用，也就是SoftReference类中T\nSoftReference<String> wrf = new SoftReference<String>(new String("str"));\n\n\n可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建 的对象。\n\n# 弱引用\n\n弱引用就是只要JVM垃圾回收器发现了它，就会将之回收，使用方式：\n\nWeakReference<String> wrf = new WeakReference<String>(str);\n\n\n可用场景： Java源码中的java.util.WeakHashMap 中的key 就是使用弱引用，我的理解就是， 一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。\n\n# 虚引用\n\n虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入ReferenceQueue 中。注意 哦，其它引用是被JVM回收后才被传入ReferenceQueue 中的。由于这个机制，所以虚引用大多 被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有ReferenceQueue ， 使用例子：\n\nPhantomReference<String> prf = new PhantomReference<String>(new String("str"),\nnew ReferenceQueue<>());\n\n\n可用场景： 对象销毁前的一些操作，比如说资源释放等。Object.finalize() 虽然也可以做这 类动作，但是这个方式即不安全又低效\n\n# 注:\n\n上诉所说的几类引用，都是指对象本身的引用，而不是指Reference的四个子类的引用 (SoftReference等)。\n\n\n# 15、 泛型常用特点\n\n泛型是Java SE 1.5之后的特性， 《Java 核心技术》中对泛型的定义是：\n\n> “泛型” 意味着编写的代码可以被不同类型的对象所重用。\n\n“泛型”，顾名思义，“泛指的类型”。我们提供了泛指的概念，但具体执行的时候却可以有具体的规则来约束，比如我们用的非常多的ArrayList就是个泛型类，ArrayList作为集合可以存放各种元素，如 Integer, String，自定义的各种类型等，但在我们使用的时候通过具体的规则来约束，如我们可以约束集合中只存放Integer类型的元素，如\n\nList<Integer> iniData = new ArrayList<>();\n\n\n# 使用泛型的好处？\n\n以集合来举例，使用泛型的好处是我们不必因为添加元素类型的不同而定义不同类型的集合，如整型集合类，浮点型集合类，字符串集合类，我们可以定义一个集合来存放整型、浮点型，字符串型数据，而这并不是最重要的，因为我们只要把底层存储设置了Object即可，添加的数据全部都可向上转型为Object。 更重要的是我们可以通过规则按照自己的想法控制存储的数据类型。',normalizedContent:'# 基础篇001\n\n\n# 1、 java语言有哪些特点\n\n 1. 简单易学、有丰富的类库\n\n 2. 面向对象（java最重要的特性，让程序耦合度更低，内聚性更高）\n\n 3. 与平台无关性（jvm是java跨平台使用的根本）\n\n 4. 可靠安全\n\n 5. 支持多线程\n\n\n# 2、面向对象和面向过程的区别\n\n面向过程：是分析解决问题的步骤，然后用函数把这些步骤一步一步地实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发\n\n面向对象：是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低。\n\n\n# 3 、八种基本数据类型的大小，以及他们的封装类\n\n基本类型      大小（字节）   默认值            封装类\nbyte      1        (byte)0        byte\nshort     2        (short)0       short\nint       4        0              integer\nlong      8        0l             long\nﬂoat      4        0.0f           float\ndouble    8        0.0d           double\nboolean   -        false          boolean\nchar      2        \\u0000(null)   character\n\n注：\n\n 1. int是基本数据类型，integer是int的封装类，是引用类型。int默认值是0，而integer默认值是null，所以integer能区分出0和null的情况。一旦java看到null，就知道这个引用还没有指向某个对象，再任何引用使用前，必须为其指定一个对象，否则会报错。\n\n 2. 基本数据类型在声明时系统会自动给它分配空间，而引用类型声明时只是分配了引用空间，必须通过实例化开辟数据空间之后才可以赋值。数组对象也是一个引用对象，将一个数组赋值给另一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看的见。\n\n 3. 虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在java虚拟机中没有任何供boolean值专用的字节码指令，java语言表达式所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替，而boolean数组将会被编码成java虚拟机的byte数组，每个元素 boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字节。使用int的原因是，对于当下32位的处理器（cpu）来说，一次处理数据是32位（这里不是指的是32/64位系统，而是指cpu硬件层面），具有高效存取的特点。\n\n\n# 4、标识符的命名规则。\n\n标识符的含义： 是指在程序中，我们自己定义的内容，譬如，类的名字，方法名称以及变量名称等等，都是标识符。\n\n命名规则：（硬性要求） 标识符可以包含英文字母，0-9的数字，$以及_ 标识符不能以数字开头 标识符不是关键字\n\n命名规范：（非硬性要求） 类名规范：首字符大写，后面每个单词首字母大写（大驼峰式）。 变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。 方法名规范：同变量名。\n\n\n# 5、instanceof 关键字的作用\n\ninstanceof 严格来说是java中的一个双目运算符，用来测试一个对象是否为一个类的实例，用法 为：boolean result = obj instanceof class\n\n其中 obj 为一个对象，class 表示一个类或者一个接口，当 obj 为 class 的对象，或者是其直接 或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。 注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能 确定类型，则通过编译，具体看运行时定。\n\nint i = 0;\nsystem.out.println(i instanceof integer);//编译不通过 i必须是引用类型，不能是基本类型\nsystem.out.println(i instanceof object);//编译不通过\n\n\ninteger integer = new integer(1);\nsystem.out.println(integer instanceof integer);//true\n\n\n//false ,在 javase规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回 false。\nsystem.out.println(null instanceof object);\n\n\n\n# 6、java自动装箱与拆箱\n\n装箱就是自动将基本数据类型转换为包装器类型（int--\x3einteger）；调用方法：integer的valueof(int) 方法\n\n拆箱就是自动将包装器类型转换为基本数据类型（integer--\x3eint）。调用方法：integer的intvalue方法\n\n在java se5之前，如果要生成一个数值为10的integer对象，必须这样进行：\n\ninteger i = new integer(10);\n\n\n而在从java se5开始就提供了自动装箱的特性，如果要生成一个数值为10的integer对象，只需要 这样就可以了：\n\ninteger i = 10;\n\n\n# 面试题1： 以下代码会输出什么？\n\npublic class main {\npublic static void main(string[] args) {\n\n\tinteger i1 = 100;\n    integer i2 = 100; \n    integer i3 = 200; \n    integer i4 = 200;\n    \n\tsystem.out.println(i1==i2);\n    system.out.println(i3==i4);\n    \n\t}\n}\n\n\n运行结果：\n\ntrue\nfalse\n\n\n为什么会出现这样的结果？输出结果表明i1和i2指向的是同一个对象，而i3和i4指向的是不同的对 象。此时只需一看源码便知究竟，下面这段代码是integer的valueof方法的具体实现：\n\npublic static integer valueof(int i) {\n\t\tif(i >= -128 && i <= integercache.high)\n\t\t\treturn integercache.cache[i + 128];\n\t\telse\n\t\t\treturn new integer(i);\n}\n\n\n其中integercache类的实现为：\n\nprivate static class integercache { \n    static final int high;\n    static final integer cache[];\n\n    static {\n    final int low = -128;\n\n    // high value may be configured by property 高值可以通过属性来配置 \n    int h = 127;\n    if (integercachehighpropvalue != null) {\n        // use long.decode here to avoid invoking methods that  在这里使用long.decode，以避免调用以下方法\n        // require integer\'s autoboxing cache to be initialized  需要integer的自动搜索缓存被初始化的方法。\n        int i = long.decode(integercachehighpropvalue).intvalue();\n        i = math.max(i, 127);\n        // maximum array size is integer.max_value 最大数组大小为integer.max_value\n        h = math.min(i, integer.max_value - -low);\n    }\n    high = h;\n\n    cache = new integer[(high - low) + 1];\n    int j = low;\n    for(int k = 0; k < cache.length; k++)\n    \tcache[k] = new integer(j++);\n    }\n\n    private integercache() {}\n}\n\n\n\n从这2段代码可以看出，在通过valueof方法创建integer对象的时候，如果数值在[-128,127]之间， 便返回指向integercache.cache中已经存在的对象的引用；否则创建一个新的integer对象。 上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是 同一个对象，而i3和i4则是分别指向不同的对象。\n\n# 面试题2：以下代码输出什么\n\npublic class main {\n    public static void main(string[] args) {\n        double i1 = 100.0;\n        double i2 = 100.0;\n        double i3 = 200.0;\n        double i4 = 200.0;\n        \n        system.out.println(i1==i2);\n        system.out.println(i3==i4);\n    }\n}\n\n\n运行结果：\n\nfalse\nfalse\n\n\n原因： 在某个范围内的整型数值的个数是有限的，而浮点数却不是。\n\n\n# 7、 重载和重写的区别\n\n# 重写(override)\n\n从字面上看，重写就是 重新写一遍的意思。其实就是在子类中把父类本身有的方法重新写一遍。子类继承了父类原有的方法，但有时子类并不想原封不动的继承父类中的某个方法，所以在方法名，参数列表，返回类型(除过子类中方法的返回值是父类中方法返回值的子类时)都相同的情况下， 对方法体进行修改或重写，这就是重写。但要注意子类函数的访问修饰权限不能少于父类的。\n\npublic class father {\n    public static void main(string[] args) {\n        // todo auto-generated method stub\n        son s = new son();\n        s.sayhello();\n    }\n    public void sayhello() {\n    \tsystem.out.println("hello");\n    }\n    }\nclass son extends father{\n    @override\n    public void sayhello() {\n        // todo auto-generated method stub\n        system.out.println("hello by ");\n    }\n}\n\n\n重写 总结： 1.发生在父类与子类之间 2.方法名，参数列表，返回类型（除过子类中方法的返回类型是父类中返回类型的子类）必须相同 3.访问修饰符的限制一定要大于被重写方法的访问修饰符\n\n（public>protected>default>private) 4.重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常\n\n# 重载（overload）\n\n在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同甚至是参数顺序不同）则视为重载。同时，重载对返回类型没有要求，可以相同也可以不同，但不能通过返回类型是否相同来判断重载。\n\npublic class father {\n\n    public static void main(string[] args) {\n        // todo auto-generated method stub \n        father s = new father();\n        s.sayhello(); \n        s.sayhello("wintershii");\n    }\n\n    public void sayhello() { \n    \tsystem.out.println("hello");\n    }\n\n    public void sayhello(string name) {\n    \tsystem.out.println("hello" + " " + name);\n    }\n}\n\n\n重载 总结： 1.重载overload是一个类中多态性的一种表现 2.重载要求同名方法的参数列表不同(参数类型，参数个数甚至是参数顺序) 3.重载的时候，返回值类型可以相同也可以不相同。无法以返回型别作为重载函数的区分标准\n\n\n# 8、 equals与==的区别\n\n# == ：\n\n== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。\n\n1、比较的是操作符两端的操作数是否是同一个对象。\n\n2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。\n\n3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为 true，如： int a=10 与 long b=10l 与 double c=10.0都是相同的（为true），因为他们都指向地址为10的堆。\n\n# equals：\n\nequals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是object类中的方法，而object中的equals方法返回的却是==的判断。\n\n# 总结：\n\n所有比较是否相等时，都是用equals 并且在对常量相比较时，把常量写在前面，因为使用object的equals object可能为null 则空指针\n\n在阿里的代码规范中只使用equals ，阿里插件默认会识别，并可以快速修改，推荐安装阿里插件来排查老代码使用“==”，替换成equals\n\n\n# 9、 hashcode的作用\n\njava的集合有两类，一类是list，还有一类是set。前者有序可重复，后者无序不重复。当我们在set中插入的时候怎么判断是否已经存在该元素呢，可以通过equals方法。但是如果元素太多，用这样的方法就会比较满。\n\n于是有人发明了哈希算法来提高集合中查找元素的效率。 这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。\n\nhashcode方法可以这样理解：它返回的就是根据对象的内存地址换算出的一个值。这样一来，当集合要添加新的元素时，先调用这个元素的hashcode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。\n\n\n# 10、string、string stringbuﬀer 和 stringbuilder 的区别是什么?\n\nstring是只读字符串，它并不是基本数据类型，而是一个对象。从底层源码来看是一个ﬁnal类型的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改。每次对string的操作都会生成新的string对象。\n\nprivate final char value[];\n\n\n每次+操作 ： 隐式在堆上new了一个跟原字符串相同的stringbuilder对象，再调用append方法 拼接+后面的字符。 stringbuffer和stringbuilder他们两都继承了abstractstringbuilder抽象类，从abstractstringbuilder抽象类中我们可以看到\n\n/**\n* the value is used for character storage.\n*/\nchar[] value;\n\n\n他们的底层都是可变的字符数组，所以在进行频繁的字符串操作时，建议使用stringbuffer和 stringbuilder来进行操作。 另外stringbuffer 对方法加了同步锁或者对调用的方法加了同步锁，所 以是线程安全的。stringbuilder 并没有对方法进行加同步锁，所以是非线程安全的。\n\n\n# 11、arraylist和linkedlist的区别\n\n# array（数组）\n\n是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的。\n\narray获取数据的时间复杂度是o(1),但是要删除数据却是开销很大，因为这需要重排数组中的所有数据, (因为删除数据以后, 需要把后面所有的数据前移)\n\n缺点 : 数组初始化必须指定初始化的长度, 否则报错例如:\n\nint[] a = new int[4];//推介使用int[] 这种方式初始化\nint c[] = {23,43,56,78};//长度：4，索引范围：[0,3]\n\n\n# list\n\n是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承collection。 list有两个重要的实现类：arraylist和linkedlist\n\narraylist: 可以看作是能够自动增长容量的数组arraylist的toarray方法返回一个数组arraylist的aslist方法返回一个列表arraylist底层的实现是array, 数组扩容实现\n\nlinklist是一个双链表,在添加和删除元素时具有比arraylist更好的性能.但在get与set方面弱于arraylist.当然,这些对比都是指数据量很大或者操作很频繁。\n\n\n# 12、 hashmap和hashtable的区别\n\n# 1、两者父类不同\n\nhashmap是继承自abstractmap类，而hashtable是继承自dictionary类。不过它们都实现了同时实现了map、cloneable（可复制）、serializable（可序列化）这三个接口。\n\n# 2、对外提供的接口不同\n\nhashtable比hashmap多提供了elments() 和contains() 两个方法。 elments() 方法继承自\n\nhashtable的父类dictionnary。elements() 方法用于返回此hashtable中的value的枚举。\n\ncontains()方法判断该hashtable是否包含传入的value。它的作用与containsvalue()一致。事实上，contansvalue() 就只是调用了一下contains() 方法。\n\n# 3、对null的支持不同\n\nhashtable：key和value都不能为null。\n\nhashmap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个 key值对应的value为null。\n\n# 4、安全性不同\n\nhashmap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己处理多线程的安全问题。\n\nhashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。\n\n虽然hashmap是线程不安全的，但是它的效率远远高于hashtable，这样设计是合理的，因为大部分的使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的concurrenthashmap。\n\nconcurrenthashmap虽然也是线程安全的，但是它的效率比hashtable要高好多倍。因为 concurrenthashmap使用了分段锁，并不对整个数据进行锁定。\n\n# 5、初始容量大小和每次扩充容量大小不同\n\n# 6、计算hash值的方法不同\n\n\n# 13、 collection包结构，与collections的区别\n\n 1. collection是集合类的上级接口，子接口有 set、list、linkedlist、arraylist、vector、stack、 set；\n 2. collections是集合类的一个帮助类， 它包含有各种有关集合操作的静态多态方法，用于实现对各种集合的搜索、排序、线程安全化等操作。此类不能实例化，就像一个工具类，服务于java的 collection框架。\n\n\n# 14、 java的四种引用，强弱软虚\n\n# 强引用\n\n强引用是平常中使用最多的引用，强引用在程序内存不足（oom）的时候也不会被回收，使用方式：\n\nstring str = new string("str");\nsystem.out.println(str);\n\n\n# 软引用\n\n软引用在程序内存不足时，会被回收，使用方式：\n\n// 注意：wrf这个引用也是强引用，它是指向softreference这个对象的，\n// 这里的软引用指的是指向new string("str")的引用，也就是softreference类中t\nsoftreference<string> wrf = new softreference<string>(new string("str"));\n\n\n可用场景： 创建缓存的时候，创建的对象放进缓存中，当内存不足时，jvm就会回收早先创建 的对象。\n\n# 弱引用\n\n弱引用就是只要jvm垃圾回收器发现了它，就会将之回收，使用方式：\n\nweakreference<string> wrf = new weakreference<string>(str);\n\n\n可用场景： java源码中的java.util.weakhashmap 中的key 就是使用弱引用，我的理解就是， 一旦我不需要某个引用，jvm会自动帮我处理它，这样我就不需要做其它操作。\n\n# 虚引用\n\n虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入referencequeue 中。注意 哦，其它引用是被jvm回收后才被传入referencequeue 中的。由于这个机制，所以虚引用大多 被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有referencequeue ， 使用例子：\n\nphantomreference<string> prf = new phantomreference<string>(new string("str"),\nnew referencequeue<>());\n\n\n可用场景： 对象销毁前的一些操作，比如说资源释放等。object.finalize() 虽然也可以做这 类动作，但是这个方式即不安全又低效\n\n# 注:\n\n上诉所说的几类引用，都是指对象本身的引用，而不是指reference的四个子类的引用 (softreference等)。\n\n\n# 15、 泛型常用特点\n\n泛型是java se 1.5之后的特性， 《java 核心技术》中对泛型的定义是：\n\n> “泛型” 意味着编写的代码可以被不同类型的对象所重用。\n\n“泛型”，顾名思义，“泛指的类型”。我们提供了泛指的概念，但具体执行的时候却可以有具体的规则来约束，比如我们用的非常多的arraylist就是个泛型类，arraylist作为集合可以存放各种元素，如 integer, string，自定义的各种类型等，但在我们使用的时候通过具体的规则来约束，如我们可以约束集合中只存放integer类型的元素，如\n\nlist<integer> inidata = new arraylist<>();\n\n\n# 使用泛型的好处？\n\n以集合来举例，使用泛型的好处是我们不必因为添加元素类型的不同而定义不同类型的集合，如整型集合类，浮点型集合类，字符串集合类，我们可以定义一个集合来存放整型、浮点型，字符串型数据，而这并不是最重要的，因为我们只要把底层存储设置了object即可，添加的数据全部都可向上转型为object。 更重要的是我们可以通过规则按照自己的想法控制存储的数据类型。',charsets:{cjk:!0}},{title:"002.基础篇002",frontmatter:{title:"002.基础篇002",categories:["Java","基础"],tags:["Java基础"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-01T12:37:58.000Z",permalink:"/pages/cd3bc7/"},regularPath:"/07.Java/01.%E5%9F%BA%E7%A1%80%E7%AF%87/002.%E5%9F%BA%E7%A1%80%E7%AF%87002.html",relativePath:"07.Java/01.基础篇/002.基础篇002.md",key:"v-3a7f0068",path:"/pages/cd3bc7/",headers:[{level:2,title:"16、Java创建对象有几种方式？",slug:"_16、java创建对象有几种方式",normalizedTitle:"16、java创建对象有几种方式？",charIndex:13},{level:2,title:"17、有没有可能两个不相等的对象有相同的hashcode",slug:"_17、有没有可能两个不相等的对象有相同的hashcode",normalizedTitle:"17、有没有可能两个不相等的对象有相同的hashcode",charIndex:108},{level:2,title:"18、深拷贝和浅拷贝的区别是什么?",slug:"_18、深拷贝和浅拷贝的区别是什么",normalizedTitle:"18、深拷贝和浅拷贝的区别是什么?",charIndex:411},{level:2,title:"19、ﬁnal有哪些用法?",slug:"_19、final有哪些用法",normalizedTitle:"19、ﬁnal有哪些用法?",charIndex:611},{level:2,title:"20、static都有哪些用法?",slug:"_20、static都有哪些用法",normalizedTitle:"20、static都有哪些用法?",charIndex:968},{level:2,title:"21、3*0.1 == 0.3返回值是什么",slug:"_21、3-0-1-0-3返回值是什么",normalizedTitle:"21、3*0.1 == 0.3返回值是什么",charIndex:1481},{level:2,title:"22、a=a+b与a+=b有什么区别吗?",slug:"_22、a-a-b与a-b有什么区别吗",normalizedTitle:"22、a=a+b与a+=b有什么区别吗?",charIndex:1534},{level:2,title:"23、try catch ﬁnally，try里有return，ﬁnally还执行么？",slug:"_23、try-catch-finally-try里有return-finally还执行么",normalizedTitle:"23、try catch ﬁnally，try里有return，ﬁnally还执行么？",charIndex:1904},{level:2,title:"24、 Excption与Error包结构",slug:"_24、-excption与error包结构",normalizedTitle:"24、 excption与error包结构",charIndex:2229},{level:4,title:"1、运行时异常",slug:"_1、运行时异常",normalizedTitle:"1、运行时异常",charIndex:2344},{level:4,title:"2、被检查异常",slug:"_2、被检查异常",normalizedTitle:"2、被检查异常",charIndex:3342},{level:4,title:"3、错误",slug:"_3、错误",normalizedTitle:"3、错误",charIndex:3664},{level:2,title:"25、OOM你遇到过哪些情况，SOF你遇到过哪些情况",slug:"_25、oom你遇到过哪些情况-sof你遇到过哪些情况",normalizedTitle:"25、oom你遇到过哪些情况，sof你遇到过哪些情况",charIndex:3889},{level:3,title:"OOM：",slug:"oom",normalizedTitle:"oom：",charIndex:3920},{level:4,title:"1，OutOfMemoryError异常",slug:"_1-outofmemoryerror异常",normalizedTitle:"1，outofmemoryerror异常",charIndex:3928},{level:4,title:"2，虚拟机栈和本地方法栈溢出",slug:"_2-虚拟机栈和本地方法栈溢出",normalizedTitle:"2，虚拟机栈和本地方法栈溢出",charIndex:4427},{level:4,title:"3，运行时常量池溢出",slug:"_3-运行时常量池溢出",normalizedTitle:"3，运行时常量池溢出",charIndex:4564},{level:4,title:"4，方法区溢出",slug:"_4-方法区溢出",normalizedTitle:"4，方法区溢出",charIndex:4846},{level:3,title:"SOF（堆栈溢出StackOverﬂow）：",slug:"sof-堆栈溢出stackoverflow",normalizedTitle:"sof（堆栈溢出stackoverﬂow）：",charIndex:5068},{level:2,title:"26、 简述线程、程序、进程的基本概念。以及他们之间关系是什么?",slug:"_26、-简述线程、程序、进程的基本概念。以及他们之间关系是什么",normalizedTitle:"26、 简述线程、程序、进程的基本概念。以及他们之间关系是什么?",charIndex:5249},{level:2,title:"27、Java 序列化中如果有些字段不想进行序列化，怎么办？",slug:"_27、java-序列化中如果有些字段不想进行序列化-怎么办",normalizedTitle:"27、java 序列化中如果有些字段不想进行序列化，怎么办？",charIndex:5787},{level:2,title:"28、说说Java 中 IO 流",slug:"_28、说说java-中-io-流",normalizedTitle:"28、说说java 中 io 流",charIndex:5962},{level:4,title:"Java 中 IO 流分为几种?",slug:"java-中-io-流分为几种",normalizedTitle:"java 中 io 流分为几种?",charIndex:5982},{level:2,title:"29、 Java IO与 NIO的区别",slug:"_29、-java-io与-nio的区别",normalizedTitle:"29、 java io与 nio的区别",charIndex:6304},{level:2,title:"30、java反射的作用于原理",slug:"_30、java反射的作用于原理",normalizedTitle:"30、java反射的作用于原理",charIndex:6457},{level:4,title:"1、定义：",slug:"_1、定义",normalizedTitle:"1、定义：",charIndex:6476},{level:4,title:"2、哪里会用到反射机制？",slug:"_2、哪里会用到反射机制",normalizedTitle:"2、哪里会用到反射机制？",charIndex:6620},{level:4,title:"3、反射的实现方式：",slug:"_3、反射的实现方式",normalizedTitle:"3、反射的实现方式：",charIndex:6746},{level:4,title:"4、实现Java反射的类：",slug:"_4、实现java反射的类",normalizedTitle:"4、实现java反射的类：",charIndex:6876},{level:4,title:"5、反射机制的优缺点：",slug:"_5、反射机制的优缺点",normalizedTitle:"5、反射机制的优缺点：",charIndex:7048}],headersStr:"16、Java创建对象有几种方式？ 17、有没有可能两个不相等的对象有相同的hashcode 18、深拷贝和浅拷贝的区别是什么? 19、ﬁnal有哪些用法? 20、static都有哪些用法? 21、3*0.1 == 0.3返回值是什么 22、a=a+b与a+=b有什么区别吗? 23、try catch ﬁnally，try里有return，ﬁnally还执行么？ 24、 Excption与Error包结构 1、运行时异常 2、被检查异常 3、错误 25、OOM你遇到过哪些情况，SOF你遇到过哪些情况 OOM： 1，OutOfMemoryError异常 2，虚拟机栈和本地方法栈溢出 3，运行时常量池溢出 4，方法区溢出 SOF（堆栈溢出StackOverﬂow）： 26、 简述线程、程序、进程的基本概念。以及他们之间关系是什么? 27、Java 序列化中如果有些字段不想进行序列化，怎么办？ 28、说说Java 中 IO 流 Java 中 IO 流分为几种? 29、 Java IO与 NIO的区别 30、java反射的作用于原理 1、定义： 2、哪里会用到反射机制？ 3、反射的实现方式： 4、实现Java反射的类： 5、反射机制的优缺点：",content:'# 基础篇002\n\n\n# 16、Java创建对象有几种方式？\n\njava中提供了以下四种创建对象的方式:\n\n 1. new创建新对象\n 2. 通过反射机制\n 3. 采用clone机制\n 4. 通过序列化机制\n\n\n# 17、有没有可能两个不相等的对象有相同的hashcode\n\n有可能.在产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般有以下几种方式来处理:\n\n 1. 拉链法:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储.\n 2. 开放定址法:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将记录存入\n 3. 再哈希:又叫双哈希法,有多个不同的Hash函数.当发生冲突时,使用第二个,第三个….等哈希函数计算地址,直到无冲突\n\n\n# 18、深拷贝和浅拷贝的区别是什么?\n\n浅拷贝:被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.换言之,浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象.\n\n深拷贝:被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对象.而不再是原有的那些被引用的对象.换言之.深拷贝把要复制的对象所引用的对象都复制了一遍\n\n\n# 19、ﬁnal有哪些用法?\n\nfinal也是很多面试喜欢问的地方,但我觉得这个问题很无聊,通常能回答下以下5点就不错了:\n\n * 被final修饰的类不可以被继承\n * 被final修饰的方法不可以被重写\n * 被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.\n * 被final修饰的方法,JVM会尝试将其内联,以提高运行效率\n * 被final修饰的常量,在编译阶段会存入常量池中.\n\n除此之外,编译器对final域要遵守的两个重排序规则更好: 在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作 之间不能重排序 初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不 能重排序.\n\n\n# 20、static都有哪些用法?\n\n所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.\n\n除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作\n\npublic calss PreCache{\n    static{\n    //执行相关操作\n    }\n}\n\n\n此外static也多用于修饰内部类,此时称之为静态内部类. 最后一种用法就是静态导包,即import static .import static是在JDK 1.5之后引入的新特性,可以用 来指定导入某个类中的静态资源,并且不需要使用类名,可以直接使用资源名,比如:\n\nimport static java.lang.Math.*;\npublic class Test{\n    public static void main(String[] args){\n        //System.out.println(Math.sin(20));传统做法\n        System.out.println(sin(20));\n    }\n}\n\n\n\n# 21、3*0.1 == 0.3返回值是什么\n\nfalse,因为有些浮点数不能完全精确的表示出来.\n\n\n# 22、a=a+b与a+=b有什么区别吗?\n\n+= 操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,而a=a+b则不会自动进行类型转换.如：\n\nbyte a = 127;\nbyte b = 127;\nb = a + b; // 报编译错误:cannot convert from int to byte\nb += a;\n\n\n以下代码是否有错,有的话怎么改？\n\nshort s1= 1;\ns1 = s1 + 1;\n\n\n有错误.short类型在进行运算时会自动提升为int类型,也就是说s1+1 的运算结果是int类型,而s1是 short类型,此时编译器会报错. 正确写法：\n\nshort s1= 1;\ns1 += 1;\n\n\n+=操作符会对右边的表达式结果强转匹配左边的数据类型,所以没错.\n\n\n# 23、try catch ﬁnally，try里有return，ﬁnally还执行么？\n\n执行，并且finally的执行早于try里面的return\n\n结论： 1、不管有木有出现异常，finally块中代码都会执行； 2、当try和catch中有return时，finally仍然会执行； 3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的 值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数 返回值是在finally执行前确定的； 4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。\n\n\n# 24、 Excption与Error包结构\n\nJava可抛出(Throwable)的结构分为三种类型：被检查的异常(CheckedException)，运行时异常 (RuntimeException)，错误(Error)。\n\n# 1、运行时异常\n\n定义:RuntimeException及其子类都被称为运行时异常\n\n特点:Java编译器不会检查它。也就是说，当程序中可能出现这类异常时，倘若既"没有通过throws 声明抛出它"，也"没有用try-catch语句捕获它"，还是会编译通过。例如，除数为零时产生的 ArithmeticException异常，数组越界时产生的IndexOutOfBoundsException异常，fail-fast机制产 生的ConcurrentModificationException异常（java.util包下面的所有的集合类都是快速失败 的，“快速失败”也就是fail-fast，它是Java集合的一种错误检测机制。当多个线程对集合进行结构上 的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线 程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了集合A的 结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制，这个错叫并发修改异常。Failsafe， java.util.concurrent包下面的所有的类都是安全失败的，在遍历过程中，如果已经遍历的数 组上的内容变化了，迭代器不会抛出ConcurrentModificationException异常。如果未遍历的数组 上的内容发生了变化，则有可能反映到迭代过程中。这就是ConcurrentHashMap迭代器弱一致的 表现。ConcurrentHashMap的弱一致性主要是为了提升效率，是一致性与效率之间的一种权衡。 要成为强一致性，就得到处使用锁，甚至是全局锁，这就与Hashtable和同步的HashMap一样 了。）等，都属于运行时异常。\n\n常见的五种运行时异常：\n\n * ClassCastException（类转换异常）\n * IndexOutOfBoundsException（数组越界）\n * NullPointerException（空指针异常）\n * ArrayStoreException（数据存储异常，操作数组是类型不一致）\n * BuﬀerOverﬂowException\n\n# 2、被检查异常\n\n定义:Exception类本身，以及Exception的子类中除了"运行时异常"之外的其它子类都属于被检查异常。\n\n特点 : Java编译器会检查它。 此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。例如，CloneNotSupportedException就属于被检查异常。当通过 clone()接口去克隆一个对象，而该对象对应的类没有实现Cloneable接口，就会抛出 CloneNotSupportedException异常。被检查异常通常都是可以恢复的。 如：IOException，FileNotFoundException ，SQLException\n\n# 3、错误\n\n定义 : Error类及其子类。\n\n特点 : 和运行时异常一样，编译器也不会对错误进行检查。\n\n当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。程序本身无法修复这些错误的。例如，VirtualMachineError就属于错误。出现这种错误会导致程序终止运行。 OutOfMemoryError、ThreadDeath。\n\nJava虚拟机规范规定JVM的内存分为了好几块，比如堆，栈，程序计数器，方法区等\n\n\n# 25、OOM你遇到过哪些情况，SOF你遇到过哪些情况\n\n\n# OOM：\n\n# 1，OutOfMemoryError异常\n\n除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生OutOfMemoryError(OOM)异常的可能。\n\nJava Heap 溢出：\n\n一般的异常信息：java.lang.OutOfMemoryError:Java heap spacess。\n\njava堆用于存储对象实例，我们只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量限制后产生内存溢出异常。\n\n出现这种异常，一般手段是先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，先分清是因为内存泄漏(Memory Leak)还是内存溢出(Memory Overﬂow)。\n\n如果是内存泄漏，可进一步通过工具查看泄漏对象到GCRoots的引用链。于是就能找到泄漏对象是通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收。\n\n如果不存在泄漏，那就应该检查虚拟机的参数(-Xmx与-Xms)的设置是否适当。\n\n# 2，虚拟机栈和本地方法栈溢出\n\n如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverﬂowError异常。如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常\n\n这里需要注意当栈的大小越大可分配的线程数就越少。\n\n# 3，运行时常量池溢出\n\n异常信息：java.lang.OutOfMemoryError:PermGenspace 如果要向运行时常量池中添加内容，最简单的做法就是使用String.intern()这个Native方法。该方法的作用是：如果池中已经包含一个等于此String的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。由于常量池分配在方法区内，我们可以通过-XX:PermSize和-XX:MaxPermSize限制方法区的大小，从而间接限制其中常量池的容量。\n\n# 4，方法区溢出\n\n方法区用于存放Class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。也有可能是方法区中保存的class对象没有被及时回收掉或者class信息占用的内存超过了我们配置。 异常信息：java.lang.OutOfMemoryError:PermGenspace方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是很苛刻的。在经常动态生成大量Class的应用中，要特别注意这点。\n\n\n# SOF（堆栈溢出StackOverﬂow）：\n\nStackOverﬂowError 的定义：当应用程序递归太深而发生堆栈溢出时，抛出该错误。\n\n因为栈一般默认为1-2m，一旦出现死循环或者是大量的递归调用，在不断的压栈过程中，造成栈容量超过1m而导致溢出。\n\n栈溢出的原因：递归调用，大量循环或死循环，全局变量是否过多，数组、List、map数据过大。\n\n\n# 26、 简述线程、程序、进程的基本概念。以及他们之间关系是什么?\n\n线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。\n\n程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。\n\n进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存 中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。\n\n\n# 27、Java 序列化中如果有些字段不想进行序列化，怎么办？\n\n对于不想进行序列化的变量，使用 transient 关键字修饰。\n\ntransient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。\n\n\n# 28、说说Java 中 IO 流\n\n# Java 中 IO 流分为几种?\n\n * 按照流的流向分，可以分为输入流和输出流；\n * 按照操作单元划分，可以划分为字节流和字符流；\n * 按照流的角色划分为节点流和处理流。\n\nJava Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\n\n * InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\n * OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n按操作方式分类结构图：\n\n\n\n按操作对象分类结构图：\n\n\n# 29、 Java IO与 NIO的区别\n\nNIO即New IO，这个库是在JDK1.4中才引入的。NIO和IO有相同的作用和目的，但实现方式不同， NIO主要用到的是块，所以NIO的效率要比IO高很多。在Java API中提供了两套NIO，一套是针对标准输入输出NIO，另一套就是网络编程NIO。\n\n\n# 30、java反射的作用于原理\n\n# 1、定义：\n\n反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。\n\n> 这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。\n\n# 2、哪里会用到反射机制？\n\njdbc就是典型的反射\n\nClass.forName(\'com.mysql.jdbc.Driver.class\');//加载MySQL的驱动类\n\n\n这就是反射。如hibernate，struts等框架使用反射实现的。\n\n# 3、反射的实现方式：\n\n第一步：获取Class对象，有4中方法： 1）Class.forName(“类的路径”)； 2）类名.class 3）对象名.getClass() 4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象\n\n# 4、实现Java反射的类：\n\n1）Class：表示正在运行的Java应用程序中的类和接口 注意： 所有获取对象的信息都需要Class类来实现。 2）Field：提供有关类和接口的属性信息，以及对它的动态访问权限。 3）Constructor：提供关于类的单个构造方法的信息以及它的访问权限 4）Method：提供类或接口中某个方法的信息\n\n# 5、反射机制的优缺点：\n\n优点： 1）能够运行时动态获取类的实例，提高灵活性； 2）与动态编译结合 缺点： 1）使用反射性能较低，需要解析字节码，将内存中的对象进行解析。 解决方案： 1、通过setAccessible(true)关闭JDK的安全检查来提升反射速度； 2、多次创建一个类的实例时，有缓存会快很多 3、 ReﬂectASM工具类，通过字节码生成的方式加快反射速度 2）相对不安全，破坏了封装性（因为通过反射可以获得私有方法和属性）',normalizedContent:'# 基础篇002\n\n\n# 16、java创建对象有几种方式？\n\njava中提供了以下四种创建对象的方式:\n\n 1. new创建新对象\n 2. 通过反射机制\n 3. 采用clone机制\n 4. 通过序列化机制\n\n\n# 17、有没有可能两个不相等的对象有相同的hashcode\n\n有可能.在产生hash冲突时,两个不相等的对象就会有相同的 hashcode 值.当hash冲突产生时,一般有以下几种方式来处理:\n\n 1. 拉链法:每个哈希表节点都有一个next指针,多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表进行存储.\n 2. 开放定址法:一旦发生了冲突,就去寻找下一个空的散列地址,只要散列表足够大,空的散列地址总能找到,并将记录存入\n 3. 再哈希:又叫双哈希法,有多个不同的hash函数.当发生冲突时,使用第二个,第三个….等哈希函数计算地址,直到无冲突\n\n\n# 18、深拷贝和浅拷贝的区别是什么?\n\n浅拷贝:被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指向原来的对象.换言之,浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象.\n\n深拷贝:被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向被复制过的新对象.而不再是原有的那些被引用的对象.换言之.深拷贝把要复制的对象所引用的对象都复制了一遍\n\n\n# 19、ﬁnal有哪些用法?\n\nfinal也是很多面试喜欢问的地方,但我觉得这个问题很无聊,通常能回答下以下5点就不错了:\n\n * 被final修饰的类不可以被继承\n * 被final修饰的方法不可以被重写\n * 被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.\n * 被final修饰的方法,jvm会尝试将其内联,以提高运行效率\n * 被final修饰的常量,在编译阶段会存入常量池中.\n\n除此之外,编译器对final域要遵守的两个重排序规则更好: 在构造函数内对一个final域的写入,与随后把这个被构造对象的引用赋值给一个引用变量,这两个操作 之间不能重排序 初次读一个包含final域的对象的引用,与随后初次读这个final域,这两个操作之间不 能重排序.\n\n\n# 20、static都有哪些用法?\n\n所有的人都知道static关键字这两个基本的用法:静态变量和静态方法.也就是被static所修饰的变量/方法都属于类的静态资源,类实例所共享.\n\n除了静态变量和静态方法之外,static也用于静态块,多用于初始化操作\n\npublic calss precache{\n    static{\n    //执行相关操作\n    }\n}\n\n\n此外static也多用于修饰内部类,此时称之为静态内部类. 最后一种用法就是静态导包,即import static .import static是在jdk 1.5之后引入的新特性,可以用 来指定导入某个类中的静态资源,并且不需要使用类名,可以直接使用资源名,比如:\n\nimport static java.lang.math.*;\npublic class test{\n    public static void main(string[] args){\n        //system.out.println(math.sin(20));传统做法\n        system.out.println(sin(20));\n    }\n}\n\n\n\n# 21、3*0.1 == 0.3返回值是什么\n\nfalse,因为有些浮点数不能完全精确的表示出来.\n\n\n# 22、a=a+b与a+=b有什么区别吗?\n\n+= 操作符会进行隐式自动类型转换,此处a+=b隐式的将加操作的结果类型强制转换为持有结果的类型,而a=a+b则不会自动进行类型转换.如：\n\nbyte a = 127;\nbyte b = 127;\nb = a + b; // 报编译错误:cannot convert from int to byte\nb += a;\n\n\n以下代码是否有错,有的话怎么改？\n\nshort s1= 1;\ns1 = s1 + 1;\n\n\n有错误.short类型在进行运算时会自动提升为int类型,也就是说s1+1 的运算结果是int类型,而s1是 short类型,此时编译器会报错. 正确写法：\n\nshort s1= 1;\ns1 += 1;\n\n\n+=操作符会对右边的表达式结果强转匹配左边的数据类型,所以没错.\n\n\n# 23、try catch ﬁnally，try里有return，ﬁnally还执行么？\n\n执行，并且finally的执行早于try里面的return\n\n结论： 1、不管有木有出现异常，finally块中代码都会执行； 2、当try和catch中有return时，finally仍然会执行； 3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的 值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数 返回值是在finally执行前确定的； 4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。\n\n\n# 24、 excption与error包结构\n\njava可抛出(throwable)的结构分为三种类型：被检查的异常(checkedexception)，运行时异常 (runtimeexception)，错误(error)。\n\n# 1、运行时异常\n\n定义:runtimeexception及其子类都被称为运行时异常\n\n特点:java编译器不会检查它。也就是说，当程序中可能出现这类异常时，倘若既"没有通过throws 声明抛出它"，也"没有用try-catch语句捕获它"，还是会编译通过。例如，除数为零时产生的 arithmeticexception异常，数组越界时产生的indexoutofboundsexception异常，fail-fast机制产 生的concurrentmodificationexception异常（java.util包下面的所有的集合类都是快速失败 的，“快速失败”也就是fail-fast，它是java集合的一种错误检测机制。当多个线程对集合进行结构上 的改变的操作时，有可能会产生fail-fast机制。记住是有可能，而不是一定。例如：假设存在两个线 程（线程1、线程2），线程1通过iterator在遍历集合a中的元素，在某个时候线程2修改了集合a的 结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 concurrentmodificationexception 异常，从而产生fail-fast机制，这个错叫并发修改异常。failsafe， java.util.concurrent包下面的所有的类都是安全失败的，在遍历过程中，如果已经遍历的数 组上的内容变化了，迭代器不会抛出concurrentmodificationexception异常。如果未遍历的数组 上的内容发生了变化，则有可能反映到迭代过程中。这就是concurrenthashmap迭代器弱一致的 表现。concurrenthashmap的弱一致性主要是为了提升效率，是一致性与效率之间的一种权衡。 要成为强一致性，就得到处使用锁，甚至是全局锁，这就与hashtable和同步的hashmap一样 了。）等，都属于运行时异常。\n\n常见的五种运行时异常：\n\n * classcastexception（类转换异常）\n * indexoutofboundsexception（数组越界）\n * nullpointerexception（空指针异常）\n * arraystoreexception（数据存储异常，操作数组是类型不一致）\n * buﬀeroverﬂowexception\n\n# 2、被检查异常\n\n定义:exception类本身，以及exception的子类中除了"运行时异常"之外的其它子类都属于被检查异常。\n\n特点 : java编译器会检查它。 此类异常，要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。例如，clonenotsupportedexception就属于被检查异常。当通过 clone()接口去克隆一个对象，而该对象对应的类没有实现cloneable接口，就会抛出 clonenotsupportedexception异常。被检查异常通常都是可以恢复的。 如：ioexception，filenotfoundexception ，sqlexception\n\n# 3、错误\n\n定义 : error类及其子类。\n\n特点 : 和运行时异常一样，编译器也不会对错误进行检查。\n\n当资源不足、约束失败、或是其它程序无法继续运行的条件发生时，就产生错误。程序本身无法修复这些错误的。例如，virtualmachineerror就属于错误。出现这种错误会导致程序终止运行。 outofmemoryerror、threaddeath。\n\njava虚拟机规范规定jvm的内存分为了好几块，比如堆，栈，程序计数器，方法区等\n\n\n# 25、oom你遇到过哪些情况，sof你遇到过哪些情况\n\n\n# oom：\n\n# 1，outofmemoryerror异常\n\n除了程序计数器外，虚拟机内存的其他几个运行时区域都有发生outofmemoryerror(oom)异常的可能。\n\njava heap 溢出：\n\n一般的异常信息：java.lang.outofmemoryerror:java heap spacess。\n\njava堆用于存储对象实例，我们只要不断的创建对象，并且保证gc roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，就会在对象数量达到最大堆容量限制后产生内存溢出异常。\n\n出现这种异常，一般手段是先通过内存映像分析工具(如eclipse memory analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，先分清是因为内存泄漏(memory leak)还是内存溢出(memory overﬂow)。\n\n如果是内存泄漏，可进一步通过工具查看泄漏对象到gcroots的引用链。于是就能找到泄漏对象是通过怎样的路径与gc roots相关联并导致垃圾收集器无法自动回收。\n\n如果不存在泄漏，那就应该检查虚拟机的参数(-xmx与-xms)的设置是否适当。\n\n# 2，虚拟机栈和本地方法栈溢出\n\n如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出stackoverﬂowerror异常。如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出outofmemoryerror异常\n\n这里需要注意当栈的大小越大可分配的线程数就越少。\n\n# 3，运行时常量池溢出\n\n异常信息：java.lang.outofmemoryerror:permgenspace 如果要向运行时常量池中添加内容，最简单的做法就是使用string.intern()这个native方法。该方法的作用是：如果池中已经包含一个等于此string的字符串，则返回代表池中这个字符串的string对象；否则，将此string对象包含的字符串添加到常量池中，并且返回此string对象的引用。由于常量池分配在方法区内，我们可以通过-xx:permsize和-xx:maxpermsize限制方法区的大小，从而间接限制其中常量池的容量。\n\n# 4，方法区溢出\n\n方法区用于存放class的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。也有可能是方法区中保存的class对象没有被及时回收掉或者class信息占用的内存超过了我们配置。 异常信息：java.lang.outofmemoryerror:permgenspace方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，判定条件是很苛刻的。在经常动态生成大量class的应用中，要特别注意这点。\n\n\n# sof（堆栈溢出stackoverﬂow）：\n\nstackoverﬂowerror 的定义：当应用程序递归太深而发生堆栈溢出时，抛出该错误。\n\n因为栈一般默认为1-2m，一旦出现死循环或者是大量的递归调用，在不断的压栈过程中，造成栈容量超过1m而导致溢出。\n\n栈溢出的原因：递归调用，大量循环或死循环，全局变量是否过多，数组、list、map数据过大。\n\n\n# 26、 简述线程、程序、进程的基本概念。以及他们之间关系是什么?\n\n线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。\n\n程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。\n\n进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 cpu 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存 中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。\n\n\n# 27、java 序列化中如果有些字段不想进行序列化，怎么办？\n\n对于不想进行序列化的变量，使用 transient 关键字修饰。\n\ntransient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。\n\n\n# 28、说说java 中 io 流\n\n# java 中 io 流分为几种?\n\n * 按照流的流向分，可以分为输入流和输出流；\n * 按照操作单元划分，可以划分为字节流和字符流；\n * 按照流的角色划分为节点流和处理流。\n\njava io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， java i0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\n\n * inputstream/reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\n * outputstream/writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n按操作方式分类结构图：\n\n\n\n按操作对象分类结构图：\n\n\n# 29、 java io与 nio的区别\n\nnio即new io，这个库是在jdk1.4中才引入的。nio和io有相同的作用和目的，但实现方式不同， nio主要用到的是块，所以nio的效率要比io高很多。在java api中提供了两套nio，一套是针对标准输入输出nio，另一套就是网络编程nio。\n\n\n# 30、java反射的作用于原理\n\n# 1、定义：\n\n反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。\n\n> 这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。\n\n# 2、哪里会用到反射机制？\n\njdbc就是典型的反射\n\nclass.forname(\'com.mysql.jdbc.driver.class\');//加载mysql的驱动类\n\n\n这就是反射。如hibernate，struts等框架使用反射实现的。\n\n# 3、反射的实现方式：\n\n第一步：获取class对象，有4中方法： 1）class.forname(“类的路径”)； 2）类名.class 3）对象名.getclass() 4）基本类型的包装类，可以调用包装类的type属性来获得该包装类的class对象\n\n# 4、实现java反射的类：\n\n1）class：表示正在运行的java应用程序中的类和接口 注意： 所有获取对象的信息都需要class类来实现。 2）field：提供有关类和接口的属性信息，以及对它的动态访问权限。 3）constructor：提供关于类的单个构造方法的信息以及它的访问权限 4）method：提供类或接口中某个方法的信息\n\n# 5、反射机制的优缺点：\n\n优点： 1）能够运行时动态获取类的实例，提高灵活性； 2）与动态编译结合 缺点： 1）使用反射性能较低，需要解析字节码，将内存中的对象进行解析。 解决方案： 1、通过setaccessible(true)关闭jdk的安全检查来提升反射速度； 2、多次创建一个类的实例时，有缓存会快很多 3、 reﬂectasm工具类，通过字节码生成的方式加快反射速度 2）相对不安全，破坏了封装性（因为通过反射可以获得私有方法和属性）',charsets:{cjk:!0}},{title:"003.基础篇003",frontmatter:{title:"003.基础篇003",categories:["Java","基础"],tags:["Java基础"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-01T13:14:06.000Z",permalink:"/pages/f7bc57/"},regularPath:"/07.Java/01.%E5%9F%BA%E7%A1%80%E7%AF%87/003.%E5%9F%BA%E7%A1%80%E7%AF%87003.html",relativePath:"07.Java/01.基础篇/003.基础篇003.md",key:"v-50ec3e68",path:"/pages/f7bc57/",headers:[{level:2,title:"31、说说List,Set,Map三者的区别？",slug:"_31、说说list-set-map三者的区别",normalizedTitle:"31、说说list,set,map三者的区别？",charIndex:13},{level:2,title:"32.、Object 有哪些常用方法？大致说一下每个方法的含义",slug:"_32-、object-有哪些常用方法-大致说一下每个方法的含义",normalizedTitle:"32.、object 有哪些常用方法？大致说一下每个方法的含义",charIndex:236},{level:3,title:"java.lang.Object",slug:"java-lang-object",normalizedTitle:"java.lang.object",charIndex:272},{level:4,title:"clone 方法",slug:"clone-方法",normalizedTitle:"clone 方法",charIndex:307},{level:4,title:"finalize 方法",slug:"finalize-方法",normalizedTitle:"finalize 方法",charIndex:458},{level:4,title:"equals 方法",slug:"equals-方法",normalizedTitle:"equals 方法",charIndex:519},{level:4,title:"hashCode 方法",slug:"hashcode-方法",normalizedTitle:"hashcode 方法",charIndex:598},{level:4,title:"wait 方法",slug:"wait-方法",normalizedTitle:"wait 方法",charIndex:921},{level:4,title:"notify 方法",slug:"notify-方法",normalizedTitle:"notify 方法",charIndex:1110},{level:4,title:"notifyAll 方法",slug:"notifyall-方法",normalizedTitle:"notifyall 方法",charIndex:1137},{level:4,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:1401},{level:2,title:"33、Java 创建对象有几种方式？",slug:"_33、java-创建对象有几种方式",normalizedTitle:"33、java 创建对象有几种方式？",charIndex:1738},{level:2,title:"34、获取一个类Class对象的方式有哪些？",slug:"_34、获取一个类class对象的方式有哪些",normalizedTitle:"34、获取一个类class对象的方式有哪些？",charIndex:2301},{level:2,title:"35、ArrayList 和 LinkedList 的区别有哪些？",slug:"_35、arraylist-和-linkedlist-的区别有哪些",normalizedTitle:"35、arraylist 和 linkedlist 的区别有哪些？",charIndex:2661},{level:3,title:"ArrayList",slug:"arraylist",normalizedTitle:"arraylist",charIndex:2664},{level:3,title:"LinkedList",slug:"linkedlist",normalizedTitle:"linkedlist",charIndex:2676},{level:3,title:"适用场景分析",slug:"适用场景分析",normalizedTitle:"适用场景分析",charIndex:3e3},{level:2,title:"36、用过 ArrayList 吗？说一下它有什么特点？",slug:"_36、用过-arraylist-吗-说一下它有什么特点",normalizedTitle:"36、用过 arraylist 吗？说一下它有什么特点？",charIndex:3184},{level:2,title:"37、有数组了为什么还要搞个 ArrayList 呢？",slug:"_37、有数组了为什么还要搞个-arraylist-呢",normalizedTitle:"37、有数组了为什么还要搞个 arraylist 呢？",charIndex:3654},{level:3,title:"38、说说什么是 fail-fast？",slug:"_38、说说什么是-fail-fast",normalizedTitle:"38、说说什么是 fail-fast？",charIndex:3827},{level:2,title:"39、说说Hashtable 与 HashMap 的区别",slug:"_39、说说hashtable-与-hashmap-的区别",normalizedTitle:"39、说说hashtable 与 hashmap 的区别",charIndex:4292},{level:2,title:"41、HashMap 的长度为什么是 2 的 N 次方呢？",slug:"_41、hashmap-的长度为什么是-2-的-n-次方呢",normalizedTitle:"41、hashmap 的长度为什么是 2 的 n 次方呢？",charIndex:6134},{level:2,title:"42、HashMap 与 ConcurrentHashMap 的异同",slug:"_42、hashmap-与-concurrenthashmap-的异同",normalizedTitle:"42、hashmap 与 concurrenthashmap 的异同",charIndex:6446},{level:2,title:"43、红黑树有哪几个特征？",slug:"_43、红黑树有哪几个特征",normalizedTitle:"43、红黑树有哪几个特征？",charIndex:6886},{level:2,title:"44、说说你平时是怎么处理 Java 异常的",slug:"_44、说说你平时是怎么处理-java-异常的",normalizedTitle:"44、说说你平时是怎么处理 java 异常的",charIndex:6941},{level:2,title:"45、说说深拷贝和浅拷贝？",slug:"_45、说说深拷贝和浅拷贝",normalizedTitle:"45、说说深拷贝和浅拷贝？",charIndex:7511}],headersStr:"31、说说List,Set,Map三者的区别？ 32.、Object 有哪些常用方法？大致说一下每个方法的含义 java.lang.Object clone 方法 finalize 方法 equals 方法 hashCode 方法 wait 方法 notify 方法 notifyAll 方法 总结 33、Java 创建对象有几种方式？ 34、获取一个类Class对象的方式有哪些？ 35、ArrayList 和 LinkedList 的区别有哪些？ ArrayList LinkedList 适用场景分析 36、用过 ArrayList 吗？说一下它有什么特点？ 37、有数组了为什么还要搞个 ArrayList 呢？ 38、说说什么是 fail-fast？ 39、说说Hashtable 与 HashMap 的区别 41、HashMap 的长度为什么是 2 的 N 次方呢？ 42、HashMap 与 ConcurrentHashMap 的异同 43、红黑树有哪几个特征？ 44、说说你平时是怎么处理 Java 异常的 45、说说深拷贝和浅拷贝？",content:'# 基础篇003\n\n\n# 31、说说List,Set,Map三者的区别？\n\n * List(对付顺序的好帮手)： List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象\n * Set(注重独一无二的性质): 不允许重复的集合。不会有多个元素引用相同的对象。\n * Map(用Key来搜索的专家): 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。\n\n\n# 32.、Object 有哪些常用方法？大致说一下每个方法的含义\n\n\n# java.lang.Object\n\n\n\n下面是对应方法的含义。\n\n# clone 方法\n\n保护方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出CloneNotSupportedException 异常，深拷贝也需要实现 Cloneable，同时其成员变量为引用类型的也需要实现 Cloneable，然后重写 clone 方法。\n\n# finalize 方法\n\n该方法和垃圾收集器有关系，判断一个对象是否可以被回收的最后一步就是判断是否重写了此方法。\n\n# equals 方法\n\n该方法使用频率非常高。一般 equals 和 == 是不一样的，但是在 Object 中两者是一样的。子类一般都要重写这个方法。\n\n# hashCode 方法\n\n该方法用于哈希查找，重写了 equals 方法一般都要重写 hashCode 方法，这个方法在一些具有哈希功能的 Collection 中用到。 一般必须满足 obj1.equals(obj2)==true 。可以推出 obj1.hashCode()==obj2.hashCode() ，但是hashCode 相等不一定就满足 equals。不过为了提高效率，应该尽量使上面两个条件接近等价。\n\n * JDK 1.6、1.7 默认是返回随机数；\n * JDK 1.8 默认是通过和当前线程有关的一个随机数 + 三个确定值，运用 Marsaglia’s xorshift scheme 随机数算法得到的一个随机数。\n\n# wait 方法\n\n配合 synchronized 使用，wait 方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait() 方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。调用该方法后当前线程进入睡眠状态，直到以下事件发生。\n\n 1. 其他线程调用了该对象的 notify 方法；\n 2. 其他线程调用了该对象的 notifyAll 方法；\n 3. 其他线程调用了 interrupt 中断该线程；\n 4. 时间间隔到了。 此时该线程就可以被调度了，如果是被中断的话就抛出一个 InterruptedException 异常。\n\n# notify 方法\n\n配合 synchronized 使用，该方法唤醒在该对象上等待队列中的某个线程（同步队列中的线程是给抢占 CPU 的线程，等待队列中的线程指的是等待唤醒的线程）。\n\n# notifyAll 方法\n\n配合 synchronized 使用，该方法唤醒在该对象上等待队列中的所有线程。\n\n# 总结\n\n只要把上面几个方法熟悉就可以了，toString 和 getClass 方法可以不用去讨论它们。该题目考察的是对 Object 的熟悉程度，平时用的很多方法并没看其定义但是也在用，比如说：wait() 方法，equals() 方法等。\n\nClass Object is the root of the class hierarchy.Every class has Object as a\nsuperclass. All objects, including arrays, implement the methods of this class.\n\n\n大致意思：Object 是所有类的根，是所有类的父类，所有对象包括数组都实现了 Object 的方法。\n\n\n# 33、Java 创建对象有几种方式？\n\n这题目看似简单，要好好回答起来还是有点小复杂的，我们来看看，到底有哪些方式可以创建对象？ 使用 new 关键字，这也是我们平时使用的最多的创建对象的方式，示例：\n\nUser user=new User();\n\n\n使用反射方式创建对象，使用 newInstance()，但是得处理两个异常 InstantiationException、IllegalAccessException：\n\nUser user=User.class.newInstance();\nObject object=(Object)Class.forName("java.lang.Object").newInstance()\n\n\n使用 clone 方法，前面题目中 clone 是 Object 的方法，所以所有对象都有这个方法。 使用反序列化创建对象，调用 ObjectInputStream 类的 readObject() 方法。 我们反序列化一个对象，JVM 会给我们创建一个单独的对象。JVM 创建对象并不会调用任何构造函数。一个对象实现了 Serializable 接口，就可以把对象写入到文件中，并通过读取文件来创建对象。 总结 创建对象的方式关键字：new、反射、clone 拷贝、反序列化。\n\n\n# 34、获取一个类Class对象的方式有哪些？\n\n搞清楚类对象和实例对象，但都是对象。 第一种：通过类对象的 getClass() 方法获取，细心点的都知道，这个 getClass 是 Object 类里面的 方法\n\nUser user=new User();\n//clazz就是一个User的类对象\nClass<?> clazz=user.getClass();\n\n\n第二种：通过类的静态成员表示，每个类都有隐含的静态成员 class。\n\n//clazz就是一个User的类对象\nClass<?> clazz=User.class;\n\n\n第三种：通过 Class 类的静态方法 forName() 方法获取。\n\nClass<?> clazz = Class.forName("com.tian.User");\n\n\n\n# 35、ArrayList 和 LinkedList 的区别有哪些？\n\n\n# ArrayList\n\n * 优点：ArrayList 是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n * 缺点：因为地址连续，ArrayList 要移动数据，所以插入和删除操作效率比较低。\n\n\n# LinkedList\n\n * 优点：LinkedList 基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址。对于新增和删除操作，LinkedList 比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。\n * 缺点：因为 LinkedList 要移动指针，所以查询操作性能比较低\n\n\n# 适用场景分析\n\n * 当需要对数据进行对随机访问的时候，选用 ArrayList。\n * 当需要对数据进行多次增加删除修改时，采用 LinkedList。\n\n如果容量固定，并且只会添加到尾部，不会引起扩容，优先采用 ArrayList。当然，绝大数业务的场景下，使用 ArrayList 就够了，但需要注意避免 ArrayList 的扩容，以及非顺序的插入。\n\n\n# 36、用过 ArrayList 吗？说一下它有什么特点？\n\n只要是搞 Java 的肯定都会回答“用过”。所以，回答题目的后半部分——ArrayList 的特点。可以从这几个方面去回答： 1.Java 集合框架中的一种存放相同类型的元素数据，是一种变长的集合类，基于定长数组实现，当加入数据达到一定程度后，会实行自动扩容，即扩大数组大小。 2.底层是使用数组实现，添加元素。\n\n * 如果 add(o)，添加到的是数组的尾部，如果要增加的数据量很大，应该使用 ensureCapacity()方法，该方法的作用是预先设置 ArrayList 的大小，这样可以大大提高初始化速度。\n * 如果使用 add(int,o)，添加到某个位置，那么可能会挪动大量的数组元素，并且可能会触发扩容机制。\n\n3.高并发的情况下，线程不安全。多个线程同时操作 ArrayList，会引发不可预知的异常或错误。ArrayList 实现了 Cloneable 接口，标识着它可以被复制。注意：ArrayList 里面的 clone() 复制其实是浅复制。\n\n\n# 37、有数组了为什么还要搞个 ArrayList 呢？\n\n通常我们在使用的时候，如果在不明确要插入多少数据的情况下，普通数组就很尴尬了，因为你不知道需要初始化数组大小为多少，而 ArrayList 可以使用默认的大小，当元素个数到达一定程度后，会自动扩容。 可以这么来理解：我们常说的数组是定死的数组，ArrayList 却是动态数组。\n\n\n# 38、说说什么是 fail-fast？\n\nfail-fast 机制是 Java 集合（Collection）中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。 例如：当某一个线程 A 通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了，那么线程 A 访问集合时，就会抛出 ConcurrentModificationException 异常，产生 fail-fast 事件。这里的操作主要是指 add、remove 和 clear，对集合元素个数进行修改。 解决办法：建议使用“java.util.concurrent 包下的类”去取代“java.util 包下的类”。可以这么理解：在遍历之前，把 modCount 记下来 expectModCount，后面 expectModCount 去和 modCount 进行比较，如果不相等了，证明已并发了，被修改了，于是抛出 ConcurrentModificationException 异常。\n\n\n# 39、说说Hashtable 与 HashMap 的区别\n\n 1. 出生的版本不一样，Hashtable 出生于 Java 发布的第一版本 JDK 1.0，HashMap 出生于 JDK1.2。\n 2. 都实现了 Map、Cloneable、Serializable（当前 JDK 版本 1.8）。\n 3. HashMap 继承的是 AbstractMap，并且 AbstractMap 也实现了 Map 接口。Hashtable 继承Dictionary。\n 4. Hashtable 中大部分 public 修饰普通方法都是 synchronized 字段修饰的，是线程安全的，HashMap 是非线程安全的。\n 5. Hashtable 的 key 不能为 null，value 也不能为 null，这个可以从 Hashtable 源码中的 put 方法看到，判断如果 value 为 null 就直接抛出空指针异常，在 put 方法中计算 key 的 hash 值之前并没有判断 key 为 null 的情况，那说明，这时候如果 key 为空，照样会抛出空指针异常。\n 6. HashMap 的 key 和 value 都可以为 null。在计算 hash 值的时候，有判断，如果key==null ，则其 hash=0 ；至于 value 是否为 null，根本没有判断过。\n 7. Hashtable 直接使用对象的 hash 值。hash 值是 JDK 根据对象的地址或者字符串或者数字算出来的 int 类型的数值。然后再使用除留余数法来获得最终的位置。然而除法运算是非常耗费时间的，效率很低。HashMap 为了提高计算效率，将哈希表的大小固定为了 2 的幂，这样在取模预算时，不需要做除法，只需要做位运算。位运算比除法的效率要高很多。\n 8. Hashtable、HashMap 都使用了 Iterator。而由于历史原因，Hashtable 还使用了Enumeration 的方式。\n 9. 默认情况下，初始容量不同，Hashtable 的初始长度是 11，之后每次扩充容量变为之前的2n+1（n 为上一次的长度）而 HashMap 的初始长度为 16，之后每次扩充变为原来的两倍。\n\n另外在 Hashtable 源码注释中有这么一句话：\n\nHashtable is synchronized. If a thread-safe implementation is not needed, it is\nrecommended to use HashMap in place of Hashtable . If a thread-safe highlyconcurrent\nimplementation is desired, then it is recommended to use\nConcurrentHashMap in place of Hashtable.\n\n\n大致意思：Hashtable 是线程安全，推荐使用 HashMap 代替 Hashtable；如果需要线程安全高并发的话，推荐使用 ConcurrentHashMap 代替 Hashtable。 这个回答完了，面试官可能会继续问：HashMap 是线程不安全的，那么在需要线程安全的情况下还要考虑性能，有什么解决方式？ 这里最好的选择就是 ConcurrentHashMap 了，但面试官肯定会叫你继续说一下ConcurrentHashMap 数据结构以及底层原理等。\n\n40、HashMap 中的 key 我们可以使用任何类作为 key 吗？\n\n平时可能大家使用的最多的就是使用 String 作为 HashMap 的 key，但是现在我们想使用某个自定义类作为 HashMap 的 key，那就需要注意以下几点：\n\n * 如果类重写了 equals 方法，它也应该重写 hashCode 方法。\n * 类的所有实例需要遵循与 equals 和 hashCode 相关的规则。\n * 如果一个类没有使用 equals，你不应该在 hashCode 中使用它。\n * 咱们自定义 key 类的最佳实践是使之为不可变的，这样，hashCode 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode 和 equals 在未来不会改变，这样就会解决与可变相关的问题了。\n\n\n# 41、HashMap 的长度为什么是 2 的 N 次方呢？\n\n为了能让 HashMap 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞，也就是说尽量把数据能均匀的分配，每个链表或者红黑树长度尽量相等。我们首先可能会想到 % 取模的操作来实现。 下面是回答的重点哟：\n\n> 取余（%）操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&）操作（也就是说hash % length == hash &(length - 1) 的前提是 length 是 2 的 n 次方）。并且，采用二进 制位操作 & ，相对于 % 能够提高运算效率。\n\n这就是为什么 HashMap 的长度需要 2 的 N 次方了。\n\n\n# 42、HashMap 与 ConcurrentHashMap 的异同\n\n 1. 都是 key-value 形式的存储数据；\n\n 2. HashMap 是线程不安全的，ConcurrentHashMap 是 JUC 下的线程安全的；\n\n 3. HashMap 底层数据结构是数组 + 链表（JDK 1.8 之前）。JDK 1.8 之后是数组 + 链表 + 红黑树。当链表中元素个数达到 8 的时候，链表的查询速度不如红黑树快，链表会转为红黑树，红黑树查询速度快；\n\n 4. HashMap 初始数组大小为 16（默认），当出现扩容的时候，以 0.75 * 数组大小的方式进行扩容；\n\n 5. ConcurrentHashMap 在 JDK 1.8 之前是采用分段锁来现实的 Segment + HashEntry，Segment 数组大小默认是 16，2 的 n 次方；JDK 1.8 之后，采用 Node + CAS + Synchronized来保证并发安全进行实现。\n\n\n# 43、红黑树有哪几个特征？\n\n紧接上个问题，面试官很有可能会问红黑树，下面把红黑树的几个特征列出来：\n\n\n# 44、说说你平时是怎么处理 Java 异常的\n\ntry-catch-finally\n\n * try 块负责监控可能出现异常的代码\n * catch 块负责捕获可能出现的异常，并进行处理\n * finally 块负责清理各种资源，不管是否出现异常都会执行\n * 其中 try 块是必须的，catch 和 finally 至少存在一个标准异常处理流程\n\n> 抛出异常→捕获异常→捕获成功（当 catch 的异常类型与抛出的异常类型匹配时，捕获成功） →异常被处理，程序继续运行 抛出异常→捕获异常→捕获失败（当 catch 的异常类型与抛出异 常类型不匹配时，捕获失败）→异常未被处理，程序中断运行\n\n在开发过程中会使用到自定义异常，在通常情况下，程序很少会自己抛出异常，因为异常的类名通常也包含了该异常的有用信息，所以在选择抛出异常的时候，应该选择合适的异常类，从而可以明确地描述该异常情况，所以这时候往往都是自定义异常。自定义异常通常是通过继承 java.lang.Exception 类，如果想自定义 Runtime 异常的话，可以继承java.lang.RuntimeException 类，实现一个无参构造和一个带字符串参数的有参构造方法。在业务代码里，可以针对性的使用自定义异常。比如说：该用户不具备某某权限、余额不足等。\n\n\n# 45、说说深拷贝和浅拷贝？\n\n * 浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，\n\n * 深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，\n\n * 使用深拷贝的情况下，释放内存的时候不会因为出现浅拷贝时释放同一个内存的错误。\n\n注：最好是结合克隆已经原型模式联系在一起哈，记得复习的时候，把这几个联系起来的。',normalizedContent:'# 基础篇003\n\n\n# 31、说说list,set,map三者的区别？\n\n * list(对付顺序的好帮手)： list接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象\n * set(注重独一无二的性质): 不允许重复的集合。不会有多个元素引用相同的对象。\n * map(用key来搜索的专家): 使用键值对存储。map会维护与key有关联的值。两个key可以引用相同的对象，但key不能重复，典型的key是string类型，但也可以是任何对象。\n\n\n# 32.、object 有哪些常用方法？大致说一下每个方法的含义\n\n\n# java.lang.object\n\n\n\n下面是对应方法的含义。\n\n# clone 方法\n\n保护方法，实现对象的浅复制，只有实现了 cloneable 接口才可以调用该方法，否则抛出clonenotsupportedexception 异常，深拷贝也需要实现 cloneable，同时其成员变量为引用类型的也需要实现 cloneable，然后重写 clone 方法。\n\n# finalize 方法\n\n该方法和垃圾收集器有关系，判断一个对象是否可以被回收的最后一步就是判断是否重写了此方法。\n\n# equals 方法\n\n该方法使用频率非常高。一般 equals 和 == 是不一样的，但是在 object 中两者是一样的。子类一般都要重写这个方法。\n\n# hashcode 方法\n\n该方法用于哈希查找，重写了 equals 方法一般都要重写 hashcode 方法，这个方法在一些具有哈希功能的 collection 中用到。 一般必须满足 obj1.equals(obj2)==true 。可以推出 obj1.hashcode()==obj2.hashcode() ，但是hashcode 相等不一定就满足 equals。不过为了提高效率，应该尽量使上面两个条件接近等价。\n\n * jdk 1.6、1.7 默认是返回随机数；\n * jdk 1.8 默认是通过和当前线程有关的一个随机数 + 三个确定值，运用 marsaglia’s xorshift scheme 随机数算法得到的一个随机数。\n\n# wait 方法\n\n配合 synchronized 使用，wait 方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait() 方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。调用该方法后当前线程进入睡眠状态，直到以下事件发生。\n\n 1. 其他线程调用了该对象的 notify 方法；\n 2. 其他线程调用了该对象的 notifyall 方法；\n 3. 其他线程调用了 interrupt 中断该线程；\n 4. 时间间隔到了。 此时该线程就可以被调度了，如果是被中断的话就抛出一个 interruptedexception 异常。\n\n# notify 方法\n\n配合 synchronized 使用，该方法唤醒在该对象上等待队列中的某个线程（同步队列中的线程是给抢占 cpu 的线程，等待队列中的线程指的是等待唤醒的线程）。\n\n# notifyall 方法\n\n配合 synchronized 使用，该方法唤醒在该对象上等待队列中的所有线程。\n\n# 总结\n\n只要把上面几个方法熟悉就可以了，tostring 和 getclass 方法可以不用去讨论它们。该题目考察的是对 object 的熟悉程度，平时用的很多方法并没看其定义但是也在用，比如说：wait() 方法，equals() 方法等。\n\nclass object is the root of the class hierarchy.every class has object as a\nsuperclass. all objects, including arrays, implement the methods of this class.\n\n\n大致意思：object 是所有类的根，是所有类的父类，所有对象包括数组都实现了 object 的方法。\n\n\n# 33、java 创建对象有几种方式？\n\n这题目看似简单，要好好回答起来还是有点小复杂的，我们来看看，到底有哪些方式可以创建对象？ 使用 new 关键字，这也是我们平时使用的最多的创建对象的方式，示例：\n\nuser user=new user();\n\n\n使用反射方式创建对象，使用 newinstance()，但是得处理两个异常 instantiationexception、illegalaccessexception：\n\nuser user=user.class.newinstance();\nobject object=(object)class.forname("java.lang.object").newinstance()\n\n\n使用 clone 方法，前面题目中 clone 是 object 的方法，所以所有对象都有这个方法。 使用反序列化创建对象，调用 objectinputstream 类的 readobject() 方法。 我们反序列化一个对象，jvm 会给我们创建一个单独的对象。jvm 创建对象并不会调用任何构造函数。一个对象实现了 serializable 接口，就可以把对象写入到文件中，并通过读取文件来创建对象。 总结 创建对象的方式关键字：new、反射、clone 拷贝、反序列化。\n\n\n# 34、获取一个类class对象的方式有哪些？\n\n搞清楚类对象和实例对象，但都是对象。 第一种：通过类对象的 getclass() 方法获取，细心点的都知道，这个 getclass 是 object 类里面的 方法\n\nuser user=new user();\n//clazz就是一个user的类对象\nclass<?> clazz=user.getclass();\n\n\n第二种：通过类的静态成员表示，每个类都有隐含的静态成员 class。\n\n//clazz就是一个user的类对象\nclass<?> clazz=user.class;\n\n\n第三种：通过 class 类的静态方法 forname() 方法获取。\n\nclass<?> clazz = class.forname("com.tian.user");\n\n\n\n# 35、arraylist 和 linkedlist 的区别有哪些？\n\n\n# arraylist\n\n * 优点：arraylist 是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。\n * 缺点：因为地址连续，arraylist 要移动数据，所以插入和删除操作效率比较低。\n\n\n# linkedlist\n\n * 优点：linkedlist 基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址。对于新增和删除操作，linkedlist 比较占优势。linkedlist 适用于要头尾操作或插入指定位置的场景。\n * 缺点：因为 linkedlist 要移动指针，所以查询操作性能比较低\n\n\n# 适用场景分析\n\n * 当需要对数据进行对随机访问的时候，选用 arraylist。\n * 当需要对数据进行多次增加删除修改时，采用 linkedlist。\n\n如果容量固定，并且只会添加到尾部，不会引起扩容，优先采用 arraylist。当然，绝大数业务的场景下，使用 arraylist 就够了，但需要注意避免 arraylist 的扩容，以及非顺序的插入。\n\n\n# 36、用过 arraylist 吗？说一下它有什么特点？\n\n只要是搞 java 的肯定都会回答“用过”。所以，回答题目的后半部分——arraylist 的特点。可以从这几个方面去回答： 1.java 集合框架中的一种存放相同类型的元素数据，是一种变长的集合类，基于定长数组实现，当加入数据达到一定程度后，会实行自动扩容，即扩大数组大小。 2.底层是使用数组实现，添加元素。\n\n * 如果 add(o)，添加到的是数组的尾部，如果要增加的数据量很大，应该使用 ensurecapacity()方法，该方法的作用是预先设置 arraylist 的大小，这样可以大大提高初始化速度。\n * 如果使用 add(int,o)，添加到某个位置，那么可能会挪动大量的数组元素，并且可能会触发扩容机制。\n\n3.高并发的情况下，线程不安全。多个线程同时操作 arraylist，会引发不可预知的异常或错误。arraylist 实现了 cloneable 接口，标识着它可以被复制。注意：arraylist 里面的 clone() 复制其实是浅复制。\n\n\n# 37、有数组了为什么还要搞个 arraylist 呢？\n\n通常我们在使用的时候，如果在不明确要插入多少数据的情况下，普通数组就很尴尬了，因为你不知道需要初始化数组大小为多少，而 arraylist 可以使用默认的大小，当元素个数到达一定程度后，会自动扩容。 可以这么来理解：我们常说的数组是定死的数组，arraylist 却是动态数组。\n\n\n# 38、说说什么是 fail-fast？\n\nfail-fast 机制是 java 集合（collection）中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。 例如：当某一个线程 a 通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了，那么线程 a 访问集合时，就会抛出 concurrentmodificationexception 异常，产生 fail-fast 事件。这里的操作主要是指 add、remove 和 clear，对集合元素个数进行修改。 解决办法：建议使用“java.util.concurrent 包下的类”去取代“java.util 包下的类”。可以这么理解：在遍历之前，把 modcount 记下来 expectmodcount，后面 expectmodcount 去和 modcount 进行比较，如果不相等了，证明已并发了，被修改了，于是抛出 concurrentmodificationexception 异常。\n\n\n# 39、说说hashtable 与 hashmap 的区别\n\n 1. 出生的版本不一样，hashtable 出生于 java 发布的第一版本 jdk 1.0，hashmap 出生于 jdk1.2。\n 2. 都实现了 map、cloneable、serializable（当前 jdk 版本 1.8）。\n 3. hashmap 继承的是 abstractmap，并且 abstractmap 也实现了 map 接口。hashtable 继承dictionary。\n 4. hashtable 中大部分 public 修饰普通方法都是 synchronized 字段修饰的，是线程安全的，hashmap 是非线程安全的。\n 5. hashtable 的 key 不能为 null，value 也不能为 null，这个可以从 hashtable 源码中的 put 方法看到，判断如果 value 为 null 就直接抛出空指针异常，在 put 方法中计算 key 的 hash 值之前并没有判断 key 为 null 的情况，那说明，这时候如果 key 为空，照样会抛出空指针异常。\n 6. hashmap 的 key 和 value 都可以为 null。在计算 hash 值的时候，有判断，如果key==null ，则其 hash=0 ；至于 value 是否为 null，根本没有判断过。\n 7. hashtable 直接使用对象的 hash 值。hash 值是 jdk 根据对象的地址或者字符串或者数字算出来的 int 类型的数值。然后再使用除留余数法来获得最终的位置。然而除法运算是非常耗费时间的，效率很低。hashmap 为了提高计算效率，将哈希表的大小固定为了 2 的幂，这样在取模预算时，不需要做除法，只需要做位运算。位运算比除法的效率要高很多。\n 8. hashtable、hashmap 都使用了 iterator。而由于历史原因，hashtable 还使用了enumeration 的方式。\n 9. 默认情况下，初始容量不同，hashtable 的初始长度是 11，之后每次扩充容量变为之前的2n+1（n 为上一次的长度）而 hashmap 的初始长度为 16，之后每次扩充变为原来的两倍。\n\n另外在 hashtable 源码注释中有这么一句话：\n\nhashtable is synchronized. if a thread-safe implementation is not needed, it is\nrecommended to use hashmap in place of hashtable . if a thread-safe highlyconcurrent\nimplementation is desired, then it is recommended to use\nconcurrenthashmap in place of hashtable.\n\n\n大致意思：hashtable 是线程安全，推荐使用 hashmap 代替 hashtable；如果需要线程安全高并发的话，推荐使用 concurrenthashmap 代替 hashtable。 这个回答完了，面试官可能会继续问：hashmap 是线程不安全的，那么在需要线程安全的情况下还要考虑性能，有什么解决方式？ 这里最好的选择就是 concurrenthashmap 了，但面试官肯定会叫你继续说一下concurrenthashmap 数据结构以及底层原理等。\n\n40、hashmap 中的 key 我们可以使用任何类作为 key 吗？\n\n平时可能大家使用的最多的就是使用 string 作为 hashmap 的 key，但是现在我们想使用某个自定义类作为 hashmap 的 key，那就需要注意以下几点：\n\n * 如果类重写了 equals 方法，它也应该重写 hashcode 方法。\n * 类的所有实例需要遵循与 equals 和 hashcode 相关的规则。\n * 如果一个类没有使用 equals，你不应该在 hashcode 中使用它。\n * 咱们自定义 key 类的最佳实践是使之为不可变的，这样，hashcode 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashcode 和 equals 在未来不会改变，这样就会解决与可变相关的问题了。\n\n\n# 41、hashmap 的长度为什么是 2 的 n 次方呢？\n\n为了能让 hashmap 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞，也就是说尽量把数据能均匀的分配，每个链表或者红黑树长度尽量相等。我们首先可能会想到 % 取模的操作来实现。 下面是回答的重点哟：\n\n> 取余（%）操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&）操作（也就是说hash % length == hash &(length - 1) 的前提是 length 是 2 的 n 次方）。并且，采用二进 制位操作 & ，相对于 % 能够提高运算效率。\n\n这就是为什么 hashmap 的长度需要 2 的 n 次方了。\n\n\n# 42、hashmap 与 concurrenthashmap 的异同\n\n 1. 都是 key-value 形式的存储数据；\n\n 2. hashmap 是线程不安全的，concurrenthashmap 是 juc 下的线程安全的；\n\n 3. hashmap 底层数据结构是数组 + 链表（jdk 1.8 之前）。jdk 1.8 之后是数组 + 链表 + 红黑树。当链表中元素个数达到 8 的时候，链表的查询速度不如红黑树快，链表会转为红黑树，红黑树查询速度快；\n\n 4. hashmap 初始数组大小为 16（默认），当出现扩容的时候，以 0.75 * 数组大小的方式进行扩容；\n\n 5. concurrenthashmap 在 jdk 1.8 之前是采用分段锁来现实的 segment + hashentry，segment 数组大小默认是 16，2 的 n 次方；jdk 1.8 之后，采用 node + cas + synchronized来保证并发安全进行实现。\n\n\n# 43、红黑树有哪几个特征？\n\n紧接上个问题，面试官很有可能会问红黑树，下面把红黑树的几个特征列出来：\n\n\n# 44、说说你平时是怎么处理 java 异常的\n\ntry-catch-finally\n\n * try 块负责监控可能出现异常的代码\n * catch 块负责捕获可能出现的异常，并进行处理\n * finally 块负责清理各种资源，不管是否出现异常都会执行\n * 其中 try 块是必须的，catch 和 finally 至少存在一个标准异常处理流程\n\n> 抛出异常→捕获异常→捕获成功（当 catch 的异常类型与抛出的异常类型匹配时，捕获成功） →异常被处理，程序继续运行 抛出异常→捕获异常→捕获失败（当 catch 的异常类型与抛出异 常类型不匹配时，捕获失败）→异常未被处理，程序中断运行\n\n在开发过程中会使用到自定义异常，在通常情况下，程序很少会自己抛出异常，因为异常的类名通常也包含了该异常的有用信息，所以在选择抛出异常的时候，应该选择合适的异常类，从而可以明确地描述该异常情况，所以这时候往往都是自定义异常。自定义异常通常是通过继承 java.lang.exception 类，如果想自定义 runtime 异常的话，可以继承java.lang.runtimeexception 类，实现一个无参构造和一个带字符串参数的有参构造方法。在业务代码里，可以针对性的使用自定义异常。比如说：该用户不具备某某权限、余额不足等。\n\n\n# 45、说说深拷贝和浅拷贝？\n\n * 浅拷贝（shallowcopy）只是增加了一个指针指向已存在的内存地址，\n\n * 深拷贝（deepcopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，\n\n * 使用深拷贝的情况下，释放内存的时候不会因为出现浅拷贝时释放同一个内存的错误。\n\n注：最好是结合克隆已经原型模式联系在一起哈，记得复习的时候，把这几个联系起来的。',charsets:{cjk:!0}},{title:"001.JVM001",frontmatter:{title:"001.JVM001",categories:["Java","JVM"],tags:["Java","JVM"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-01T15:40:54.000Z",permalink:"/pages/d236d6/"},regularPath:"/07.Java/02.JVM%E7%AF%87/001.JVM001.html",relativePath:"07.Java/02.JVM篇/001.JVM001.md",key:"v-4ce8331c",path:"/pages/d236d6/",headers:[{level:2,title:"1、知识点汇总",slug:"_1、知识点汇总",normalizedTitle:"1、知识点汇总",charIndex:17},{level:2,title:"2、知识点详解：",slug:"_2、知识点详解",normalizedTitle:"2、知识点详解：",charIndex:430},{level:4,title:"1、JVM内存模型：",slug:"_1、jvm内存模型",normalizedTitle:"1、jvm内存模型：",charIndex:442},{level:4,title:"2、栈：",slug:"_2、栈",normalizedTitle:"2、栈：",charIndex:487},{level:4,title:"3、本地方法栈",slug:"_3、本地方法栈",normalizedTitle:"3、本地方法栈",charIndex:572},{level:4,title:"4、程序计数器",slug:"_4、程序计数器",normalizedTitle:"4、程序计数器",charIndex:636},{level:4,title:"5、堆",slug:"_5、堆",normalizedTitle:"5、堆",charIndex:714},{level:4,title:"6、方法区：",slug:"_6、方法区",normalizedTitle:"6、方法区：",charIndex:829},{level:4,title:"7、JVM 内存可见性",slug:"_7、jvm-内存可见性",normalizedTitle:"7、jvm 内存可见性",charIndex:911},{level:2,title:"3、说说类加载与卸载",slug:"_3、说说类加载与卸载",normalizedTitle:"3、说说类加载与卸载",charIndex:1025},{level:4,title:"加载过程",slug:"加载过程",normalizedTitle:"加载过程",charIndex:1039},{level:4,title:"1、加载机制-双亲委派模式",slug:"_1、加载机制-双亲委派模式",normalizedTitle:"1、加载机制-双亲委派模式",charIndex:1444},{level:4,title:"优点:",slug:"优点",normalizedTitle:"优点:",charIndex:1543},{level:4,title:"2、分代回收",slug:"_2、分代回收",normalizedTitle:"2、分代回收",charIndex:1585},{level:4,title:"3、回收算法",slug:"_3、回收算法",normalizedTitle:"3、回收算法",charIndex:1643},{level:4,title:"a、G1算法",slug:"a、g1算法",normalizedTitle:"a、g1算法",charIndex:1653},{level:4,title:"b、ZGC算法",slug:"b、zgc算法",normalizedTitle:"b、zgc算法",charIndex:2022},{level:2,title:"4、简述一下JVM的内存模型",slug:"_4、简述一下jvm的内存模型",normalizedTitle:"4、简述一下jvm的内存模型",charIndex:2321},{level:4,title:"1. JVM内存模型简介",slug:"_1-jvm内存模型简介",normalizedTitle:"1. jvm内存模型简介",charIndex:2339},{level:3,title:"线程私有区",slug:"线程私有区",normalizedTitle:"线程私有区",charIndex:2523},{level:4,title:"1、程序计数器",slug:"_1、程序计数器",normalizedTitle:"1、程序计数器",charIndex:2592},{level:4,title:"2、虚拟机栈",slug:"_2、虚拟机栈",normalizedTitle:"2、虚拟机栈",charIndex:2745},{level:4,title:"3、本地方法栈",slug:"_3、本地方法栈-2",normalizedTitle:"3、本地方法栈",charIndex:572},{level:3,title:"线程共享区",slug:"线程共享区",normalizedTitle:"线程共享区",charIndex:2573},{level:4,title:"1、方法区",slug:"_1、方法区",normalizedTitle:"1、方法区",charIndex:3122},{level:4,title:"2、堆",slug:"_2、堆",normalizedTitle:"2、堆",charIndex:3332},{level:2,title:"5、说说堆和栈的区别",slug:"_5、说说堆和栈的区别",normalizedTitle:"5、说说堆和栈的区别",charIndex:3674},{level:4,title:"1、功能不同",slug:"_1、功能不同",normalizedTitle:"1、功能不同",charIndex:3787},{level:4,title:"2、共享性不同",slug:"_2、共享性不同",normalizedTitle:"2、共享性不同",charIndex:3868},{level:4,title:"3、异常错误不同",slug:"_3、异常错误不同",normalizedTitle:"3、异常错误不同",charIndex:3904},{level:4,title:"4、空间大小",slug:"_4、空间大小",normalizedTitle:"4、空间大小",charIndex:4007},{level:2,title:"6、 什么时候会触发FullGC",slug:"_6、-什么时候会触发fullgc",normalizedTitle:"6、 什么时候会触发fullgc",charIndex:4033},{level:2,title:"7、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？",slug:"_7、什么是java虚拟机-为什么java被称作是-平台无关的编程语言",normalizedTitle:"7、什么是java虚拟机？为什么java被称作是“平台无关的编程语言”？",charIndex:5550},{level:2,title:"8、Java内存结构",slug:"_8、java内存结构",normalizedTitle:"8、java内存结构",charIndex:5738},{level:2,title:"9、说说对象分配规则",slug:"_9、说说对象分配规则",normalizedTitle:"9、说说对象分配规则",charIndex:6474},{level:2,title:"10、描述一下JVM加载class文件的原理机制？",slug:"_10、描述一下jvm加载class文件的原理机制",normalizedTitle:"10、描述一下jvm加载class文件的原理机制？",charIndex:6971},{level:2,title:"11、说说Java对象创建过程",slug:"_11、说说java对象创建过程",normalizedTitle:"11、说说java对象创建过程",charIndex:7937},{level:2,title:"12、知道类的生命周期吗？",slug:"_12、知道类的生命周期吗",normalizedTitle:"12、知道类的生命周期吗？",charIndex:8124},{level:2,title:"13、简述Java的对象结构",slug:"_13、简述java的对象结构",normalizedTitle:"13、简述java的对象结构",charIndex:8417},{level:2,title:"14、如何判断对象可以被回收？",slug:"_14、如何判断对象可以被回收",normalizedTitle:"14、如何判断对象可以被回收？",charIndex:8677},{level:2,title:"15、JVM的永久代中会发生垃圾回收么？",slug:"_15、jvm的永久代中会发生垃圾回收么",normalizedTitle:"15、jvm的永久代中会发生垃圾回收么？",charIndex:8899},{level:2,title:"16、你知道哪些垃圾收集算法",slug:"_16、你知道哪些垃圾收集算法",normalizedTitle:"16、你知道哪些垃圾收集算法",charIndex:9102},{level:2,title:"17、调优命令有哪些？",slug:"_17、调优命令有哪些",normalizedTitle:"17、调优命令有哪些？",charIndex:9554}],headersStr:"1、知识点汇总 2、知识点详解： 1、JVM内存模型： 2、栈： 3、本地方法栈 4、程序计数器 5、堆 6、方法区： 7、JVM 内存可见性 3、说说类加载与卸载 加载过程 1、加载机制-双亲委派模式 优点: 2、分代回收 3、回收算法 a、G1算法 b、ZGC算法 4、简述一下JVM的内存模型 1. JVM内存模型简介 线程私有区 1、程序计数器 2、虚拟机栈 3、本地方法栈 线程共享区 1、方法区 2、堆 5、说说堆和栈的区别 1、功能不同 2、共享性不同 3、异常错误不同 4、空间大小 6、 什么时候会触发FullGC 7、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？ 8、Java内存结构 9、说说对象分配规则 10、描述一下JVM加载class文件的原理机制？ 11、说说Java对象创建过程 12、知道类的生命周期吗？ 13、简述Java的对象结构 14、如何判断对象可以被回收？ 15、JVM的永久代中会发生垃圾回收么？ 16、你知道哪些垃圾收集算法 17、调优命令有哪些？",content:"# 001.JVM001\n\n\n# 1、知识点汇总\n\nJVM是Java运行基础,面试时一定会遇到JVM的有关问题,内容相对集中,但对只是深度要求较高.\n\n其中内存模型,类加载机制,GC是重点方面.性能调优部分更偏向应用,重点突出实践能力.编译器优化和执行模式部分偏向于理论基础,重点掌握知识点.需了解 内存模型各部分作用,保存哪些数据. 类加载双亲委派加载机制,常用加载器分别加载哪种类型的类. GC分代回收的思想和依据以及不同垃圾回收算法的回收思路和适合场景. 性能调优常有JVM优化参数作用,参数调优的依据,常用的JVM分析工具能分析哪些问题以及使用方法. 执行模式解释/编译/混合模式的优缺点,Java7提供的分层编译技术,JIT即时编译技术,OSR栈上替换,C1/C2编译器针对的场景,C2针对的是server模式,优化更激进.新技术方面Java10的graal编译器 编译器优化javac的编译过程,ast抽象语法树,编译器优化和运行器优化.\n\n\n# 2、知识点详解：\n\n# 1、JVM内存模型：\n\n线程独占:栈,本地方法栈,程序计数器 线程共享:堆,方法区\n\n# 2、栈：\n\n又称方法栈,线程私有的,线程执行方法是都会创建一个栈阵,用来存储局部变量表,操作栈,动态链接,方法出口等信息.调用方法时执行入栈,方法返回式执行出栈.\n\n# 3、本地方法栈\n\n与栈类似,也是用来保存执行方法的信息.执行Java方法是使用栈,执行Native方法时使用本地方法栈.\n\n# 4、程序计数器\n\n保存着当前线程执行的字节码位置,每个线程工作时都有独立的计数器,只为执行Java方法服务,执行Native方法时,程序计数器为空.\n\n# 5、堆\n\nJVM内存管理最大的一块,对被线程共享,目的是存放对象的实例,几乎所欲的对象实例都会放在这里,当堆没有可用空间时,会抛出OOM异常.根据对象的存活周期不同,JVM把对象进行分代管理,由垃圾回收器进行垃圾的回收管理\n\n# 6、方法区：\n\n又称非堆区,用于存储已被虚拟机加载的类信息,常量,静态变量,即时编译器优化后的代码等数据.1.7的永久代和1.8的元空间都是方法区的一种实现\n\n# 7、JVM 内存可见性\n\n\n\nJMM是定义程序中变量的访问规则,线程对于变量的操作只能在自己的工作内存中进行,而不能直接对 主内存操作.由于指令重排序,读写的顺序会被打乱,因此JMM需要提供原子性,可见性,有序性保证.\n\n\n# 3、说说类加载与卸载\n\n# 加载过程\n\n\n\n其中验证,准备,解析合称链接 加载通过类的完全限定名,查找此类字节码文件,利用字节码文件创建Class对象. 验证确保Class文件符合当前虚拟机的要求,不会危害到虚拟机自身安全. 准备进行内存分配,为static修饰的类变量分配内存,并设置初始值(0或null).不包含final修饰的静态变 量,因为final变量在编译时分配. 解析将常量池中的符号引用替换为直接引用的过程.直接引用为直接指向目标的指针或者相对偏移量 等. 初始化主要完成静态块执行以及静态变量的赋值.先初始化父类,再初始化当前类.只有对类主动使用 时才会初始化. 触发条件包括,创建类的实例时,访问类的静态方法或静态变量的时候,使用Class.forName反射类的时 候,或者某个子类初始化的时候. Java自带的加载器加载的类,在虚拟机的生命周期中是不会被卸载的,只有用户自定义的加载器加载的 类才可以被卸.\n\n# 1、加载机制-双亲委派模式\n\n\n\n双亲委派模式,即加载器加载类时先把请求委托给自己的父类加载器执行,直到顶层的启动类加载器.父类加载器能够完成加载则成功返回,不能则子类加载器才自己尝试加载.\n\n# 优点:\n\n 1. 避免类的重复加载\n\n 2. 避免Java的核心API被篡改\n\n# 2、分代回收\n\n分代回收基于两个事实:大部分对象很快就不使用了,还有一部分不会立即无用,但也不会持续很长时间\n\n# 3、回收算法\n\n# a、G1算法\n\n1.9后默认的垃圾回收算法,特点保持高回收率的同时减少停顿.采用每次只清理一部分,而不是清理全 部的增量式清理,以保证停顿时间不会过长 其取消了年轻代与老年代的物理划分,但仍属于分代收集器,算法将堆分为若干个逻辑区域(region),一 部分用作年轻代,一部分用作老年代,还有用来存储巨型对象的分区. 同CMS相同,会遍历所有对象,标记引用情况,清除对象后会对区域进行复制移动,以整合碎片空间. 年轻代回收: 并行复制采用复制算法,并行收集,会StopTheWorld. 老年代回收: 会对年轻代一并回收 初始标记完成堆root对象的标记,会StopTheWorld. 并发标记 GC线程和应用线程并发执行. 最终标记 完成三色标记周期,会StopTheWorld. 复制/清楚会优先对可回收空间加大的区域进行回收\n\n# b、ZGC算法\n\n前面提供的高效垃圾回收算法,针对大堆内存设计,可以处理TB级别的堆,可以做到10ms以下的回收停 顿时间.\n\n * 着色指针\n * 读屏障\n * 并发处理\n * 基于region\n * 内存压缩(整理)\n\nroots标记：标记root对象,会StopTheWorld. 并发标记：利用读屏障与应用线程一起运行标记,可能 会发生StopTheWorld. 清除会清理标记为不可用的对象. roots重定位：是对存活的对象进行移动,以 腾出大块内存空间,减少碎片产生.重定位最开始会StopTheWorld,却决于重定位集与对象总活动集的 比例. 并发重定位与并发标记类似.\n\n\n# 4、简述一下JVM的内存模型\n\n# 1. JVM内存模型简介\n\nJVM定义了不同运行时数据区，他们是用来执行应用程序的。某些区域随着JVM启动及销毁，另外一些区域的数据是线程性独立的，随着线程创建和销毁。jvm内存模型总体架构图如下：（摘自oracle官方网站）\n\n\n\nJVM在执行Java程序时，会把它管理的内存划分为若干个的区域，每个区域都有自己的用途和创建 销毁时间。如下图所示，可以分为两大部分，线程私有区和共享区。下图是根据自己理解画的一个 JVM内存模型架构图：\n\nJVM内存分为线程私有区和线程共享区\n\n\n# 线程私有区\n\n# 1、程序计数器\n\n当同时进行的线程数超过CPU数或其内核数时，就要通过时间片轮询分派CPU的时间资源，不免发生线程切换。这时，每个线程就需要一个属于自己的计数器来记录下一条要运行的指令。如果执行的是JAVA方法，计数器记录正在执行的java字节码地址，如果执行的是native方法，则计数器为 空。\n\n# 2、虚拟机栈\n\n线程私有的，与线程在同一时间创建。管理JAVA方法执行的内存模型。每个方法执行时都会创建一个桢栈来存储方法的的变量表、操作数栈、动态链接方法、返回值、返回地址等信息。栈的大小决定了方法调用的可达深度（递归多少层次，或嵌套调用多少层其他方法，-Xss参数可以设置虚拟机栈大小）。栈的大小可以是固定的，或者是动态扩展的。如果请求的栈深度大于最大可用深度，则抛出stackOverﬂowError；如果栈是可动态扩展的，但没有内存空间支持扩展，则抛出 OutofMemoryError。 使用jclasslib工具可以查看class类文件的结构。下图为栈帧结构图：\n\n# 3、本地方法栈\n\n与虚拟机栈作用相似。但它不是为Java方法服务的，而是本地方法（C语言）。由于规范对这块没有强制要求，不同虚拟机实现方法不同。\n\n\n# 线程共享区\n\n# 1、方法区\n\n线程共享的，用于存放被虚拟机加载的类的元数据信息，如常量、静态变量和即时编译器编译后的代码。若要分代，算是永久代（老年代），以前类大多“static”的，很少被卸载或收集，现回收废弃常量和无用的类。其中运行时常量池存放编译生成的各种常量。（如果hotspot虚拟机确定一个类的定义信息不会被使用，也会将其回收。回收的基本条件至少有：所有该类的实例被回收，而且装载该类的ClassLoader被回收）\n\n# 2、堆\n\n存放对象实例和数组，是垃圾回收的主要区域，分为新生代和老年代。刚创建的对象在新生代的 Eden区中，经过GC后进入新生代的S0区中，再经过GC进入新生代的S1区中，15次GC后仍存在就进入老年代。这是按照一种回收机制进行划分的，不是固定的。若堆的空间不够实例分配，则 OutOfMemoryError\n\nYoung Generation 即图中的Eden + From Space（s0） + To Space(s1)\nEden 存放新生的对象\nSurvivor Space 有两个，存放每次垃圾回收后存活的对象(s0+s1)\nOld Generation Tenured Generation 即图中的Old Space 主要存放应用程序中生命周期长的存活对象\n\n\n\n# 5、说说堆和栈的区别\n\n栈是运行时单位，代表着逻辑，内含基本数据类型和堆中对象引用，所在区域连续，没有碎片；堆是存储单位，代表着数据，可被多个栈共享（包括成员中基本数据类型、引用和引用对象），所在区域不连续，会有碎片。\n\n# 1、功能不同\n\n栈内存用来存储局部变量和方法调用，而堆内存用来存储Java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。\n\n# 2、共享性不同\n\n栈内存是线程私有的。 堆内存是所有线程共有的。\n\n# 3、异常错误不同\n\n如果栈内存或者堆内存不足都会抛出异常。 栈空间不足：java.lang.StackOverFlowError。 堆空间不足：java.lang.OutOfMemoryError。\n\n# 4、空间大小\n\n栈的空间大小远远小于堆的。\n\n\n# 6、 什么时候会触发FullGC\n\n除直接调用System.gc外，触发Full GC执行的情况有如下四种。\n\n1. 旧生代空间不足 旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行Full GC后空间仍然不\n\n足，则抛出如下错误： java.lang.OutOfMemoryError: Java heap space 为避免以上两种状况引起的FullGC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。\n\n2. PermanetGeneration空间满 PermanetGeneration中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信 息： java.lang.OutOfMemoryError: PermGen space 为避免Perm Gen占满造成Full GC现象，可采用的方法为增大Perm Gen空间或转为使用CMS GC。\n\n3. CMSGC时出现promotionfailed和concurrentmodefailure 对于采用CMS进行旧生代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发Full GC。 promotionfailed是在进行Minor GC时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行 CMS GC的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。 应对措施为：增大 survivorspace、旧生代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置- XX:CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。\n\n4. 统计得到的MinorGC晋升到旧生代的平均大小大于旧生代的剩余空间 这是一个较为复杂的触发情况，Hotspot为了避免由于新生代对象晋升到旧生代导致旧生代空间不足的现象，在进行Minor GC时，做了一个判断，如果之前统计所得到的Minor GC晋升到旧生代的平均大小大于旧生代的剩余空间，那么就直接触发Full GC。 例如程序第一次触发MinorGC后，有6MB的对象晋升到旧生 代，那么当下一次Minor GC发生时，首先检查旧生代的剩余空间是否大于6MB，如果小于6MB，\n\n则执行Full GC。 当新生代采用PSGC时，方式稍有不同，PS GC是在Minor GC后也会检查，例如上面的例子中第一次Minor GC后，PS GC会检查此时旧生代的剩余空间是否大于6MB，如小于，则触发对旧生代的回收。 除了以上4种状况外，对于使用RMI来进行RPC或管理的Sun JDK应用而言，默认情况下会一小时执行一次Full GC。可通过在启动时通过- java- Dsun.rmi.dgc.client.gcInterval=3600000来设置Full GC执行的间隔时间或通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc。\n\n\n# 7、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？\n\nJava虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。 Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。\n\n\n# 8、Java内存结构\n\n方法区和对是所有线程共享的内存区域；而java栈、本地方法栈和程序员计数器是运行是线程私有 的内存区域。\n\n * Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n\n * 方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n * 程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。\n\n * JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame)用于存储局部变量表、操作栈、动态\n\n * 链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n * 本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\n\n\n# 9、说说对象分配规则\n\n * 对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。\n * 大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。\n * 长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次 Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。\n * 动态判断对象的年龄。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。\n * 空间分配担保。每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查 HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。\n\n\n# 10、描述一下JVM加载class文件的原理机制？\n\nJVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。 由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时， JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的 Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。 类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了 Java平台的安全性，在该机制中，JVM自带Bootstra是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：\n\n * Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；\n * Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；\n * System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。\n\n\n# 11、说说Java对象创建过程\n\n 1. JVM遇到一条新建对象的指令时首先去检查这个指令的参数是否能在常量池中定义到一个类的符号引用。然后加载这个类（类加载过程在后边讲）\n 2. 为对象分配内存。一种办法“指针碰撞”、一种办法“空闲列表”，最终常用的办法“本地线程缓冲分配(TLAB)”\n 3. 将除对象头外的对象内存空间初始化为0\n 4. 对对象头进行必要设置\n\n\n# 12、知道类的生命周期吗？\n\n类的生命周期包括这几个部分，加载、连接、初始化、使用和卸载，其中前三部是类的加载的过程, 如下图；\n\n * 加载，查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象\n * 连接，连接又包含三块内容：验证、准备、初始化。\n   * 1）验证，文件格式、元数据、字节码、符号引用验证；\n   * 2）准备，为类的静态变量分配内存，并将其初始化为默认值；\n   * 3）解析，把类中的符号引用转换为直接引用\n * 初始化，为类的静态变量赋予正确的初始值\n * 使用，new出对象程序中使用\n * 卸载，执行垃圾回收\n\n\n# 13、简述Java的对象结构\n\nJava对象由三个部分组成：对象头、实例数据、对齐填充。\n\n * 对象头由两部分组成，第一部分存储对象自身的运行时数据：哈希码、GC分代年龄、锁标识状态、线程持有的锁、偏向线程ID（一般占32/64 bit）。第二部分是指针类型，指向对象的类元数据类型（即对象代表哪个类）。如果是数组对象，则对象头中还有一部分用来记录数组长度。\n * 实例数据用来存储对象真正的有效信息（包括父类继承下来的和自己定义的）\n * 对齐填充：JVM要求对象起始地址必须是8字节的整数倍（8字节对齐）\n\n\n# 14、如何判断对象可以被回收？\n\n判断对象是否存活一般有两种方式：\n\n * 引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。\n * 可达性分析（Reachability Analysis）：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，不可达对象。\n\n\n# 15、JVM的永久代中会发生垃圾回收么？\n\n垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确 的永久代大小对避免Full GC是非常重要的原因。请参考下Java8：从永久代到元数据区 (注：Java8 中已经移除了永久代，新加了一个叫做元数据区的native内存区)\n\n\n# 16、你知道哪些垃圾收集算法\n\nGC最基础的算法有三种： 标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法。\n\n * 标记 -清除算法，“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。\n * 复制算法，“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。\n * 标记-压缩算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存\n * 分代收集算法，“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。\n\n\n# 17、调优命令有哪些？\n\nSun JDK监控和故障处理命令有jps jstat jmap jhat jstack jinfo\n\n * jps，JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。\n * jstat，JVM statistics Monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。\n * jmap，JVM Memory Map命令用于生成heap dump文件\n * jhat，JVM Heap Analysis Tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看\n * jstack，用于生成java虚拟机当前时刻的线程快照。\n * jinfo，JVM Configuration info 这个命令作用是实时查看和调整虚拟机运行参数。",normalizedContent:"# 001.jvm001\n\n\n# 1、知识点汇总\n\njvm是java运行基础,面试时一定会遇到jvm的有关问题,内容相对集中,但对只是深度要求较高.\n\n其中内存模型,类加载机制,gc是重点方面.性能调优部分更偏向应用,重点突出实践能力.编译器优化和执行模式部分偏向于理论基础,重点掌握知识点.需了解 内存模型各部分作用,保存哪些数据. 类加载双亲委派加载机制,常用加载器分别加载哪种类型的类. gc分代回收的思想和依据以及不同垃圾回收算法的回收思路和适合场景. 性能调优常有jvm优化参数作用,参数调优的依据,常用的jvm分析工具能分析哪些问题以及使用方法. 执行模式解释/编译/混合模式的优缺点,java7提供的分层编译技术,jit即时编译技术,osr栈上替换,c1/c2编译器针对的场景,c2针对的是server模式,优化更激进.新技术方面java10的graal编译器 编译器优化javac的编译过程,ast抽象语法树,编译器优化和运行器优化.\n\n\n# 2、知识点详解：\n\n# 1、jvm内存模型：\n\n线程独占:栈,本地方法栈,程序计数器 线程共享:堆,方法区\n\n# 2、栈：\n\n又称方法栈,线程私有的,线程执行方法是都会创建一个栈阵,用来存储局部变量表,操作栈,动态链接,方法出口等信息.调用方法时执行入栈,方法返回式执行出栈.\n\n# 3、本地方法栈\n\n与栈类似,也是用来保存执行方法的信息.执行java方法是使用栈,执行native方法时使用本地方法栈.\n\n# 4、程序计数器\n\n保存着当前线程执行的字节码位置,每个线程工作时都有独立的计数器,只为执行java方法服务,执行native方法时,程序计数器为空.\n\n# 5、堆\n\njvm内存管理最大的一块,对被线程共享,目的是存放对象的实例,几乎所欲的对象实例都会放在这里,当堆没有可用空间时,会抛出oom异常.根据对象的存活周期不同,jvm把对象进行分代管理,由垃圾回收器进行垃圾的回收管理\n\n# 6、方法区：\n\n又称非堆区,用于存储已被虚拟机加载的类信息,常量,静态变量,即时编译器优化后的代码等数据.1.7的永久代和1.8的元空间都是方法区的一种实现\n\n# 7、jvm 内存可见性\n\n\n\njmm是定义程序中变量的访问规则,线程对于变量的操作只能在自己的工作内存中进行,而不能直接对 主内存操作.由于指令重排序,读写的顺序会被打乱,因此jmm需要提供原子性,可见性,有序性保证.\n\n\n# 3、说说类加载与卸载\n\n# 加载过程\n\n\n\n其中验证,准备,解析合称链接 加载通过类的完全限定名,查找此类字节码文件,利用字节码文件创建class对象. 验证确保class文件符合当前虚拟机的要求,不会危害到虚拟机自身安全. 准备进行内存分配,为static修饰的类变量分配内存,并设置初始值(0或null).不包含final修饰的静态变 量,因为final变量在编译时分配. 解析将常量池中的符号引用替换为直接引用的过程.直接引用为直接指向目标的指针或者相对偏移量 等. 初始化主要完成静态块执行以及静态变量的赋值.先初始化父类,再初始化当前类.只有对类主动使用 时才会初始化. 触发条件包括,创建类的实例时,访问类的静态方法或静态变量的时候,使用class.forname反射类的时 候,或者某个子类初始化的时候. java自带的加载器加载的类,在虚拟机的生命周期中是不会被卸载的,只有用户自定义的加载器加载的 类才可以被卸.\n\n# 1、加载机制-双亲委派模式\n\n\n\n双亲委派模式,即加载器加载类时先把请求委托给自己的父类加载器执行,直到顶层的启动类加载器.父类加载器能够完成加载则成功返回,不能则子类加载器才自己尝试加载.\n\n# 优点:\n\n 1. 避免类的重复加载\n\n 2. 避免java的核心api被篡改\n\n# 2、分代回收\n\n分代回收基于两个事实:大部分对象很快就不使用了,还有一部分不会立即无用,但也不会持续很长时间\n\n# 3、回收算法\n\n# a、g1算法\n\n1.9后默认的垃圾回收算法,特点保持高回收率的同时减少停顿.采用每次只清理一部分,而不是清理全 部的增量式清理,以保证停顿时间不会过长 其取消了年轻代与老年代的物理划分,但仍属于分代收集器,算法将堆分为若干个逻辑区域(region),一 部分用作年轻代,一部分用作老年代,还有用来存储巨型对象的分区. 同cms相同,会遍历所有对象,标记引用情况,清除对象后会对区域进行复制移动,以整合碎片空间. 年轻代回收: 并行复制采用复制算法,并行收集,会stoptheworld. 老年代回收: 会对年轻代一并回收 初始标记完成堆root对象的标记,会stoptheworld. 并发标记 gc线程和应用线程并发执行. 最终标记 完成三色标记周期,会stoptheworld. 复制/清楚会优先对可回收空间加大的区域进行回收\n\n# b、zgc算法\n\n前面提供的高效垃圾回收算法,针对大堆内存设计,可以处理tb级别的堆,可以做到10ms以下的回收停 顿时间.\n\n * 着色指针\n * 读屏障\n * 并发处理\n * 基于region\n * 内存压缩(整理)\n\nroots标记：标记root对象,会stoptheworld. 并发标记：利用读屏障与应用线程一起运行标记,可能 会发生stoptheworld. 清除会清理标记为不可用的对象. roots重定位：是对存活的对象进行移动,以 腾出大块内存空间,减少碎片产生.重定位最开始会stoptheworld,却决于重定位集与对象总活动集的 比例. 并发重定位与并发标记类似.\n\n\n# 4、简述一下jvm的内存模型\n\n# 1. jvm内存模型简介\n\njvm定义了不同运行时数据区，他们是用来执行应用程序的。某些区域随着jvm启动及销毁，另外一些区域的数据是线程性独立的，随着线程创建和销毁。jvm内存模型总体架构图如下：（摘自oracle官方网站）\n\n\n\njvm在执行java程序时，会把它管理的内存划分为若干个的区域，每个区域都有自己的用途和创建 销毁时间。如下图所示，可以分为两大部分，线程私有区和共享区。下图是根据自己理解画的一个 jvm内存模型架构图：\n\njvm内存分为线程私有区和线程共享区\n\n\n# 线程私有区\n\n# 1、程序计数器\n\n当同时进行的线程数超过cpu数或其内核数时，就要通过时间片轮询分派cpu的时间资源，不免发生线程切换。这时，每个线程就需要一个属于自己的计数器来记录下一条要运行的指令。如果执行的是java方法，计数器记录正在执行的java字节码地址，如果执行的是native方法，则计数器为 空。\n\n# 2、虚拟机栈\n\n线程私有的，与线程在同一时间创建。管理java方法执行的内存模型。每个方法执行时都会创建一个桢栈来存储方法的的变量表、操作数栈、动态链接方法、返回值、返回地址等信息。栈的大小决定了方法调用的可达深度（递归多少层次，或嵌套调用多少层其他方法，-xss参数可以设置虚拟机栈大小）。栈的大小可以是固定的，或者是动态扩展的。如果请求的栈深度大于最大可用深度，则抛出stackoverﬂowerror；如果栈是可动态扩展的，但没有内存空间支持扩展，则抛出 outofmemoryerror。 使用jclasslib工具可以查看class类文件的结构。下图为栈帧结构图：\n\n# 3、本地方法栈\n\n与虚拟机栈作用相似。但它不是为java方法服务的，而是本地方法（c语言）。由于规范对这块没有强制要求，不同虚拟机实现方法不同。\n\n\n# 线程共享区\n\n# 1、方法区\n\n线程共享的，用于存放被虚拟机加载的类的元数据信息，如常量、静态变量和即时编译器编译后的代码。若要分代，算是永久代（老年代），以前类大多“static”的，很少被卸载或收集，现回收废弃常量和无用的类。其中运行时常量池存放编译生成的各种常量。（如果hotspot虚拟机确定一个类的定义信息不会被使用，也会将其回收。回收的基本条件至少有：所有该类的实例被回收，而且装载该类的classloader被回收）\n\n# 2、堆\n\n存放对象实例和数组，是垃圾回收的主要区域，分为新生代和老年代。刚创建的对象在新生代的 eden区中，经过gc后进入新生代的s0区中，再经过gc进入新生代的s1区中，15次gc后仍存在就进入老年代。这是按照一种回收机制进行划分的，不是固定的。若堆的空间不够实例分配，则 outofmemoryerror\n\nyoung generation 即图中的eden + from space（s0） + to space(s1)\neden 存放新生的对象\nsurvivor space 有两个，存放每次垃圾回收后存活的对象(s0+s1)\nold generation tenured generation 即图中的old space 主要存放应用程序中生命周期长的存活对象\n\n\n\n# 5、说说堆和栈的区别\n\n栈是运行时单位，代表着逻辑，内含基本数据类型和堆中对象引用，所在区域连续，没有碎片；堆是存储单位，代表着数据，可被多个栈共享（包括成员中基本数据类型、引用和引用对象），所在区域不连续，会有碎片。\n\n# 1、功能不同\n\n栈内存用来存储局部变量和方法调用，而堆内存用来存储java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。\n\n# 2、共享性不同\n\n栈内存是线程私有的。 堆内存是所有线程共有的。\n\n# 3、异常错误不同\n\n如果栈内存或者堆内存不足都会抛出异常。 栈空间不足：java.lang.stackoverflowerror。 堆空间不足：java.lang.outofmemoryerror。\n\n# 4、空间大小\n\n栈的空间大小远远小于堆的。\n\n\n# 6、 什么时候会触发fullgc\n\n除直接调用system.gc外，触发full gc执行的情况有如下四种。\n\n1. 旧生代空间不足 旧生代空间只有在新生代对象转入及创建为大对象、大数组时才会出现不足的现象，当执行full gc后空间仍然不\n\n足，则抛出如下错误： java.lang.outofmemoryerror: java heap space 为避免以上两种状况引起的fullgc，调优时应尽量做到让对象在minor gc阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。\n\n2. permanetgeneration空间满 permanetgeneration中存放的为一些class的信息等，当系统中要加载的类、反射的类和调用的方法较多时，permanet generation可能会被占满，在未配置为采用cms gc的情况下会执行full gc。如果经过full gc仍然回收不了，那么jvm会抛出如下错误信 息： java.lang.outofmemoryerror: permgen space 为避免perm gen占满造成full gc现象，可采用的方法为增大perm gen空间或转为使用cms gc。\n\n3. cmsgc时出现promotionfailed和concurrentmodefailure 对于采用cms进行旧生代gc的程序而言，尤其要注意gc日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能会触发full gc。 promotionfailed是在进行minor gc时，survivor space放不下、对象只能放入旧生代，而此时旧生代也放不下造成的；concurrent mode failure是在执行 cms gc的过程中同时有对象要放入旧生代，而此时旧生代空间不足造成的。 应对措施为：增大 survivorspace、旧生代空间或调低触发并发gc的比率，但在jdk 5.0+、6.0+的版本中有可能会由于jdk的bug29导致cms在remark完毕后很久才触发sweeping动作。对于这种状况，可通过设置- xx:cmsmaxabortableprecleantime=5（单位为ms）来避免。\n\n4. 统计得到的minorgc晋升到旧生代的平均大小大于旧生代的剩余空间 这是一个较为复杂的触发情况，hotspot为了避免由于新生代对象晋升到旧生代导致旧生代空间不足的现象，在进行minor gc时，做了一个判断，如果之前统计所得到的minor gc晋升到旧生代的平均大小大于旧生代的剩余空间，那么就直接触发full gc。 例如程序第一次触发minorgc后，有6mb的对象晋升到旧生 代，那么当下一次minor gc发生时，首先检查旧生代的剩余空间是否大于6mb，如果小于6mb，\n\n则执行full gc。 当新生代采用psgc时，方式稍有不同，ps gc是在minor gc后也会检查，例如上面的例子中第一次minor gc后，ps gc会检查此时旧生代的剩余空间是否大于6mb，如小于，则触发对旧生代的回收。 除了以上4种状况外，对于使用rmi来进行rpc或管理的sun jdk应用而言，默认情况下会一小时执行一次full gc。可通过在启动时通过- java- dsun.rmi.dgc.client.gcinterval=3600000来设置full gc执行的间隔时间或通过-xx:+ disableexplicitgc来禁止rmi调用system.gc。\n\n\n# 7、什么是java虚拟机？为什么java被称作是“平台无关的编程语言”？\n\njava虚拟机是一个可以执行java字节码的虚拟机进程。java源文件被编译成能被java虚拟机执行的字节码文件。 java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。\n\n\n# 8、java内存结构\n\n方法区和对是所有线程共享的内存区域；而java栈、本地方法栈和程序员计数器是运行是线程私有 的内存区域。\n\n * java堆（heap）,是java虚拟机所管理的内存中最大的一块。java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n\n * 方法区（method area）,方法区（method area）与java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n * 程序计数器（program counter register）,程序计数器（program counter register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。\n\n * jvm栈（jvm stacks）,与程序计数器一样，java虚拟机栈（java virtual machine stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（stack frame)用于存储局部变量表、操作栈、动态\n\n * 链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n * 本地方法栈（native method stacks）,本地方法栈（native method stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的native方法服务。\n\n\n# 9、说说对象分配规则\n\n * 对象优先分配在eden区，如果eden区没有足够的空间时，虚拟机执行一次minor gc。\n * 大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在eden区和两个survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。\n * 长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次 minor gc那么对象会进入survivor区，之后每经过一次minor gc那么对象的年龄加1，知道达到阀值对象进入老年区。\n * 动态判断对象的年龄。如果survivor区中相同年龄的所有对象大小的总和大于survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。\n * 空间分配担保。每次进行minor gc时，jvm会计算survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次full gc，如果小于检查 handlepromotionfailure设置，如果true则只进行monitor gc,如果false则进行full gc。\n\n\n# 10、描述一下jvm加载class文件的原理机制？\n\njvm中类的装载是由类加载器（classloader）和它的子类来实现的，java中的类加载器是一个重要的java运行时系统组件，它负责在运行时查找和装入类文件中的类。 由于java的跨平台性，经过编译的java源程序并不是一个可执行程序，而是一个或多个类文件。当java程序需要使用某个类时， jvm会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的 class对象。加载完成后，class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后jvm对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。 类的加载是由类加载器完成的，类加载器包括：根加载器（bootstrap）、扩展加载器（extension）、系统加载器（system）和用户自定义类加载器（java.lang.classloader的子类）。从java2（jdk 1.2）开始，类加载过程采取了父亲委托机制（pdm）。pdm更好的保证了 java平台的安全性，在该机制中，jvm自带bootstra是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。jvm不会向java程序提供对bootstrap的引用。下面是关于几个类加载器的说明：\n\n * bootstrap：一般用本地代码实现，负责加载jvm基础核心类库（rt.jar）；\n * extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是bootstrap；\n * system：又叫应用类加载器，其父类是extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。\n\n\n# 11、说说java对象创建过程\n\n 1. jvm遇到一条新建对象的指令时首先去检查这个指令的参数是否能在常量池中定义到一个类的符号引用。然后加载这个类（类加载过程在后边讲）\n 2. 为对象分配内存。一种办法“指针碰撞”、一种办法“空闲列表”，最终常用的办法“本地线程缓冲分配(tlab)”\n 3. 将除对象头外的对象内存空间初始化为0\n 4. 对对象头进行必要设置\n\n\n# 12、知道类的生命周期吗？\n\n类的生命周期包括这几个部分，加载、连接、初始化、使用和卸载，其中前三部是类的加载的过程, 如下图；\n\n * 加载，查找并加载类的二进制数据，在java堆中也创建一个java.lang.class类的对象\n * 连接，连接又包含三块内容：验证、准备、初始化。\n   * 1）验证，文件格式、元数据、字节码、符号引用验证；\n   * 2）准备，为类的静态变量分配内存，并将其初始化为默认值；\n   * 3）解析，把类中的符号引用转换为直接引用\n * 初始化，为类的静态变量赋予正确的初始值\n * 使用，new出对象程序中使用\n * 卸载，执行垃圾回收\n\n\n# 13、简述java的对象结构\n\njava对象由三个部分组成：对象头、实例数据、对齐填充。\n\n * 对象头由两部分组成，第一部分存储对象自身的运行时数据：哈希码、gc分代年龄、锁标识状态、线程持有的锁、偏向线程id（一般占32/64 bit）。第二部分是指针类型，指向对象的类元数据类型（即对象代表哪个类）。如果是数组对象，则对象头中还有一部分用来记录数组长度。\n * 实例数据用来存储对象真正的有效信息（包括父类继承下来的和自己定义的）\n * 对齐填充：jvm要求对象起始地址必须是8字节的整数倍（8字节对齐）\n\n\n# 14、如何判断对象可以被回收？\n\n判断对象是否存活一般有两种方式：\n\n * 引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。\n * 可达性分析（reachability analysis）：从gc roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到gc roots没有任何引用链相连时，则证明此对象是不可用的，不可达对象。\n\n\n# 15、jvm的永久代中会发生垃圾回收么？\n\n垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(full gc)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确 的永久代大小对避免full gc是非常重要的原因。请参考下java8：从永久代到元数据区 (注：java8 中已经移除了永久代，新加了一个叫做元数据区的native内存区)\n\n\n# 16、你知道哪些垃圾收集算法\n\ngc最基础的算法有三种： 标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法。\n\n * 标记 -清除算法，“标记-清除”（mark-sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。\n * 复制算法，“复制”（copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。\n * 标记-压缩算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存\n * 分代收集算法，“分代收集”（generational collection）算法，把java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。\n\n\n# 17、调优命令有哪些？\n\nsun jdk监控和故障处理命令有jps jstat jmap jhat jstack jinfo\n\n * jps，jvm process status tool,显示指定系统内所有的hotspot虚拟机进程。\n * jstat，jvm statistics monitoring是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、jit编译等运行数据。\n * jmap，jvm memory map命令用于生成heap dump文件\n * jhat，jvm heap analysis tool命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的http/html服务器，生成dump的分析结果后，可以在浏览器中查看\n * jstack，用于生成java虚拟机当前时刻的线程快照。\n * jinfo，jvm configuration info 这个命令作用是实时查看和调整虚拟机运行参数。",charsets:{cjk:!0}},{title:"002.JVM002",frontmatter:{title:"002.JVM002",categories:["Java","JVM"],tags:["Java","JVM"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-01T16:28:08.000Z",permalink:"/pages/723756/"},regularPath:"/07.Java/02.JVM%E7%AF%87/002.JVM002.html",relativePath:"07.Java/02.JVM篇/002.JVM002.md",key:"v-5f89669c",path:"/pages/723756/",headers:[{level:2,title:"18、常见调优工具有哪些",slug:"_18、常见调优工具有哪些",normalizedTitle:"18、常见调优工具有哪些",charIndex:17},{level:2,title:"19、Minor GC与Full GC分别在什么时候发生？",slug:"_19、minor-gc与full-gc分别在什么时候发生",normalizedTitle:"19、minor gc与full gc分别在什么时候发生？",charIndex:396},{level:2,title:"20、你知道哪些JVM性能调优参数？（简单版回答）",slug:"_20、你知道哪些jvm性能调优参数-简单版回答",normalizedTitle:"20、你知道哪些jvm性能调优参数？（简单版回答）",charIndex:468},{level:2,title:"21、 对象一定分配在堆中吗？有没有了解逃逸分析技术？",slug:"_21、-对象一定分配在堆中吗-有没有了解逃逸分析技术",normalizedTitle:"21、 对象一定分配在堆中吗？有没有了解逃逸分析技术？",charIndex:708},{level:2,title:"22、虚拟机为什么使用元空间替换了永久代？",slug:"_22、虚拟机为什么使用元空间替换了永久代",normalizedTitle:"22、虚拟机为什么使用元空间替换了永久代？",charIndex:1284},{level:4,title:"「什么是永久代？它和方法区有什么关系呢？」",slug:"「什么是永久代-它和方法区有什么关系呢-」",normalizedTitle:"「什么是永久代？它和方法区有什么关系呢？」",charIndex:1438},{level:4,title:"「什么是元空间？它和方法区有什么关系呢？」",slug:"「什么是元空间-它和方法区有什么关系呢-」",normalizedTitle:"「什么是元空间？它和方法区有什么关系呢？」",charIndex:1560},{level:4,title:"「为什么使用元空间替换了永久代？」",slug:"「为什么使用元空间替换了永久代-」",normalizedTitle:"「为什么使用元空间替换了永久代？」",charIndex:1666},{level:4,title:"「所以，为什么使用元空间替换永久代？」",slug:"「所以-为什么使用元空间替换永久代-」",normalizedTitle:"「所以，为什么使用元空间替换永久代？」",charIndex:2310},{level:2,title:"23、什么是Stop The World ? 什么是OopMap？什么是安全点？",slug:"_23、什么是stop-the-world-什么是oopmap-什么是安全点",normalizedTitle:"23、什么是stop the world ? 什么是oopmap？什么是安全点？",charIndex:2488},{level:2,title:"24、说一下JVM 的主要组成部分及其作用？",slug:"_24、说一下jvm-的主要组成部分及其作用",normalizedTitle:"24、说一下jvm 的主要组成部分及其作用？",charIndex:2917},{level:2,title:"25、什么是指针碰撞？",slug:"_25、什么是指针碰撞",normalizedTitle:"25、什么是指针碰撞？",charIndex:3532},{level:2,title:"26，什么是空闲列表？",slug:"_26-什么是空闲列表",normalizedTitle:"26，什么是空闲列表？",charIndex:3722},{level:3,title:"27，什么是TLAB？",slug:"_27-什么是tlab",normalizedTitle:"27，什么是tlab？",charIndex:3865},{level:2,title:"29、你知道哪些JVM调优参数？",slug:"_29、你知道哪些jvm调优参数",normalizedTitle:"29、你知道哪些jvm调优参数？",charIndex:4330},{level:4,title:"「堆栈内存相关」",slug:"「堆栈内存相关」",normalizedTitle:"「堆栈内存相关」",charIndex:4350},{level:4,title:"「垃圾收集器相关」",slug:"「垃圾收集器相关」",normalizedTitle:"「垃圾收集器相关」",charIndex:4737},{level:4,title:"「辅助信息相关」",slug:"「辅助信息相关」",normalizedTitle:"「辅助信息相关」",charIndex:5040},{level:2,title:"30、说一下 JVM 有哪些垃圾回收器？",slug:"_30、说一下-jvm-有哪些垃圾回收器",normalizedTitle:"30、说一下 jvm 有哪些垃圾回收器？",charIndex:5238},{level:2,title:"31、如何选择垃圾收集器？",slug:"_31、如何选择垃圾收集器",normalizedTitle:"31、如何选择垃圾收集器？",charIndex:6445},{level:2,title:"32、 什么是类加载器？",slug:"_32、-什么是类加载器",normalizedTitle:"32、 什么是类加载器？",charIndex:6979},{level:2,title:"33、什么是 tomcat 类加载机制？",slug:"_33、什么是-tomcat-类加载机制",normalizedTitle:"33、什么是 tomcat 类加载机制？",charIndex:7094}],headersStr:"18、常见调优工具有哪些 19、Minor GC与Full GC分别在什么时候发生？ 20、你知道哪些JVM性能调优参数？（简单版回答） 21、 对象一定分配在堆中吗？有没有了解逃逸分析技术？ 22、虚拟机为什么使用元空间替换了永久代？ 「什么是永久代？它和方法区有什么关系呢？」 「什么是元空间？它和方法区有什么关系呢？」 「为什么使用元空间替换了永久代？」 「所以，为什么使用元空间替换永久代？」 23、什么是Stop The World ? 什么是OopMap？什么是安全点？ 24、说一下JVM 的主要组成部分及其作用？ 25、什么是指针碰撞？ 26，什么是空闲列表？ 27，什么是TLAB？ 29、你知道哪些JVM调优参数？ 「堆栈内存相关」 「垃圾收集器相关」 「辅助信息相关」 30、说一下 JVM 有哪些垃圾回收器？ 31、如何选择垃圾收集器？ 32、 什么是类加载器？ 33、什么是 tomcat 类加载机制？",content:"# 002.JVM002\n\n\n# 18、常见调优工具有哪些\n\n常用调优工具分为两类,jdk自带监控工具：jconsole和jvisualvm，第三方有：MAT(Memory Analyzer Tool)、GChisto。\n\n * jconsole，Java Monitoring and Management Console是从java5开始，在JDK中自带的java监\n   \n   控和管理控制台，用于对JVM中内存，线程和类等的监控\n\n * jvisualvm，jdk自带全能工具，可以分析内存快照、线程快照；监控内存变化、GC变化等。\n\n * MAT，Memory Analyzer Tool，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗\n\n * GChisto，一款专业分析gc日志的工具\n\n\n# 19、Minor GC与Full GC分别在什么时候发生？\n\n新生代内存不够用时候发生MGC也叫YGC，JVM内存不够的时候发生FGC\n\n\n# 20、你知道哪些JVM性能调优参数？（简单版回答）\n\n * 设定堆内存大小 -Xmx：堆内存最大限制。\n * 设定新生代大小。 新生代不宜太小，否则会有大量对象涌入老年代\n   * -XX:NewSize：新生代大小\n   * -XX:NewRatio 新生代和老生代占比\n   * -XX:SurvivorRatio：伊甸园空间和幸存者空间的占比\n * 设定垃圾回收器 年轻代用 -XX:+UseParNewGC 年老代用-XX:+UseConcMarkSweepGC\n\n\n# 21、 对象一定分配在堆中吗？有没有了解逃逸分析技术？\n\n「对象一定分配在堆中吗？」 不一定的，JVM通过「逃逸分析」，那些逃不出方法的对象会在栈上分配。\n\n * 「什么是逃逸分析？」\n   \n   逃逸分析(Escape Analysis)，是一种可以有效减少Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围，从而决定是否要将这个对象分配到堆上。逃逸分析是指分析指针动态范围的方法，它同编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他方法或者线程所引用，这种现象称作指针（或者引用）的逃逸(Escape)。通俗点讲，如果一个对象的指针被多个方法或者线程引用时，那么我们就称这个对象的指针发生了逃逸。\n\n * 「逃逸分析的好处」\n\n * 栈上分配，可以降低垃圾收集器运行的频率。\n\n * 同步消除，如果发现某个对象只能从一个线程可访问，那么在这个对象上的操作可以不需要同步。\n\n * 标量替换，把对象分解成一个个基本类型，并且内存分配不再是分配在堆上，而是分配在栈上。这样的好处有，一、减少内存使用，因为不用生成对象头。二、程序内存回收效率高，并且GC频率也会减少\n\n\n# 22、虚拟机为什么使用元空间替换了永久代？\n\n「什么是元空间？什么是永久代？为什么用元空间代替永久代？」 我们先回顾一下**「方法区」**吧,看看虚拟机运行时数据内存图，如下:\n\n> 方法区和堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。\n\n# 「什么是永久代？它和方法区有什么关系呢？」\n\n> 如果在HotSpot虚拟机上开发、部署，很多程序员都把方法区称作永久代。可以说方法区是规范，永久代是Hotspot针对该规范进行的实现。在Java7及以前的版本，方法区都是永久代实现的。\n\n# 「什么是元空间？它和方法区有什么关系呢？」\n\n> 对于Java8，HotSpots取消了永久代，取而代之的是元空间(Metaspace)。换句话说，就是方法区还是在的，只是实现变了，从永久代变为元空间了。\n\n# 「为什么使用元空间替换了永久代？」\n\n永久代的方法区，和堆使用的物理内存是连续的。\n\n「永久代」是通过以下这两个参数配置大小的~\n\n * -XX:PremSize：设置永久代的初始大小\n * -XX:MaxPermSize: 设置永久代的最大值，默认是64M\n\n对于「永久代」，如果动态生成很多class的话，就很可能出现「java.lang.OutOfMemoryError:PermGen space错误」，因为永久代空间配置有限嘛。最典型的场景是，在web开发比较多jsp页面的时候。JDK8之后，方法区存在于元空间(Metaspace)。物理内存不再与堆连续，而是直接存在于本地内存中，理论上机器「内存有多大，元空间就有多大」。\n\n可以通过以下的参数来设置元空间的大小：\n\n-XX:MetaspaceSize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过MaxMetaspaceSize时，适当提高该值。\n\n-XX:MaxMetaspaceSize，最大空间，默认是没有限制的。\n\n-XX:MinMetaspaceFreeRatio，在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集\n\n-XX:MaxMetaspaceFreeRatio，在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集\n\n# 「所以，为什么使用元空间替换永久代？」\n\n表面上看是为了避免OOM异常。因为通常使用PermSize和MaxPermSize设置永久代的大小就决定了永久代的上限，但是不是总能知道应该设置为多大合适, 如果使用默认值很容易遇到 OOM错误。当使用元空间时，可以加载多少类的元数据就不再由MaxPermSize控制, 而由系统的实际可用空间来控制啦。\n\n\n# 23、什么是Stop The World ? 什么是OopMap？什么是安全点？\n\n进行垃圾回收的过程中，会涉及对象的移动。为了保证对象引用更新的正确性，必须暂停所有的用户线程，像这样的停顿，虚拟机设计者形象描述为「Stop The World」。也简称为STW。在HotSpot中，有个数据结构（映射表）称为「OopMap」。一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，记录到OopMap。在即时编译过程中，也会在「特定的位置」生成 OopMap，记录下栈上和寄存器里哪些位置是引用。 这些特定的位置主要在：\n\n * 1.循环的末尾（非 counted 循环）\n * 2.方法临返回前 / 调用方法的call指令后\n * 3.可能抛异常的位置\n\n这些位置就叫作「安全点(safepoint)。」 用户程序执行时并非在代码指令流的任意位置都能够在停顿下来开始垃圾收集，而是必须是执行到安全点才能够暂停。\n\n\n# 24、说一下JVM 的主要组成部分及其作用？\n\n\n\nJVM包含两个子系统和两个组件，分别为\n\n * Class loader(类装载子系统)\n\n * Execution engine(执行引擎子系统)；\n\n * Runtime data area(运行时数据区组件)\n\n * Native Interface(本地接口组件)。\n\n * 「Class loader(类装载)：」 根据给定的全限定名类名(如：java.lang.Object)来装载class文件到运行时数据区的方法区中。\n\n * 「Execution engine（执行引擎）」：执行class的指令。\n\n * 「Native Interface(本地接口)」： 与native lib交互，是其它编程语言交互的接口。\n\n * 「Runtime data area(运行时数据区域)」：即我们常说的JVM的内存。\n\n> 首先通过编译器把 Java源代码转换成字节码，Class loader(类装载)再把字节码加载到内存中，将其放在运行时数据区的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\n\n\n# 25、什么是指针碰撞？\n\n一般情况下，JVM的对象都放在堆内存中（发生逃逸分析除外）。当类加载检查通过后，Java虚拟机开始为新生对象分配内存。如果Java堆中内存是绝对规整的，所有被使用过的的内存都被放到一边，空闲的内存放到另外一边，中间放着一个指针作为分界点的指示器，所分配内存仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的实例，这种分配方式就是 指针碰撞。\n\n\n# 26，什么是空闲列表？\n\n如果Java堆内存中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，不可以进 行指针碰撞啦，虚拟机必须维护一个列表，记录哪些内存是可用的，在分配的时候从列表找到一块 大的空间分配给对象实例，并更新列表上的记录，这种分配方式就是空闲列表。\n\n\n# 27，什么是TLAB？\n\n可以把内存分配的动作按照线程划分在不同的空间之中进行，每个线程在Java堆中预先分配一小块内存,这就是TLAB（Thread Local Allocation Buffer，本地线程分配缓存） 。虚拟机通过-XX:UseTLAB 设定它的。\n\n28、对象头具体都包含哪些内容？ 在我们常用的Hotspot虚拟机中，对象在内存中布局实际包含3个部分：\n\n 1. 对象头\n 2. 实例数据\n 3. 对齐填充\n\n而对象头包含两部分内容，Mark Word中的内容会随着锁标志位而发生变化，所以只说存储结就好了\n\n * 对象自身运行时所需的数据，也被称为Mark Word，也就是用于轻量级锁和偏向锁的关键点。具体的内容包含对象的hashcode、分代年龄、轻量级锁指针、重量级锁指针、GC标记、偏向锁线程ID、偏向锁时间戳。\n\n * 存储类型指针，也就是指向类的元数据的指针，通过这个指针才能确定对象是属于哪个类的实例。如果是数组的话，则还包含了数组的长度。\n\n如果是数组的话，则还包含了数组的长度。\n\n\n# 29、你知道哪些JVM调优参数？\n\n# 「堆栈内存相关」\n\n * -Xms 设置初始堆的大小\n * -Xmx 设置最大堆的大小\n * -Xmn 设置年轻代大小，相当于同时配置-XX:NewSize和-XX:MaxNewSize为一样的值\n * -Xss 每个线程的堆栈大小\n * -XX:NewSize 设置年轻代大小(for 1.3/1.4)\n * -XX:MaxNewSize 年轻代最大值(for 1.3/1.4)\n * -XX:NewRatio 年轻代与年老代的比值(除去持久代)\n * -XX:SurvivorRatio Eden区与Survivor区的的比值\n * -XX:PretenureSizeThreshold 当创建的对象超过指定大小时，直接把对象分配在老年代。\n * -XX:MaxTenuringThreshold设定对象在Survivor复制的最大年龄阈值，超过阈值转移到老年代\n\n# 「垃圾收集器相关」\n\n-XX:+UseParallelGC：选择垃圾收集器为并行收集器。\n\n * -XX:ParallelGCThreads=20：配置并行收集器的线程数\n * -XX:+UseConcMarkSweepGC：设置年老代为并发收集。\n * -XX:CMSFullGCsBeforeCompaction=5 由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行5次GC以后对内存空间进行压缩、整理。\n * -XX:+UseCMSCompactAtFullCollection：打开对年老代的压缩。可能会影响性能，但是可以消除碎片\n\n# 「辅助信息相关」\n\n * -XX:+PrintGCDetails 打印GC详细信息\n * -XX:+HeapDumpOnOutOfMemoryError让JVM在发生内存溢出的时候自动生成内存快照,排查问题用\n * -XX:+DisableExplicitGC禁止系统System.gc()，防止手动误触发FGC造成问题.\n * -XX:+PrintTLAB 查看TLAB空间的使用情况\n\n\n# 30、说一下 JVM 有哪些垃圾回收器？\n\n如果说垃圾收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。下图展示了7种作用于不同分代的收集器，其中用于回收新生代的收集器包括Serial、PraNew、Parallel Scavenge，回收老年代的收集器包括Serial Old、Parallel Old、CMS，还有用于回收整个Java堆的G1收集器。不同收集器之间的连线表示它们可以搭配使用\n\nSerial收集器（复制算法): 新生代单线程收集器，标记和清理都是单线程，优点是简单高效； ParNew收集器 (复制算法): 新生代收并行集器，实际上是Serial收集器的多线程版本，在多核CPU环境下有着比Serial更好的表现； Parallel Scavenge收集器 (复制算法): 新生代并行收集器，追求高吞吐量，高效利用 CPU。吞吐量 = 用户线程时间/(用户线程时间+GC线程时间)，高吞吐量可以高效率的利用CPU时间，尽快完成程序的运算任务，适合后台应用等对交互相应要求不高的场景； Serial Old收集器 (标记-整理算法): 老年代单线程收集器，Serial收集器的老年代版本； Parallel Old收集器 (标记-整理算法)： 老年代并行收集器，吞吐量优先，Parallel Scavenge收集器的老年代版本； CMS(Concurrent Mark Sweep)收集器（标记-清除算法）： 老年代并行收集器，以获取最短回收停顿时间为目标的收集器，具有高并发、低停顿的特点，追求最短GC回收停顿时间。 G1(Garbage First)收集器 (标记-整理算法)： Java堆并行收集器，G1收集器是JDK1.7提供的一个新收集器，G1收集器基于“标记-整理”算法实现，也就是说不会产生内存碎片。此外，G1收集器不同于之前的收集器的一个重要特点是：G1回收的范围是整个Java堆(包括新生代，老年代)，而前六种收集器回收的范围仅限于新生代或老年代。 **ZGC （Z Garbage Collector）**是一款由Oracle公司研发的，以低延迟为首要目标的一款垃圾收集器。它是基于动态Region内存布局，（暂时）不设年龄分代，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的收集器。在JDK 11 新加入，还在实验阶段，主要特点是：回收TB级内存（最大4T），停顿时间不超过10ms。优点：低停顿，高吞吐量， ZGC 收集过程中额外耗费的内存小。缺点：浮动垃圾，目前使用的非常少，真正普及还是需要写时间的。\n\n新生代收集器：Serial、ParNew 、Parallel Scavenge 老年代收集器： CMS 、Serial Old、Parallel Old 整堆收集器： G1 ， ZGC (因为不涉年代不在图中)。\n\n\n# 31、如何选择垃圾收集器？\n\n 1. 如果你的堆大小不是很大（比如 100MB ），选择串行收集器一般是效率最高的。 参数： -XX:+UseSerialGC 。\n\n 2. 如果你的应用运行在单核的机器上，或者你的虚拟机核数只有单核，选择串行收集器依然是合适的，这时候启用一些并行收集器没有任何收益。 参数： -XX:+UseSerialGC 。\n\n 3. 如果你的应用是“吞吐量”优先的，并且对较长时间的停顿没有什么特别的要求。选择并行收集器是比较好的。 参数： -XX:+UseParallelGC 。\n\n 4. 如果你的应用对响应时间要求较高，想要较少的停顿。甚至 1 秒的停顿都会引起大量的请求失败，那么选择G1 、ZGC 、CMS 都是合理的。虽然这些收集器的 GC 停顿通常都比较短，但它 需要一些额外的资源去处理这些工作，通常吞吐量会低一些。 参数： -XX:+UseConcMarkSweepGC 、 -XX:+UseG1GC 、-XX:+UseZGC 等。 从上面这些出发点来看，我们平常的 Web 服务器，都是对响应性要求非常高的。选择性其实就集中在 CMS 、G1 、ZGC 上。而对于某些定时任务，使用并行收集器，是一个比较好的选择。\n\n\n# 32、 什么是类加载器？\n\n类加载器是一个用来加载类文件的类。Java 源代码通过 javac 编译器编译成类 文件。然后 JVM 来执 行类文件中的字节码来执行程序。类加载器负责加载文件 系统、网络或其他来源的类文件。\n\n\n# 33、什么是 tomcat 类加载机制？\n\n在 tomcat 中类的加载稍有不同，如下图：\n\n\n\n当 tomcat启动时，会创建几种类加载器： Bootstrap 引导类加载器 加载 JVM启动所需的类，以及标准扩展类（位于jre/lib/ext 下） System 系统类加载器 加载 tomcat 启动的类，比如bootstrap.jar，通常在 catalina.bat 或者 catalina.sh 中指定。位于CATALINA_HOME/bin 下。",normalizedContent:"# 002.jvm002\n\n\n# 18、常见调优工具有哪些\n\n常用调优工具分为两类,jdk自带监控工具：jconsole和jvisualvm，第三方有：mat(memory analyzer tool)、gchisto。\n\n * jconsole，java monitoring and management console是从java5开始，在jdk中自带的java监\n   \n   控和管理控制台，用于对jvm中内存，线程和类等的监控\n\n * jvisualvm，jdk自带全能工具，可以分析内存快照、线程快照；监控内存变化、gc变化等。\n\n * mat，memory analyzer tool，一个基于eclipse的内存分析工具，是一个快速、功能丰富的java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗\n\n * gchisto，一款专业分析gc日志的工具\n\n\n# 19、minor gc与full gc分别在什么时候发生？\n\n新生代内存不够用时候发生mgc也叫ygc，jvm内存不够的时候发生fgc\n\n\n# 20、你知道哪些jvm性能调优参数？（简单版回答）\n\n * 设定堆内存大小 -xmx：堆内存最大限制。\n * 设定新生代大小。 新生代不宜太小，否则会有大量对象涌入老年代\n   * -xx:newsize：新生代大小\n   * -xx:newratio 新生代和老生代占比\n   * -xx:survivorratio：伊甸园空间和幸存者空间的占比\n * 设定垃圾回收器 年轻代用 -xx:+useparnewgc 年老代用-xx:+useconcmarksweepgc\n\n\n# 21、 对象一定分配在堆中吗？有没有了解逃逸分析技术？\n\n「对象一定分配在堆中吗？」 不一定的，jvm通过「逃逸分析」，那些逃不出方法的对象会在栈上分配。\n\n * 「什么是逃逸分析？」\n   \n   逃逸分析(escape analysis)，是一种可以有效减少java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，java hotspot编译器能够分析出一个新的对象的引用的使用范围，从而决定是否要将这个对象分配到堆上。逃逸分析是指分析指针动态范围的方法，它同编译器优化原理的指针分析和外形分析相关联。当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他方法或者线程所引用，这种现象称作指针（或者引用）的逃逸(escape)。通俗点讲，如果一个对象的指针被多个方法或者线程引用时，那么我们就称这个对象的指针发生了逃逸。\n\n * 「逃逸分析的好处」\n\n * 栈上分配，可以降低垃圾收集器运行的频率。\n\n * 同步消除，如果发现某个对象只能从一个线程可访问，那么在这个对象上的操作可以不需要同步。\n\n * 标量替换，把对象分解成一个个基本类型，并且内存分配不再是分配在堆上，而是分配在栈上。这样的好处有，一、减少内存使用，因为不用生成对象头。二、程序内存回收效率高，并且gc频率也会减少\n\n\n# 22、虚拟机为什么使用元空间替换了永久代？\n\n「什么是元空间？什么是永久代？为什么用元空间代替永久代？」 我们先回顾一下**「方法区」**吧,看看虚拟机运行时数据内存图，如下:\n\n> 方法区和堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。\n\n# 「什么是永久代？它和方法区有什么关系呢？」\n\n> 如果在hotspot虚拟机上开发、部署，很多程序员都把方法区称作永久代。可以说方法区是规范，永久代是hotspot针对该规范进行的实现。在java7及以前的版本，方法区都是永久代实现的。\n\n# 「什么是元空间？它和方法区有什么关系呢？」\n\n> 对于java8，hotspots取消了永久代，取而代之的是元空间(metaspace)。换句话说，就是方法区还是在的，只是实现变了，从永久代变为元空间了。\n\n# 「为什么使用元空间替换了永久代？」\n\n永久代的方法区，和堆使用的物理内存是连续的。\n\n「永久代」是通过以下这两个参数配置大小的~\n\n * -xx:premsize：设置永久代的初始大小\n * -xx:maxpermsize: 设置永久代的最大值，默认是64m\n\n对于「永久代」，如果动态生成很多class的话，就很可能出现「java.lang.outofmemoryerror:permgen space错误」，因为永久代空间配置有限嘛。最典型的场景是，在web开发比较多jsp页面的时候。jdk8之后，方法区存在于元空间(metaspace)。物理内存不再与堆连续，而是直接存在于本地内存中，理论上机器「内存有多大，元空间就有多大」。\n\n可以通过以下的参数来设置元空间的大小：\n\n-xx:metaspacesize，初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时gc会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过maxmetaspacesize时，适当提高该值。\n\n-xx:maxmetaspacesize，最大空间，默认是没有限制的。\n\n-xx:minmetaspacefreeratio，在gc之后，最小的metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集\n\n-xx:maxmetaspacefreeratio，在gc之后，最大的metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集\n\n# 「所以，为什么使用元空间替换永久代？」\n\n表面上看是为了避免oom异常。因为通常使用permsize和maxpermsize设置永久代的大小就决定了永久代的上限，但是不是总能知道应该设置为多大合适, 如果使用默认值很容易遇到 oom错误。当使用元空间时，可以加载多少类的元数据就不再由maxpermsize控制, 而由系统的实际可用空间来控制啦。\n\n\n# 23、什么是stop the world ? 什么是oopmap？什么是安全点？\n\n进行垃圾回收的过程中，会涉及对象的移动。为了保证对象引用更新的正确性，必须暂停所有的用户线程，像这样的停顿，虚拟机设计者形象描述为「stop the world」。也简称为stw。在hotspot中，有个数据结构（映射表）称为「oopmap」。一旦类加载动作完成的时候，hotspot就会把对象内什么偏移量上是什么类型的数据计算出来，记录到oopmap。在即时编译过程中，也会在「特定的位置」生成 oopmap，记录下栈上和寄存器里哪些位置是引用。 这些特定的位置主要在：\n\n * 1.循环的末尾（非 counted 循环）\n * 2.方法临返回前 / 调用方法的call指令后\n * 3.可能抛异常的位置\n\n这些位置就叫作「安全点(safepoint)。」 用户程序执行时并非在代码指令流的任意位置都能够在停顿下来开始垃圾收集，而是必须是执行到安全点才能够暂停。\n\n\n# 24、说一下jvm 的主要组成部分及其作用？\n\n\n\njvm包含两个子系统和两个组件，分别为\n\n * class loader(类装载子系统)\n\n * execution engine(执行引擎子系统)；\n\n * runtime data area(运行时数据区组件)\n\n * native interface(本地接口组件)。\n\n * 「class loader(类装载)：」 根据给定的全限定名类名(如：java.lang.object)来装载class文件到运行时数据区的方法区中。\n\n * 「execution engine（执行引擎）」：执行class的指令。\n\n * 「native interface(本地接口)」： 与native lib交互，是其它编程语言交互的接口。\n\n * 「runtime data area(运行时数据区域)」：即我们常说的jvm的内存。\n\n> 首先通过编译器把 java源代码转换成字节码，class loader(类装载)再把字节码加载到内存中，将其放在运行时数据区的方法区内，而字节码文件只是 jvm 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（execution engine），将字节码翻译成底层系统指令，再交由 cpu 去执行，而这个过程中需要调用其他语言的本地库接口（native interface）来实现整个程序的功能。\n\n\n# 25、什么是指针碰撞？\n\n一般情况下，jvm的对象都放在堆内存中（发生逃逸分析除外）。当类加载检查通过后，java虚拟机开始为新生对象分配内存。如果java堆中内存是绝对规整的，所有被使用过的的内存都被放到一边，空闲的内存放到另外一边，中间放着一个指针作为分界点的指示器，所分配内存仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的实例，这种分配方式就是 指针碰撞。\n\n\n# 26，什么是空闲列表？\n\n如果java堆内存中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，不可以进 行指针碰撞啦，虚拟机必须维护一个列表，记录哪些内存是可用的，在分配的时候从列表找到一块 大的空间分配给对象实例，并更新列表上的记录，这种分配方式就是空闲列表。\n\n\n# 27，什么是tlab？\n\n可以把内存分配的动作按照线程划分在不同的空间之中进行，每个线程在java堆中预先分配一小块内存,这就是tlab（thread local allocation buffer，本地线程分配缓存） 。虚拟机通过-xx:usetlab 设定它的。\n\n28、对象头具体都包含哪些内容？ 在我们常用的hotspot虚拟机中，对象在内存中布局实际包含3个部分：\n\n 1. 对象头\n 2. 实例数据\n 3. 对齐填充\n\n而对象头包含两部分内容，mark word中的内容会随着锁标志位而发生变化，所以只说存储结就好了\n\n * 对象自身运行时所需的数据，也被称为mark word，也就是用于轻量级锁和偏向锁的关键点。具体的内容包含对象的hashcode、分代年龄、轻量级锁指针、重量级锁指针、gc标记、偏向锁线程id、偏向锁时间戳。\n\n * 存储类型指针，也就是指向类的元数据的指针，通过这个指针才能确定对象是属于哪个类的实例。如果是数组的话，则还包含了数组的长度。\n\n如果是数组的话，则还包含了数组的长度。\n\n\n# 29、你知道哪些jvm调优参数？\n\n# 「堆栈内存相关」\n\n * -xms 设置初始堆的大小\n * -xmx 设置最大堆的大小\n * -xmn 设置年轻代大小，相当于同时配置-xx:newsize和-xx:maxnewsize为一样的值\n * -xss 每个线程的堆栈大小\n * -xx:newsize 设置年轻代大小(for 1.3/1.4)\n * -xx:maxnewsize 年轻代最大值(for 1.3/1.4)\n * -xx:newratio 年轻代与年老代的比值(除去持久代)\n * -xx:survivorratio eden区与survivor区的的比值\n * -xx:pretenuresizethreshold 当创建的对象超过指定大小时，直接把对象分配在老年代。\n * -xx:maxtenuringthreshold设定对象在survivor复制的最大年龄阈值，超过阈值转移到老年代\n\n# 「垃圾收集器相关」\n\n-xx:+useparallelgc：选择垃圾收集器为并行收集器。\n\n * -xx:parallelgcthreads=20：配置并行收集器的线程数\n * -xx:+useconcmarksweepgc：设置年老代为并发收集。\n * -xx:cmsfullgcsbeforecompaction=5 由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此值设置运行5次gc以后对内存空间进行压缩、整理。\n * -xx:+usecmscompactatfullcollection：打开对年老代的压缩。可能会影响性能，但是可以消除碎片\n\n# 「辅助信息相关」\n\n * -xx:+printgcdetails 打印gc详细信息\n * -xx:+heapdumponoutofmemoryerror让jvm在发生内存溢出的时候自动生成内存快照,排查问题用\n * -xx:+disableexplicitgc禁止系统system.gc()，防止手动误触发fgc造成问题.\n * -xx:+printtlab 查看tlab空间的使用情况\n\n\n# 30、说一下 jvm 有哪些垃圾回收器？\n\n如果说垃圾收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。下图展示了7种作用于不同分代的收集器，其中用于回收新生代的收集器包括serial、pranew、parallel scavenge，回收老年代的收集器包括serial old、parallel old、cms，还有用于回收整个java堆的g1收集器。不同收集器之间的连线表示它们可以搭配使用\n\nserial收集器（复制算法): 新生代单线程收集器，标记和清理都是单线程，优点是简单高效； parnew收集器 (复制算法): 新生代收并行集器，实际上是serial收集器的多线程版本，在多核cpu环境下有着比serial更好的表现； parallel scavenge收集器 (复制算法): 新生代并行收集器，追求高吞吐量，高效利用 cpu。吞吐量 = 用户线程时间/(用户线程时间+gc线程时间)，高吞吐量可以高效率的利用cpu时间，尽快完成程序的运算任务，适合后台应用等对交互相应要求不高的场景； serial old收集器 (标记-整理算法): 老年代单线程收集器，serial收集器的老年代版本； parallel old收集器 (标记-整理算法)： 老年代并行收集器，吞吐量优先，parallel scavenge收集器的老年代版本； cms(concurrent mark sweep)收集器（标记-清除算法）： 老年代并行收集器，以获取最短回收停顿时间为目标的收集器，具有高并发、低停顿的特点，追求最短gc回收停顿时间。 g1(garbage first)收集器 (标记-整理算法)： java堆并行收集器，g1收集器是jdk1.7提供的一个新收集器，g1收集器基于“标记-整理”算法实现，也就是说不会产生内存碎片。此外，g1收集器不同于之前的收集器的一个重要特点是：g1回收的范围是整个java堆(包括新生代，老年代)，而前六种收集器回收的范围仅限于新生代或老年代。 **zgc （z garbage collector）**是一款由oracle公司研发的，以低延迟为首要目标的一款垃圾收集器。它是基于动态region内存布局，（暂时）不设年龄分代，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的收集器。在jdk 11 新加入，还在实验阶段，主要特点是：回收tb级内存（最大4t），停顿时间不超过10ms。优点：低停顿，高吞吐量， zgc 收集过程中额外耗费的内存小。缺点：浮动垃圾，目前使用的非常少，真正普及还是需要写时间的。\n\n新生代收集器：serial、parnew 、parallel scavenge 老年代收集器： cms 、serial old、parallel old 整堆收集器： g1 ， zgc (因为不涉年代不在图中)。\n\n\n# 31、如何选择垃圾收集器？\n\n 1. 如果你的堆大小不是很大（比如 100mb ），选择串行收集器一般是效率最高的。 参数： -xx:+useserialgc 。\n\n 2. 如果你的应用运行在单核的机器上，或者你的虚拟机核数只有单核，选择串行收集器依然是合适的，这时候启用一些并行收集器没有任何收益。 参数： -xx:+useserialgc 。\n\n 3. 如果你的应用是“吞吐量”优先的，并且对较长时间的停顿没有什么特别的要求。选择并行收集器是比较好的。 参数： -xx:+useparallelgc 。\n\n 4. 如果你的应用对响应时间要求较高，想要较少的停顿。甚至 1 秒的停顿都会引起大量的请求失败，那么选择g1 、zgc 、cms 都是合理的。虽然这些收集器的 gc 停顿通常都比较短，但它 需要一些额外的资源去处理这些工作，通常吞吐量会低一些。 参数： -xx:+useconcmarksweepgc 、 -xx:+useg1gc 、-xx:+usezgc 等。 从上面这些出发点来看，我们平常的 web 服务器，都是对响应性要求非常高的。选择性其实就集中在 cms 、g1 、zgc 上。而对于某些定时任务，使用并行收集器，是一个比较好的选择。\n\n\n# 32、 什么是类加载器？\n\n类加载器是一个用来加载类文件的类。java 源代码通过 javac 编译器编译成类 文件。然后 jvm 来执 行类文件中的字节码来执行程序。类加载器负责加载文件 系统、网络或其他来源的类文件。\n\n\n# 33、什么是 tomcat 类加载机制？\n\n在 tomcat 中类的加载稍有不同，如下图：\n\n\n\n当 tomcat启动时，会创建几种类加载器： bootstrap 引导类加载器 加载 jvm启动所需的类，以及标准扩展类（位于jre/lib/ext 下） system 系统类加载器 加载 tomcat 启动的类，比如bootstrap.jar，通常在 catalina.bat 或者 catalina.sh 中指定。位于catalina_home/bin 下。",charsets:{cjk:!0}},{title:"001.多线程&并发篇001",frontmatter:{title:"001.多线程&并发篇001",categories:["Java","多线程","并发"],tags:["Java","多线程","并发"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-02T11:12:56.000Z",permalink:"/pages/7c6a10/"},regularPath:"/07.Java/03.%E5%A4%9A%E7%BA%BF%E7%A8%8B&%E5%B9%B6%E5%8F%91%E7%AF%87/001.%E5%A4%9A%E7%BA%BF%E7%A8%8B&%E5%B9%B6%E5%8F%91%E7%AF%87001.html",relativePath:"07.Java/03.多线程&并发篇/001.多线程&并发篇001.md",key:"v-78a877b0",path:"/pages/7c6a10/",headers:[{level:2,title:"1、说说Java中实现多线程有几种方法",slug:"_1、说说java中实现多线程有几种方法",normalizedTitle:"1、说说java中实现多线程有几种方法",charIndex:21},{level:4,title:"采用实现Runnable、Callable接口的方式创建线程的优缺点",slug:"采用实现runnable、callable接口的方式创建线程的优缺点",normalizedTitle:"采用实现runnable、callable接口的方式创建线程的优缺点",charIndex:308},{level:4,title:"采用继承Thread类的方式创建线程的优缺点",slug:"采用继承thread类的方式创建线程的优缺点",normalizedTitle:"采用继承thread类的方式创建线程的优缺点",charIndex:532},{level:2,title:"2、如何停止一个正在运行的线程",slug:"_2、如何停止一个正在运行的线程",normalizedTitle:"2、如何停止一个正在运行的线程",charIndex:675},{level:2,title:"3、notify()和notifyAll()有什么区别？",slug:"_3、notify-和notifyall-有什么区别",normalizedTitle:"3、notify()和notifyall()有什么区别？",charIndex:1713},{level:2,title:"4、sleep()和wait() 有什么区别？",slug:"_4、sleep-和wait-有什么区别",normalizedTitle:"4、sleep()和wait() 有什么区别？",charIndex:2154},{level:2,title:"5、volatile 是什么?可以保证有序性吗?",slug:"_5、volatile-是什么-可以保证有序性吗",normalizedTitle:"5、volatile 是什么?可以保证有序性吗?",charIndex:2433},{level:2,title:"6、Thread 类中的start() 和 run() 方法有什么区别？",slug:"_6、thread-类中的start-和-run-方法有什么区别",normalizedTitle:"6、thread 类中的start() 和 run() 方法有什么区别？",charIndex:2940},{level:2,title:"7、为什么wait, notify 和 notifyAll这些方法不在thread类里面？",slug:"_7、为什么wait-notify-和-notifyall这些方法不在thread类里面",normalizedTitle:"7、为什么wait, notify 和 notifyall这些方法不在thread类里面？",charIndex:3100},{level:2,title:"8、为什么wait和notify方法要在同步块中调用？",slug:"_8、为什么wait和notify方法要在同步块中调用",normalizedTitle:"8、为什么wait和notify方法要在同步块中调用？",charIndex:3327},{level:2,title:"9、Java中interrupted 和 isInterruptedd方法的区别？",slug:"_9、java中interrupted-和-isinterruptedd方法的区别",normalizedTitle:"9、java中interrupted 和 isinterruptedd方法的区别？",charIndex:3858},{level:2,title:"10、Java中synchronized 和 ReentrantLock 有什么不同？",slug:"_10、java中synchronized-和-reentrantlock-有什么不同",normalizedTitle:"10、java中synchronized 和 reentrantlock 有什么不同？",charIndex:4195},{level:2,title:"11、有三个线程T1,T2,T3,如何保证顺序执行？",slug:"_11、有三个线程t1-t2-t3-如何保证顺序执行",normalizedTitle:"11、有三个线程t1,t2,t3,如何保证顺序执行？",charIndex:5045},{level:2,title:"12、SynchronizedMap和ConcurrentHashMap有什么区别？",slug:"_12、synchronizedmap和concurrenthashmap有什么区别",normalizedTitle:"12、synchronizedmap和concurrenthashmap有什么区别？",charIndex:6413},{level:2,title:"13、什么是线程安全",slug:"_13、什么是线程安全",normalizedTitle:"13、什么是线程安全",charIndex:6794},{level:2,title:"14、Thread类中的yield方法有什么作用？",slug:"_14、thread类中的yield方法有什么作用",normalizedTitle:"14、thread类中的yield方法有什么作用？",charIndex:7452},{level:2,title:"15、Java线程池中submit() 和 execute()方法有什么区别？",slug:"_15、java线程池中submit-和-execute-方法有什么区别",normalizedTitle:"15、java线程池中submit() 和 execute()方法有什么区别？",charIndex:7596},{level:2,title:"16、说一说自己对于 synchronized 关键字的了解",slug:"_16、说一说自己对于-synchronized-关键字的了解",normalizedTitle:"16、说一说自己对于 synchronized 关键字的了解",charIndex:7826}],headersStr:"1、说说Java中实现多线程有几种方法 采用实现Runnable、Callable接口的方式创建线程的优缺点 采用继承Thread类的方式创建线程的优缺点 2、如何停止一个正在运行的线程 3、notify()和notifyAll()有什么区别？ 4、sleep()和wait() 有什么区别？ 5、volatile 是什么?可以保证有序性吗? 6、Thread 类中的start() 和 run() 方法有什么区别？ 7、为什么wait, notify 和 notifyAll这些方法不在thread类里面？ 8、为什么wait和notify方法要在同步块中调用？ 9、Java中interrupted 和 isInterruptedd方法的区别？ 10、Java中synchronized 和 ReentrantLock 有什么不同？ 11、有三个线程T1,T2,T3,如何保证顺序执行？ 12、SynchronizedMap和ConcurrentHashMap有什么区别？ 13、什么是线程安全 14、Thread类中的yield方法有什么作用？ 15、Java线程池中submit() 和 execute()方法有什么区别？ 16、说一说自己对于 synchronized 关键字的了解",content:'# 001.多线程&并发篇001\n\n\n# 1、说说Java中实现多线程有几种方法\n\n创建线程的常用三种方式：\n\n 1. 继承Thread类\n\n 2. 实现Runnable接口\n\n 3. 实现Callable接口（ JDK1.5>=）\n\n 4. 线程池方式创建\n\n通过继承Thread类或者实现Runnable接口、Callable接口都可以实现多线程，不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callable接口里定义的方法返回值，可以声明抛出异常而已。因此将实现Runnable接口和实现Callable接口归为一种方式。这种方式与继承Thread方式之间的主要差别如下。\n\n# 采用实现Runnable、Callable接口的方式创建线程的优缺点\n\n优点：线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。\n\n缺点：编程稍微复杂一些，如果需要访问当前线程，则必须使用Thread.currentThread() 方法\n\n# 采用继承Thread类的方式创建线程的优缺点\n\n优点：编写简单，如果需要访问当前线程，则无需使用Thread.currentThread() 方法，直接使用this即可获取当前线程 缺点：因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。\n\n\n# 2、如何停止一个正在运行的线程\n\n1、使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。\n\n2、使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法。\n\n3、使用interrupt方法中断线程。\n\nclass MyThread extends Thread {\n    volatile boolean stop = false;\n    public void run() {\n        while (!stop) {\n        System.out.println(getName() + " is running");\n            try {\n                sleep(1000);\n            } catch (InterruptedException e) {\n                 System.out.println("week up from blcok...");\n            stop = true; // 在异常处理代码中修改共享变量的状态\n    \t\t}\n\t\t}\n\t\tSystem.out.println(getName() + " is exiting...");\n\t}\n}\nclass InterruptThreadDemo3 {\npublic static void main(String[] args) throws InterruptedException {\n    MyThread m1 = new MyThread();\n    System.out.println("Starting thread...");\n    m1.start();\n    Thread.sleep(3000);\n    System.out.println("Interrupt thread...: " + m1.getName());\n    m1.stop = true; // 设置共享变量为true\n    m1.interrupt(); // 阻塞时退出阻塞状态\n    Thread.sleep(3000); // 主线程休眠3秒以便观察线程m1的中断情况\n    System.out.println("Stopping application...");\n    }\n}\n\n\n\n# 3、notify()和notifyAll()有什么区别？\n\n * notify可能会导致死锁，而notifyAll则不会\n * 任何时候只有一个线程可以获得锁，也就是说只有一个线程可以运行synchronized 中的代码\n * 使用notifyall,可以唤醒 所有处于wait状态的线程，使其重新进入锁的争夺队列中，而notify只能唤醒一个。\n * wait() 应配合while循环使用，不应使用if，务必在wait()调用前后都检查条件，如果不满足，必须调用notify()唤醒另外的线程来处理，自己继续wait()直至条件满足再往下执行。\n * notify() 是对notifyAll()的一个优化，但它有很精确的应用场景，并且要求正确使用。不然可能导致死锁。正确的场景应该是 WaitSet中等待的是相同的条件，唤醒任一个都能正确处理接下来的事 项，如果唤醒的线程无法正确处理，务必确保继续notify()下一个线程，并且自身需要重新回到 WaitSet中\n\n\n# 4、sleep()和wait() 有什么区别？\n\n * 对于sleep()方法，我们首先要知道该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。\n * sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。在调用sleep()方法的过程中，线程不会释放对象锁。\n * 当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备，获取对象锁进入运行状态。\n\n\n# 5、volatile 是什么?可以保证有序性吗?\n\n一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：\n\n1） 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。\n\n2） 禁止进行指令重排序。 volatile 不是原子性操作 什么叫保证部分有序性?\n\n当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；\n\nx = 2; //语句1\ny = 0; //语句2\nflag = true; //语句3\nx = 4; //语句4\ny = -1; //语句5\n\n\n由于ﬂag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句 2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。\n\n使用volatile 一般用于 状态标记量 和 单例模式的双检锁。\n\n\n# 6、Thread 类中的start() 和 run() 方法有什么区别？\n\nstart()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。\n\n\n# 7、为什么wait, notify 和 notifyAll这些方法不在thread类里面？\n\n明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在Thread类中，线程正在等待的是哪个锁就不明显了。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。\n\n\n# 8、为什么wait和notify方法要在同步块中调用？\n\n 1. 只有在调用线程拥有某个对象的独占锁时，才能够调用该对象的wait(),notify()和notifyAll()方法。\n\n 2. 如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。\n\n 3. 还有一个原因是为了避免wait和notify之间产生竞态条件。\n\nwait()方法强制当前线程释放对象锁。这意味着在调用某对象的wait()方法之前，当前线程必须已经获得该对象的锁。因此，线程必须在某个对象的同步方法或同步代码块中才能调用该对象的wait()方法。\n\n在调用对象的notify()和notifyAll()方法之前，调用线程必须已经得到该对象的锁。因此，必须在某个对象的同步方法或同步代码块中才能调用该对象的notify()或notifyAll()方法。\n\n调用wait()方法的原因通常是，调用线程希望某个特殊的状态(或变量)被设置之后再继续执行。调用 notify()或notifyAll()方法的原因通常是，调用线程希望告诉其他等待中的线程:"特殊状态已经被设置"。这个状态作为线程间通信的通道，它必须是一个可变的共享状态(或变量)。\n\n\n# 9、Java中interrupted 和 isInterruptedd方法的区别？\n\ninterrupted() 和 isInterrupted()的主要区别是前者会将中断状态清除而后者不会。Java多线程的中断机制是用内部标识来实现的，调用Thread.interrupt()来中断一个线程就会设置中断标识为true。当中断线程调用静态方法Thread.interrupted()来检查中断状态时，中断状态会被清零。而非静态方法isInterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛出 InterruptedException异常的方法都会将中断状态清零。无论如何，一个线程的中断状态有有可能被其它线程调用中断来改变。\n\n\n# 10、Java中synchronized 和 ReentrantLock 有什么不同？\n\n相似点：\n\n这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等 待，而进行线程阻塞和唤醒的代价是比较高的.\n\n区别：\n\n这两种方式最大区别就是对于Synchronized来说，它是java语言的关键字，是原生语法层面的互斥，需要jvm实现。而ReentrantLock它是JDK 1.5之后提供的API层面的互斥锁，需要lock()和 unlock()方法配合try/ﬁnally语句块来完成。\n\nSynchronized进过编译，会在同步块的前后分别形成monitorenter和monitorexit这个两个字节码指令。在执行monitorenter指令时，首先要尝试获取对象锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象锁，把锁的计算器加1，相应的，在执行monitorexit指令时会将锁计算器就减1，当计算器为0时，锁就被释放了。如果获取对象锁失败，那当前线程就要阻塞，直到对象锁被另一个线程释放为止。\n\n由于ReentrantLock是java.util.concurrent包下提供的一套互斥锁，相比Synchronized，\n\nReentrantLock类提供了一些高级功能，主要有以下3项：\n\n 1. 等待可中断，持有锁的线程长期不释放的时候，正在等待的线程可以选择放弃等待，这相当于 Synchronized来说可以避免出现死锁的情况。\n\n 2. 公平锁，多个线程等待同一个锁时，必须按照申请锁的时间顺序获得锁，Synchronized锁非公平锁，ReentrantLock默认的构造函数是创建的非公平锁，可以通过参数true设为公平锁，但公平锁表现的性能不是很好。\n\n 3. 锁绑定多个条件，一个ReentrantLock对象可以同时绑定对个对象。\n\n\n# 11、有三个线程T1,T2,T3,如何保证顺序执行？\n\n在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。\n\n实际上先启动三个线程中哪一个都行， 因为在每个线程的run方法中用join方法限定了三个线程的执行顺序\n\npublic class JoinTest2 {\n\t// 1.现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行\n    public static void main(String[] args) {\n        final Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println("t1");\n             }\n        });\n        final Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    // 引用t1线程，等待t1线程执行完\n                    t1.join();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println("t2");\n            }\n        });\n        Thread t3 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                    try {\n                    // 引用t2线程，等待t2线程执行完\n                    t2.join();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println("t3");\n                }\n         });\n          t3.start();//这里三个线程的启动顺序可以任意，大家可以试下！\n          t2.start();\n          t1.start();\n     }\n}\n\n\n\n# 12、SynchronizedMap和ConcurrentHashMap有什么区别？\n\nSynchronizedMap()和Hashtable一样，实现上在调用map所有方法时，都对整个map进行同步。而ConcurrentHashMap的实现却更加精细，它对map中的所有桶加了锁。所以，只要有一个线程访问map，其他线程就无法进入map，而如果一个线程在访问ConcurrentHashMap某个桶时，其他线程，仍然可以对map执行某些操作。\n\n所以，ConcurrentHashMap在性能以及安全性方面，明显比Collections.synchronizedMap()更加有优势。同时，同步操作精确控制到桶，这样，即使在遍历map时，如果其他线程试图对map进行数据修改，也不会抛出ConcurrentModiﬁcationException。\n\n\n# 13、什么是线程安全\n\n线程安全就是说多线程访问同一段代码，不会产生不确定的结果。\n\n又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。\n\n这个问题有值得一提的地方，就是线程安全也是有几个级别的：\n\n（1） 不可变\n\n像String、Integer、Long这些，都是ﬁnal类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用\n\n（2） 绝对线程安全\n\n不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，Java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的 类，Java中也有，比方说CopyOnWriteArrayList、CopyOnWriteArraySet\n\n（3） 相对线程安全\n\n相对线程安全也就是我们通常意义上所说的线程安全，像Vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个Vector、有个线程同时在add这个 Vector，99%的情况下都会出现ConcurrentModiﬁcationException，也就是fail-fast机制。\n\n（4） 线程非安全\n\n这个就没什么好说的了，ArrayList、LinkedList、HashMap等都是线程非安全的类\n\n\n# 14、Thread类中的yield方法有什么作用？\n\nYield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行。\n\n\n# 15、Java线程池中submit() 和 execute()方法有什么区别？\n\n两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中,而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了 Executor接口，其它线程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些方法。\n\n\n# 16、说一说自己对于 synchronized 关键字的了解\n\nsynchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。 另外，在 Java 早期版本中， synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核\n\n态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因。庆幸的是在 Java 6 之后 Java 官方对从 JVM 层面对synchronized 较大优化，所以现在的 synchronized 锁效率也优化得很不错了。JDK1.6对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。',normalizedContent:'# 001.多线程&并发篇001\n\n\n# 1、说说java中实现多线程有几种方法\n\n创建线程的常用三种方式：\n\n 1. 继承thread类\n\n 2. 实现runnable接口\n\n 3. 实现callable接口（ jdk1.5>=）\n\n 4. 线程池方式创建\n\n通过继承thread类或者实现runnable接口、callable接口都可以实现多线程，不过实现runnable接口与实现callable接口的方式基本相同，只是callable接口里定义的方法返回值，可以声明抛出异常而已。因此将实现runnable接口和实现callable接口归为一种方式。这种方式与继承thread方式之间的主要差别如下。\n\n# 采用实现runnable、callable接口的方式创建线程的优缺点\n\n优点：线程类只是实现了runnable或者callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将cpu、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。\n\n缺点：编程稍微复杂一些，如果需要访问当前线程，则必须使用thread.currentthread() 方法\n\n# 采用继承thread类的方式创建线程的优缺点\n\n优点：编写简单，如果需要访问当前线程，则无需使用thread.currentthread() 方法，直接使用this即可获取当前线程 缺点：因为线程类已经继承了thread类，java语言是单继承的，所以就不能再继承其他父类了。\n\n\n# 2、如何停止一个正在运行的线程\n\n1、使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。\n\n2、使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法。\n\n3、使用interrupt方法中断线程。\n\nclass mythread extends thread {\n    volatile boolean stop = false;\n    public void run() {\n        while (!stop) {\n        system.out.println(getname() + " is running");\n            try {\n                sleep(1000);\n            } catch (interruptedexception e) {\n                 system.out.println("week up from blcok...");\n            stop = true; // 在异常处理代码中修改共享变量的状态\n    \t\t}\n\t\t}\n\t\tsystem.out.println(getname() + " is exiting...");\n\t}\n}\nclass interruptthreaddemo3 {\npublic static void main(string[] args) throws interruptedexception {\n    mythread m1 = new mythread();\n    system.out.println("starting thread...");\n    m1.start();\n    thread.sleep(3000);\n    system.out.println("interrupt thread...: " + m1.getname());\n    m1.stop = true; // 设置共享变量为true\n    m1.interrupt(); // 阻塞时退出阻塞状态\n    thread.sleep(3000); // 主线程休眠3秒以便观察线程m1的中断情况\n    system.out.println("stopping application...");\n    }\n}\n\n\n\n# 3、notify()和notifyall()有什么区别？\n\n * notify可能会导致死锁，而notifyall则不会\n * 任何时候只有一个线程可以获得锁，也就是说只有一个线程可以运行synchronized 中的代码\n * 使用notifyall,可以唤醒 所有处于wait状态的线程，使其重新进入锁的争夺队列中，而notify只能唤醒一个。\n * wait() 应配合while循环使用，不应使用if，务必在wait()调用前后都检查条件，如果不满足，必须调用notify()唤醒另外的线程来处理，自己继续wait()直至条件满足再往下执行。\n * notify() 是对notifyall()的一个优化，但它有很精确的应用场景，并且要求正确使用。不然可能导致死锁。正确的场景应该是 waitset中等待的是相同的条件，唤醒任一个都能正确处理接下来的事 项，如果唤醒的线程无法正确处理，务必确保继续notify()下一个线程，并且自身需要重新回到 waitset中\n\n\n# 4、sleep()和wait() 有什么区别？\n\n * 对于sleep()方法，我们首先要知道该方法是属于thread类中的。而wait()方法，则是属于object类中的。\n * sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。在调用sleep()方法的过程中，线程不会释放对象锁。\n * 当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备，获取对象锁进入运行状态。\n\n\n# 5、volatile 是什么?可以保证有序性吗?\n\n一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：\n\n1） 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。\n\n2） 禁止进行指令重排序。 volatile 不是原子性操作 什么叫保证部分有序性?\n\n当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；\n\nx = 2; //语句1\ny = 0; //语句2\nflag = true; //语句3\nx = 4; //语句4\ny = -1; //语句5\n\n\n由于ﬂag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句 2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。\n\n使用volatile 一般用于 状态标记量 和 单例模式的双检锁。\n\n\n# 6、thread 类中的start() 和 run() 方法有什么区别？\n\nstart()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。\n\n\n# 7、为什么wait, notify 和 notifyall这些方法不在thread类里面？\n\n明显的原因是java提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在thread类中，线程正在等待的是哪个锁就不明显了。简单的说，由于wait，notify和notifyall都是锁级别的操作，所以把他们定义在object类中因为锁属于对象。\n\n\n# 8、为什么wait和notify方法要在同步块中调用？\n\n 1. 只有在调用线程拥有某个对象的独占锁时，才能够调用该对象的wait(),notify()和notifyall()方法。\n\n 2. 如果你不这么做，你的代码会抛出illegalmonitorstateexception异常。\n\n 3. 还有一个原因是为了避免wait和notify之间产生竞态条件。\n\nwait()方法强制当前线程释放对象锁。这意味着在调用某对象的wait()方法之前，当前线程必须已经获得该对象的锁。因此，线程必须在某个对象的同步方法或同步代码块中才能调用该对象的wait()方法。\n\n在调用对象的notify()和notifyall()方法之前，调用线程必须已经得到该对象的锁。因此，必须在某个对象的同步方法或同步代码块中才能调用该对象的notify()或notifyall()方法。\n\n调用wait()方法的原因通常是，调用线程希望某个特殊的状态(或变量)被设置之后再继续执行。调用 notify()或notifyall()方法的原因通常是，调用线程希望告诉其他等待中的线程:"特殊状态已经被设置"。这个状态作为线程间通信的通道，它必须是一个可变的共享状态(或变量)。\n\n\n# 9、java中interrupted 和 isinterruptedd方法的区别？\n\ninterrupted() 和 isinterrupted()的主要区别是前者会将中断状态清除而后者不会。java多线程的中断机制是用内部标识来实现的，调用thread.interrupt()来中断一个线程就会设置中断标识为true。当中断线程调用静态方法thread.interrupted()来检查中断状态时，中断状态会被清零。而非静态方法isinterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛出 interruptedexception异常的方法都会将中断状态清零。无论如何，一个线程的中断状态有有可能被其它线程调用中断来改变。\n\n\n# 10、java中synchronized 和 reentrantlock 有什么不同？\n\n相似点：\n\n这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等 待，而进行线程阻塞和唤醒的代价是比较高的.\n\n区别：\n\n这两种方式最大区别就是对于synchronized来说，它是java语言的关键字，是原生语法层面的互斥，需要jvm实现。而reentrantlock它是jdk 1.5之后提供的api层面的互斥锁，需要lock()和 unlock()方法配合try/ﬁnally语句块来完成。\n\nsynchronized进过编译，会在同步块的前后分别形成monitorenter和monitorexit这个两个字节码指令。在执行monitorenter指令时，首先要尝试获取对象锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象锁，把锁的计算器加1，相应的，在执行monitorexit指令时会将锁计算器就减1，当计算器为0时，锁就被释放了。如果获取对象锁失败，那当前线程就要阻塞，直到对象锁被另一个线程释放为止。\n\n由于reentrantlock是java.util.concurrent包下提供的一套互斥锁，相比synchronized，\n\nreentrantlock类提供了一些高级功能，主要有以下3项：\n\n 1. 等待可中断，持有锁的线程长期不释放的时候，正在等待的线程可以选择放弃等待，这相当于 synchronized来说可以避免出现死锁的情况。\n\n 2. 公平锁，多个线程等待同一个锁时，必须按照申请锁的时间顺序获得锁，synchronized锁非公平锁，reentrantlock默认的构造函数是创建的非公平锁，可以通过参数true设为公平锁，但公平锁表现的性能不是很好。\n\n 3. 锁绑定多个条件，一个reentrantlock对象可以同时绑定对个对象。\n\n\n# 11、有三个线程t1,t2,t3,如何保证顺序执行？\n\n在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(t3调用t2，t2调用t1)，这样t1就会先完成而t3最后完成。\n\n实际上先启动三个线程中哪一个都行， 因为在每个线程的run方法中用join方法限定了三个线程的执行顺序\n\npublic class jointest2 {\n\t// 1.现在有t1、t2、t3三个线程，你怎样保证t2在t1执行完后执行，t3在t2执行完后执行\n    public static void main(string[] args) {\n        final thread t1 = new thread(new runnable() {\n            @override\n            public void run() {\n                system.out.println("t1");\n             }\n        });\n        final thread t2 = new thread(new runnable() {\n            @override\n            public void run() {\n                try {\n                    // 引用t1线程，等待t1线程执行完\n                    t1.join();\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                system.out.println("t2");\n            }\n        });\n        thread t3 = new thread(new runnable() {\n            @override\n            public void run() {\n                    try {\n                    // 引用t2线程，等待t2线程执行完\n                    t2.join();\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                system.out.println("t3");\n                }\n         });\n          t3.start();//这里三个线程的启动顺序可以任意，大家可以试下！\n          t2.start();\n          t1.start();\n     }\n}\n\n\n\n# 12、synchronizedmap和concurrenthashmap有什么区别？\n\nsynchronizedmap()和hashtable一样，实现上在调用map所有方法时，都对整个map进行同步。而concurrenthashmap的实现却更加精细，它对map中的所有桶加了锁。所以，只要有一个线程访问map，其他线程就无法进入map，而如果一个线程在访问concurrenthashmap某个桶时，其他线程，仍然可以对map执行某些操作。\n\n所以，concurrenthashmap在性能以及安全性方面，明显比collections.synchronizedmap()更加有优势。同时，同步操作精确控制到桶，这样，即使在遍历map时，如果其他线程试图对map进行数据修改，也不会抛出concurrentmodiﬁcationexception。\n\n\n# 13、什么是线程安全\n\n线程安全就是说多线程访问同一段代码，不会产生不确定的结果。\n\n又是一个理论的问题，各式各样的答案有很多，我给出一个个人认为解释地最好的：如果你的代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么你的代码就是线程安全的。\n\n这个问题有值得一提的地方，就是线程安全也是有几个级别的：\n\n（1） 不可变\n\n像string、integer、long这些，都是ﬁnal类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用\n\n（2） 绝对线程安全\n\n不管运行时环境如何，调用者都不需要额外的同步措施。要做到这一点通常需要付出许多额外的代价，java中标注自己是线程安全的类，实际上绝大多数都不是线程安全的，不过绝对线程安全的 类，java中也有，比方说copyonwritearraylist、copyonwritearrayset\n\n（3） 相对线程安全\n\n相对线程安全也就是我们通常意义上所说的线程安全，像vector这种，add、remove方法都是原子操作，不会被打断，但也仅限于此，如果有个线程在遍历某个vector、有个线程同时在add这个 vector，99%的情况下都会出现concurrentmodiﬁcationexception，也就是fail-fast机制。\n\n（4） 线程非安全\n\n这个就没什么好说的了，arraylist、linkedlist、hashmap等都是线程非安全的类\n\n\n# 14、thread类中的yield方法有什么作用？\n\nyield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃cpu占用而不能保证使其它线程一定能占用cpu，执行yield()的线程有可能在进入到暂停状态后马上又被执行。\n\n\n# 15、java线程池中submit() 和 execute()方法有什么区别？\n\n两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在executor接口中,而submit()方法可以返回持有计算结果的future对象，它定义在executorservice接口中，它扩展了 executor接口，其它线程池类像threadpoolexecutor和scheduledthreadpoolexecutor都有这些方法。\n\n\n# 16、说一说自己对于 synchronized 关键字的了解\n\nsynchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。 另外，在 java 早期版本中， synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 mutex lock 来实现的，java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核\n\n态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因。庆幸的是在 java 6 之后 java 官方对从 jvm 层面对synchronized 较大优化，所以现在的 synchronized 锁效率也优化得很不错了。jdk1.6对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。',charsets:{cjk:!0}},{title:"002.多线程&并发篇002",frontmatter:{title:"002.多线程&并发篇002",categories:["Java","多线程","并发"],tags:["Java","多线程","并发"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-06T16:05:34.000Z",permalink:"/pages/35e1a9/"},regularPath:"/07.Java/03.%E5%A4%9A%E7%BA%BF%E7%A8%8B&%E5%B9%B6%E5%8F%91%E7%AF%87/002.%E5%A4%9A%E7%BA%BF%E7%A8%8B&%E5%B9%B6%E5%8F%91%E7%AF%87002.html",relativePath:"07.Java/03.多线程&并发篇/002.多线程&并发篇002.md",key:"v-115d94a0",path:"/pages/35e1a9/",headers:[{level:2,title:"17、说说自己是怎么使用 synchronized 关键字？",slug:"_17、说说自己是怎么使用-synchronized-关键字",normalizedTitle:"17、说说自己是怎么使用 synchronized 关键字？",charIndex:21},{level:2,title:"18、什么是线程安全？Vector是一个线程安全类吗？",slug:"_18、什么是线程安全-vector是一个线程安全类吗",normalizedTitle:"18、什么是线程安全？vector是一个线程安全类吗？",charIndex:552},{level:2,title:"19、 volatile关键字的作用？",slug:"_19、-volatile关键字的作用",normalizedTitle:"19、 volatile关键字的作用？",charIndex:793},{level:2,title:"20、常用的线程池有哪些？",slug:"_20、常用的线程池有哪些",normalizedTitle:"20、常用的线程池有哪些？",charIndex:1247},{level:2,title:"21、简述一下你对线程池的理解",slug:"_21、简述一下你对线程池的理解",normalizedTitle:"21、简述一下你对线程池的理解",charIndex:1606},{level:2,title:"22、Java程序是如何执行的",slug:"_22、java程序是如何执行的",normalizedTitle:"22、java程序是如何执行的",charIndex:1849},{level:2,title:"23、锁的优化机制了解吗？",slug:"_23、锁的优化机制了解吗",normalizedTitle:"23、锁的优化机制了解吗？",charIndex:2508},{level:2,title:"24、说说进程和线程的区别？",slug:"_24、说说进程和线程的区别",normalizedTitle:"24、说说进程和线程的区别？",charIndex:3458},{level:2,title:"25，产生死锁的四个必要条件？",slug:"_25-产生死锁的四个必要条件",normalizedTitle:"25，产生死锁的四个必要条件？",charIndex:3708},{level:2,title:"26、如何避免死锁？",slug:"_26、如何避免死锁",normalizedTitle:"26、如何避免死锁？",charIndex:3865},{level:2,title:"27，线程池核心线程数怎么设置呢？",slug:"_27-线程池核心线程数怎么设置呢",normalizedTitle:"27，线程池核心线程数怎么设置呢？",charIndex:3999},{level:4,title:"CPU",slug:"cpu",normalizedTitle:"cpu",charIndex:3630},{level:4,title:"IO密集型",slug:"io密集型",normalizedTitle:"io密集型",charIndex:4027},{level:2,title:"28，Java线程池中队列常用类型有哪些？",slug:"_28-java线程池中队列常用类型有哪些",normalizedTitle:"28，java线程池中队列常用类型有哪些？",charIndex:4340},{level:2,title:"29，线程安全需要保证几个基本特征？",slug:"_29-线程安全需要保证几个基本特征",normalizedTitle:"29，线程安全需要保证几个基本特征？",charIndex:4797},{level:2,title:"30，说一下线程之间是如何通信的？",slug:"_30-说一下线程之间是如何通信的",normalizedTitle:"30，说一下线程之间是如何通信的？",charIndex:4970},{level:4,title:"共享内存",slug:"共享内存",normalizedTitle:"共享内存",charIndex:5002},{level:4,title:"消息传递",slug:"消息传递",normalizedTitle:"消息传递",charIndex:5007}],headersStr:"17、说说自己是怎么使用 synchronized 关键字？ 18、什么是线程安全？Vector是一个线程安全类吗？ 19、 volatile关键字的作用？ 20、常用的线程池有哪些？ 21、简述一下你对线程池的理解 22、Java程序是如何执行的 23、锁的优化机制了解吗？ 24、说说进程和线程的区别？ 25，产生死锁的四个必要条件？ 26、如何避免死锁？ 27，线程池核心线程数怎么设置呢？ CPU IO密集型 28，Java线程池中队列常用类型有哪些？ 29，线程安全需要保证几个基本特征？ 30，说一下线程之间是如何通信的？ 共享内存 消息传递",content:"# 002.多线程&并发篇002\n\n\n# 17、说说自己是怎么使用 synchronized 关键字？\n\n修饰实例方法: 作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁 修饰静态方法:也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态 synchronized 方法，而线程B需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，因为访问静态 synchr****onized 方法占用的锁是当前类的锁，而访问非静态 synchr****onized 方法占用的锁是当前实例对象锁。 修饰代码块: 指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。 总结： synchronized 关键字加到 static 静态方法和 synchronized(class)代码块上都是是给 Class 类上锁。synchronized关键字加到实例方法上是给对象实例上锁。尽量不要使用 synchronized(String a) 因为JVM中，字符串常量池具有缓存功能！\n\n\n# 18、什么是线程安全？Vector是一个线程安全类吗？\n\n如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量 的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失\n\n误。很显然你可以将集合类分 成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。\n\n\n# 19、 volatile关键字的作用？\n\n一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：\n\n * 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。\n * 禁止进行指令重排序。\n * volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。 volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。\n * volatile仅能实现变量的修改可见性，并不能保证原子性；synchronized则可以保证变量的修改可见性和原子性。\n * volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。\n\nvolatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。\n\n\n# 20、常用的线程池有哪些？\n\n * newSingleThreadExecutor：创建一个单线程的线程池，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n * newFixedThreadPool：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。\n * newCachedThreadPool：创建一个可缓存的线程池，此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n * newScheduledThreadPool：创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。\n * newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。\n\n\n# 21、简述一下你对线程池的理解\n\n（如果问到了这样的问题，可以展开的说一下线程池如何用、线程池的好处、线程池的启动策略）合理利用线程池能够带来三个好处。\n\n 1. 第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\n 2. 第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\n 3. 第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\n\n\n# 22、Java程序是如何执行的\n\n我们日常的工作中都使用开发工具（IntelliJ IDEA 或 Eclipse 等）可以很方便的调试程序，或者是通过打包工具把项目打包成 jar 包或者 war 包，放入 Tomcat 等 Web 容器中就可以正常运行了，但你有没有想过 Java 程序内部是如何执行的？其实不论是在开发工具中运行还是在 Tomcat 中运行， Java 程序的执行流程基本都是相同的，它的执行流程如下：\n\n * 先把 Java 代码编译成字节码，也就是把 .java 类型的文件编译成 .class 类型的文件。这个过程的大致执行流程：Java 源代码 -> 词法分析器 -> 语法分析器 -> 语义分析器 -> 字符码生成器 ->最终生成字节码，其中任何一个节点执行失败就会造成编译失败；\n * 把 class 文件放置到 Java 虚拟机，这个虚拟机通常指的是 Oracle 官方自带的 Hotspot JVM；\n * Java 虚拟机使用类加载器（Class Loader）装载 class 文件；\n * 类加载完成之后，会进行字节码效验，字节码效验通过之后 JVM 解释器会把字节码翻译成机器码交由操作系统执行。但不是所有代码都是解释执行的，JVM 对此做了优化，比如，以 Hotspot 虚拟机来说，它本身提供了 JIT（Just In Time）也就是我们通常所说的动态编译器，它能够在运行时将热点代码编译为机器码，这个时候字节码就变成了编译执行。Java 程序执行流程图如下：\n\n\n# 23、锁的优化机制了解吗？\n\n从JDK1.6版本之后，synchronized本身也在不断优化锁的机制，有些情况下他并不会是一个很重量级的锁了。优化机制包括自适应锁、自旋锁、锁消除、锁粗化、轻量级锁和偏向锁。\n\n锁的状态从低到高依次为**无锁****->偏向锁->轻量级锁->**重量级锁，升级的过程就是从低到高，降级在一定条件也是有可能发生的。\n\n自旋锁：由于大部分时候，锁被占用的时间很短，共享变量的锁定时间也很短，所有没有必要挂起线程，用户态和内核态的来回上下文切换严重影响性能。自旋的概念就是让线程执行一个忙循环，可以理解为就是啥也不干，防止从用户态转入内核态，自旋锁可以通过设置-XX:+UseSpining来开启，自旋的默认次数是10次，可以使用-XX:PreBlockSpin设置。\n\n自适应锁：自适应锁就是自适应的自旋锁，自旋的时间不是固定时间，而是由前一次在同一个锁上的自旋时间和锁的持有者状态来决定。\n\n锁消除：锁消除指的是JVM检测到一些同步的代码块，完全不存在数据竞争的场景，也就是不需要加锁，就会进行锁消除。\n\n锁粗化：锁粗化指的是有很多操作都是对同一个对象进行加锁，就会把锁的同步范围扩展到整个操作序列之外。\n\n偏向锁：当线程访问同步块获取锁时，会在对象头和栈帧中的锁记录里存储偏向锁的线程ID，之后这个线程再次进入同步块时都不需要CAS来加锁和解锁了，偏向锁会永远偏向第一个获得锁的线 程，如果后续没有其他线程获得过这个锁，持有锁的线程就永远不需要进行同步，反之，当有其他线程竞争偏向锁时，持有偏向锁的线程就会释放偏向锁。可以用过设置-XX:+UseBiasedLocking开启偏向锁。\n\n轻量级锁：JVM的对象的对象头中包含有一些锁的标志位，代码进入同步块的时候，JVM将会使用 CAS方式来尝试获取锁，如果更新成功则会把对象头中的状态位标记为轻量级锁，如果更新失败，当前线程就尝试自旋来获得锁。\n\n整个锁升级的过程非常复杂，我尽力去除一些无用的环节，简单来描述整个升级的机制。\n\n简单点说，偏向锁就是通过对象头的偏向线程ID来对比，甚至都不需要CAS了，而轻量级锁主要就是通过CAS修改对象头锁记录和自旋来实现，重量级锁则是除了拥有锁的线程其他全部阻塞。\n\n\n# 24、说说进程和线程的区别？\n\n 1. 进程是一个“执行中的程序”，是系统进行资源分配和调度的一个独立单位。\n\n 2. 线程是进程的一个实体，一个进程中拥有多个线程，线程之间共享地址空间和其它资源（所以通信和同步等操作线程比进程更加容易）\n\n 3. 线程上下文的切换比进程上下文切换要快很多。\n    \n    * 进程切换时，涉及到当前进程的CPU环境的保存和新被调度运行进程的CPU环境的设置。\n    \n    * 线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。\n\n\n# 25，产生死锁的四个必要条件？\n\n 1. 互斥条件：一个资源每次只能被一个线程使用\n\n 2. 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放\n\n 3. 不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺\n\n 4. 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系\n\n\n# 26、如何避免死锁？\n\n指定获取锁的顺序，举例如下：\n\n 1. 比如某个线程只有获得A锁和B锁才能对某资源进行操作，在多线程条件下，如何避免死锁？\n\n 2. 获得锁的顺序是一定的，比如规定，只有获得A锁的线程才有资格获取B锁，按顺序获取锁就可以避免死锁！！！\n\n\n# 27，线程池核心线程数怎么设置呢？\n\n分为CPU密集型和IO密集型\n\n# CPU\n\n这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。\n\n# IO密集型\n\n这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 ： 核心线程数=CPU核心数量*2。\n\n\n# 28，Java线程池中队列常用类型有哪些？\n\n 1. ArrayBlockingQueue 是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。\n\n 2. LinkedBlockingQueue 一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue 。\n\n 3. SynchronousQueue 一个不存储元素的阻塞队列。\n\n 4. PriorityBlockingQueue 一个具有优先级的无限阻塞队列。PriorityBlockingQueue 也是基于最小二叉堆实现\n\n 5. DelayQueue\n    \n    * 只有当其指定的延迟时间到了，才能够从队列中获取到该元素。\n    \n    * DelayQueue 是一个没有大小限制的队列，\n    \n    * 因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费\n    \n    * 者）才会被阻塞。\n\n\n# 29，线程安全需要保证几个基本特征？\n\n 1. 原子性，简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现。\n 2. 可见性，是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上，volatile 就是负责保证可见性的。\n 3. 有序性，是保证线程内串行语义，避免指令重排等。\n\n\n# 30，说一下线程之间是如何通信的？\n\n线程之间的通信有两种方式：共享内存和消息传递。\n\n# 共享内存\n\n在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来 隐式进行通信。典型的共享内存通信方式，就是通过共享对象进行通信。 例如线程 A 与 线程 B 之间如果要通信的话，那么就必须经历下面两个步骤：\n\n 1. 线程 A 把本地内存 A 更新过得共享变量刷新到主内存中去。\n 2. 线程 B 到主内存中去读取线程 A 之前更新过的共享变量。\n\n# 消息传递\n\n在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行 通信。在 Java 中典型的消息传递方式，就是 wait() 和 notify() ，或者BlockingQueue 。",normalizedContent:"# 002.多线程&并发篇002\n\n\n# 17、说说自己是怎么使用 synchronized 关键字？\n\n修饰实例方法: 作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁 修饰静态方法:也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程a调用一个实例对象的非静态 synchronized 方法，而线程b需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，因为访问静态 synchr****onized 方法占用的锁是当前类的锁，而访问非静态 synchr****onized 方法占用的锁是当前实例对象锁。 修饰代码块: 指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。 总结： synchronized 关键字加到 static 静态方法和 synchronized(class)代码块上都是是给 class 类上锁。synchronized关键字加到实例方法上是给对象实例上锁。尽量不要使用 synchronized(string a) 因为jvm中，字符串常量池具有缓存功能！\n\n\n# 18、什么是线程安全？vector是一个线程安全类吗？\n\n如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量 的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失\n\n误。很显然你可以将集合类分 成两组，线程安全和非线程安全的。vector 是用同步方法来实现线程安全的, 而和它相似的arraylist不是线程安全的。\n\n\n# 19、 volatile关键字的作用？\n\n一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：\n\n * 保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。\n * 禁止进行指令重排序。\n * volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。 volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。\n * volatile仅能实现变量的修改可见性，并不能保证原子性；synchronized则可以保证变量的修改可见性和原子性。\n * volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。\n\nvolatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。\n\n\n# 20、常用的线程池有哪些？\n\n * newsinglethreadexecutor：创建一个单线程的线程池，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n * newfixedthreadpool：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。\n * newcachedthreadpool：创建一个可缓存的线程池，此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说jvm）能够创建的最大线程大小。\n * newscheduledthreadpool：创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。\n * newsinglethreadexecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。\n\n\n# 21、简述一下你对线程池的理解\n\n（如果问到了这样的问题，可以展开的说一下线程池如何用、线程池的好处、线程池的启动策略）合理利用线程池能够带来三个好处。\n\n 1. 第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。\n 2. 第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。\n 3. 第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\n\n\n# 22、java程序是如何执行的\n\n我们日常的工作中都使用开发工具（intellij idea 或 eclipse 等）可以很方便的调试程序，或者是通过打包工具把项目打包成 jar 包或者 war 包，放入 tomcat 等 web 容器中就可以正常运行了，但你有没有想过 java 程序内部是如何执行的？其实不论是在开发工具中运行还是在 tomcat 中运行， java 程序的执行流程基本都是相同的，它的执行流程如下：\n\n * 先把 java 代码编译成字节码，也就是把 .java 类型的文件编译成 .class 类型的文件。这个过程的大致执行流程：java 源代码 -> 词法分析器 -> 语法分析器 -> 语义分析器 -> 字符码生成器 ->最终生成字节码，其中任何一个节点执行失败就会造成编译失败；\n * 把 class 文件放置到 java 虚拟机，这个虚拟机通常指的是 oracle 官方自带的 hotspot jvm；\n * java 虚拟机使用类加载器（class loader）装载 class 文件；\n * 类加载完成之后，会进行字节码效验，字节码效验通过之后 jvm 解释器会把字节码翻译成机器码交由操作系统执行。但不是所有代码都是解释执行的，jvm 对此做了优化，比如，以 hotspot 虚拟机来说，它本身提供了 jit（just in time）也就是我们通常所说的动态编译器，它能够在运行时将热点代码编译为机器码，这个时候字节码就变成了编译执行。java 程序执行流程图如下：\n\n\n# 23、锁的优化机制了解吗？\n\n从jdk1.6版本之后，synchronized本身也在不断优化锁的机制，有些情况下他并不会是一个很重量级的锁了。优化机制包括自适应锁、自旋锁、锁消除、锁粗化、轻量级锁和偏向锁。\n\n锁的状态从低到高依次为**无锁****->偏向锁->轻量级锁->**重量级锁，升级的过程就是从低到高，降级在一定条件也是有可能发生的。\n\n自旋锁：由于大部分时候，锁被占用的时间很短，共享变量的锁定时间也很短，所有没有必要挂起线程，用户态和内核态的来回上下文切换严重影响性能。自旋的概念就是让线程执行一个忙循环，可以理解为就是啥也不干，防止从用户态转入内核态，自旋锁可以通过设置-xx:+usespining来开启，自旋的默认次数是10次，可以使用-xx:preblockspin设置。\n\n自适应锁：自适应锁就是自适应的自旋锁，自旋的时间不是固定时间，而是由前一次在同一个锁上的自旋时间和锁的持有者状态来决定。\n\n锁消除：锁消除指的是jvm检测到一些同步的代码块，完全不存在数据竞争的场景，也就是不需要加锁，就会进行锁消除。\n\n锁粗化：锁粗化指的是有很多操作都是对同一个对象进行加锁，就会把锁的同步范围扩展到整个操作序列之外。\n\n偏向锁：当线程访问同步块获取锁时，会在对象头和栈帧中的锁记录里存储偏向锁的线程id，之后这个线程再次进入同步块时都不需要cas来加锁和解锁了，偏向锁会永远偏向第一个获得锁的线 程，如果后续没有其他线程获得过这个锁，持有锁的线程就永远不需要进行同步，反之，当有其他线程竞争偏向锁时，持有偏向锁的线程就会释放偏向锁。可以用过设置-xx:+usebiasedlocking开启偏向锁。\n\n轻量级锁：jvm的对象的对象头中包含有一些锁的标志位，代码进入同步块的时候，jvm将会使用 cas方式来尝试获取锁，如果更新成功则会把对象头中的状态位标记为轻量级锁，如果更新失败，当前线程就尝试自旋来获得锁。\n\n整个锁升级的过程非常复杂，我尽力去除一些无用的环节，简单来描述整个升级的机制。\n\n简单点说，偏向锁就是通过对象头的偏向线程id来对比，甚至都不需要cas了，而轻量级锁主要就是通过cas修改对象头锁记录和自旋来实现，重量级锁则是除了拥有锁的线程其他全部阻塞。\n\n\n# 24、说说进程和线程的区别？\n\n 1. 进程是一个“执行中的程序”，是系统进行资源分配和调度的一个独立单位。\n\n 2. 线程是进程的一个实体，一个进程中拥有多个线程，线程之间共享地址空间和其它资源（所以通信和同步等操作线程比进程更加容易）\n\n 3. 线程上下文的切换比进程上下文切换要快很多。\n    \n    * 进程切换时，涉及到当前进程的cpu环境的保存和新被调度运行进程的cpu环境的设置。\n    \n    * 线程切换仅需要保存和设置少量的寄存器内容，不涉及存储管理方面的操作。\n\n\n# 25，产生死锁的四个必要条件？\n\n 1. 互斥条件：一个资源每次只能被一个线程使用\n\n 2. 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放\n\n 3. 不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺\n\n 4. 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系\n\n\n# 26、如何避免死锁？\n\n指定获取锁的顺序，举例如下：\n\n 1. 比如某个线程只有获得a锁和b锁才能对某资源进行操作，在多线程条件下，如何避免死锁？\n\n 2. 获得锁的顺序是一定的，比如规定，只有获得a锁的线程才有资格获取b锁，按顺序获取锁就可以避免死锁！！！\n\n\n# 27，线程池核心线程数怎么设置呢？\n\n分为cpu密集型和io密集型\n\n# cpu\n\n这种任务消耗的主要是 cpu 资源，可以将线程数设置为 n（cpu 核心数）+1，比 cpu 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，cpu 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 cpu 的空闲时间。\n\n# io密集型\n\n这种任务应用起来，系统会用大部分的时间来处理 i/o 交互，而线程在处理 i/o 的时间段内不会占用 cpu 来处理，这时就可以将 cpu 交出给其它线程使用。因此在 i/o 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 ： 核心线程数=cpu核心数量*2。\n\n\n# 28，java线程池中队列常用类型有哪些？\n\n 1. arrayblockingqueue 是一个基于数组结构的有界阻塞队列，此队列按 fifo（先进先出）原则对元素进行排序。\n\n 2. linkedblockingqueue 一个基于链表结构的阻塞队列，此队列按fifo （先进先出） 排序元素，吞吐量通常要高于arrayblockingqueue 。\n\n 3. synchronousqueue 一个不存储元素的阻塞队列。\n\n 4. priorityblockingqueue 一个具有优先级的无限阻塞队列。priorityblockingqueue 也是基于最小二叉堆实现\n\n 5. delayqueue\n    \n    * 只有当其指定的延迟时间到了，才能够从队列中获取到该元素。\n    \n    * delayqueue 是一个没有大小限制的队列，\n    \n    * 因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费\n    \n    * 者）才会被阻塞。\n\n\n# 29，线程安全需要保证几个基本特征？\n\n 1. 原子性，简单说就是相关操作不会中途被其他线程干扰，一般通过同步机制实现。\n 2. 可见性，是一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，通常被解释为将线程本地状态反映到主内存上，volatile 就是负责保证可见性的。\n 3. 有序性，是保证线程内串行语义，避免指令重排等。\n\n\n# 30，说一下线程之间是如何通信的？\n\n线程之间的通信有两种方式：共享内存和消息传递。\n\n# 共享内存\n\n在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来 隐式进行通信。典型的共享内存通信方式，就是通过共享对象进行通信。 例如线程 a 与 线程 b 之间如果要通信的话，那么就必须经历下面两个步骤：\n\n 1. 线程 a 把本地内存 a 更新过得共享变量刷新到主内存中去。\n 2. 线程 b 到主内存中去读取线程 a 之前更新过的共享变量。\n\n# 消息传递\n\n在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行 通信。在 java 中典型的消息传递方式，就是 wait() 和 notify() ，或者blockingqueue 。",charsets:{cjk:!0}},{title:"003.多线程&并发篇003",frontmatter:{title:"003.多线程&并发篇003",categories:["Java","多线程","并发"],tags:["Java","多线程","并发"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-06T16:25:58.000Z",permalink:"/pages/9a2810/"},regularPath:"/07.Java/03.%E5%A4%9A%E7%BA%BF%E7%A8%8B&%E5%B9%B6%E5%8F%91%E7%AF%87/003.%E5%A4%9A%E7%BA%BF%E7%A8%8B&%E5%B9%B6%E5%8F%91%E7%AF%87003.html",relativePath:"07.Java/03.多线程&并发篇/003.多线程&并发篇003.md",key:"v-75f9f3b0",path:"/pages/9a2810/",headers:[{level:2,title:"31、CAS的原理呢？",slug:"_31、cas的原理呢",normalizedTitle:"31、cas的原理呢？",charIndex:21},{level:2,title:"32、CAS有什么缺点吗？",slug:"_32、cas有什么缺点吗",normalizedTitle:"32、cas有什么缺点吗？",charIndex:187},{level:2,title:"33、引用类型有哪些？有什么区别？",slug:"_33、引用类型有哪些-有什么区别",normalizedTitle:"33、引用类型有哪些？有什么区别？",charIndex:565},{level:2,title:"34、说说ThreadLocal原理？",slug:"_34、说说threadlocal原理",normalizedTitle:"34、说说threadlocal原理？",charIndex:920},{level:2,title:"35、线程池原理知道吗？以及核心参数",slug:"_35、线程池原理知道吗-以及核心参数",normalizedTitle:"35、线程池原理知道吗？以及核心参数",charIndex:1408},{level:4,title:"核心参数",slug:"核心参数",normalizedTitle:"核心参数",charIndex:1422},{level:4,title:"执行流程",slug:"执行流程",normalizedTitle:"执行流程",charIndex:1563},{level:2,title:"36、 线程池的拒绝策略有哪些？",slug:"_36、-线程池的拒绝策略有哪些",normalizedTitle:"36、 线程池的拒绝策略有哪些？",charIndex:1853},{level:2,title:"37、说说你对JMM内存模型的理解？为什么需要JMM？",slug:"_37、说说你对jmm内存模型的理解-为什么需要jmm",normalizedTitle:"37、说说你对jmm内存模型的理解？为什么需要jmm？",charIndex:2039},{level:4,title:"happen-before规则",slug:"happen-before规则",normalizedTitle:"happen-before规则",charIndex:2605},{level:4,title:"说了半天，到底工作内存和主内存是什么？",slug:"说了半天-到底工作内存和主内存是什么",normalizedTitle:"说了半天，到底工作内存和主内存是什么？",charIndex:2905},{level:2,title:"38、多线程有什么用？",slug:"_38、多线程有什么用",normalizedTitle:"38、多线程有什么用？",charIndex:3014},{level:4,title:"发挥多核CPU的优势",slug:"发挥多核cpu的优势",normalizedTitle:"发挥多核cpu的优势",charIndex:3172},{level:4,title:"防止阻塞",slug:"防止阻塞",normalizedTitle:"防止阻塞",charIndex:3420},{level:4,title:"便于建模",slug:"便于建模",normalizedTitle:"便于建模",charIndex:3662},{level:2,title:"39、说说CyclicBarrier和CountDownLatch的区别？",slug:"_39、说说cyclicbarrier和countdownlatch的区别",normalizedTitle:"39、说说cyclicbarrier和countdownlatch的区别？",charIndex:3796},{level:2,title:"40、什么是AQS？",slug:"_40、什么是aqs",normalizedTitle:"40、什么是aqs？",charIndex:4136},{level:2,title:"41、了解Semaphore吗？",slug:"_41、了解semaphore吗",normalizedTitle:"41、了解semaphore吗？",charIndex:4525},{level:2,title:"42、什么是Callable和Future?",slug:"_42、什么是callable和future",normalizedTitle:"42、什么是callable和future?",charIndex:4726},{level:4,title:"Callable",slug:"callable",normalizedTitle:"callable",charIndex:4732},{level:4,title:"Future",slug:"future",normalizedTitle:"future",charIndex:4741},{level:2,title:"43、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？",slug:"_43、什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型",normalizedTitle:"43、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？",charIndex:5001},{level:2,title:"44、什么是多线程中的上下文切换？",slug:"_44、什么是多线程中的上下文切换",normalizedTitle:"44、什么是多线程中的上下文切换？",charIndex:5968},{level:2,title:"45、什么是Daemon线程？它有什么意义？",slug:"_45、什么是daemon线程-它有什么意义",normalizedTitle:"45、什么是daemon线程？它有什么意义？",charIndex:6256},{level:2,title:"46、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？",slug:"_46、乐观锁和悲观锁的理解及如何实现-有哪些实现方式",normalizedTitle:"46、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？",charIndex:6543},{level:4,title:"乐观锁的实现方式：",slug:"乐观锁的实现方式",normalizedTitle:"乐观锁的实现方式：",charIndex:6951},{level:4,title:"CAS缺点：",slug:"cas缺点",normalizedTitle:"cas缺点：",charIndex:7242}],headersStr:"31、CAS的原理呢？ 32、CAS有什么缺点吗？ 33、引用类型有哪些？有什么区别？ 34、说说ThreadLocal原理？ 35、线程池原理知道吗？以及核心参数 核心参数 执行流程 36、 线程池的拒绝策略有哪些？ 37、说说你对JMM内存模型的理解？为什么需要JMM？ happen-before规则 说了半天，到底工作内存和主内存是什么？ 38、多线程有什么用？ 发挥多核CPU的优势 防止阻塞 便于建模 39、说说CyclicBarrier和CountDownLatch的区别？ 40、什么是AQS？ 41、了解Semaphore吗？ 42、什么是Callable和Future? Callable Future 43、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？ 44、什么是多线程中的上下文切换？ 45、什么是Daemon线程？它有什么意义？ 46、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？ 乐观锁的实现方式： CAS缺点：",content:'# 003.多线程&并发篇003\n\n\n# 31、CAS的原理呢？\n\nCAS叫做CompareAndSwap，比较并交换，主要是通过处理器的指令来保证操作的原子性，它包含三个操作数：\n\n 1. 变量内存地址，V表示\n\n 2. 旧的预期值，A表示\n\n 3. 准备设置的新值，B表示\n\n当执行CAS指令时，只有当V等于A时，才会用B去更新V的值，否则就不会执行更新操作。\n\n\n# 32、CAS有什么缺点吗？\n\nCAS的缺点主要有3点：\n\nABA问题：ABA的问题指的是在CAS更新的过程中，当读取到的值是A，然后准备赋值的时候仍然是 A，但是实际上有可能A的值被改成了B，然后又被改回了A，这个CAS更新的漏洞就叫做ABA。只是 ABA的问题大部分场景下都不影响并发的最终效果。\n\nJava中有AtomicStampedReference来解决这个问题，他加入了预期标志和更新后标志两个字段，更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。\n\n循环时间长开销大：自旋CAS的方式如果长时间不成功，会给CPU带来很大的开销。\n\n只能保证一个共享变量的原子操作：只对一个共享变量操作可以保证原子性，但是多个则不行，多个可以通过AtomicReference来处理或者使用锁synchronized实现。\n\n\n# 33、引用类型有哪些？有什么区别？\n\n引用类型主要分为强软弱虚四种：\n\n 1. 强引用指的就是代码中普遍存在的赋值方式，比如A a = new A()这种。强引用关联的对象，永远不会被GC回收。\n\n 2. 软引用可以用SoftReference来描述，指的是那些有用但是不是必须要的对象。系统在发生内存溢出前会对这类引用的对象进行回收。\n\n 3. 弱引用可以用WeakReference来描述，他的强度比软引用更低一点，弱引用的对象下一次GC的时候一定会被回收，而不管内存是否足够。\n\n 4. 虚引用也被称作幻影引用，是最弱的引用关系，可以用PhantomReference来描述，他必须和 ReferenceQueue一起使用，同样的当发生GC的时候，虚引用也会被回收。可以用虚引用来管理堆外内存。\n\n\n# 34、说说ThreadLocal原理？\n\nhreadLocal可以理解为线程本地变量，他会在每个线程都创建一个副本，那么在线程之间访问内部副本变量就行了，做到了线程之间互相隔离，相比于synchronized的做法是用空间来换时间。\n\nThreadLocal有一个静态内部类ThreadLocalMap，ThreadLocalMap又包含了一个Entry数组， Entry本身是一个弱引用，他的key是指向ThreadLocal的弱引用，Entry具备了保存key value键值对的能力。\n\n弱引用的目的是为了防止内存泄露，如果是强引用那么ThreadLocal对象除非线程结束否则始终无法被回收，弱引用则会在下一次GC的时候被回收。\n\n但是这样还是会存在内存泄露的问题，假如key和ThreadLocal对象被回收之后，entry中就存在key为null，但是value有值的entry对象，但是永远没办法被访问到，同样除非线程结束运行。\n\n但是只要ThreadLocal使用恰当，在使用完之后调用remove方法删除Entry对象，实际上是不会出现这个问题的。\n\n\n# 35、线程池原理知道吗？以及核心参数\n\n# 核心参数\n\n 1. 最大线程数maximumPoolSize\n\n 2. 核心线程数corePoolSize\n\n 3. 活跃时间keepAliveTime\n\n 4. 阻塞队列workQueue\n\n 5. 拒绝策略RejectedExecutionHandler\n\n# 执行流程\n\n 1. 当我们提交任务，线程池会根据corePoolSize大小创建若干任务数量线程执行任务\n\n 2. 当任务的数量超过corePoolSize数量，后续的任务将会进入阻塞队列阻塞排队\n\n 3. 当阻塞队列也满了之后，那么将会继续创建(maximumPoolSize-corePoolSize)个数量的线程来执行任务，如果任务处理完成，maximumPoolSize-corePoolSize额外创建的线程等待 keepAliveTime之后被自动销毁\n\n 4. 如果达到maximumPoolSize，阻塞队列还是满的状态，那么将根据不同的拒绝策略对应处理\n\n\n# 36、 线程池的拒绝策略有哪些？\n\n主要有4种拒绝策略：\n\n 1. AbortPolicy：直接丢弃任务，抛出异常，这是默认策略\n\n 2. CallerRunsPolicy：只用调用者所在的线程来处理任务\n\n 3. DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务\n\n 4. DiscardPolicy：直接丢弃任务，也不抛出异常\n\n\n# 37、说说你对JMM内存模型的理解？为什么需要JMM？\n\n随着CPU和内存的发展速度差异的问题，导致CPU的速度远快于内存，所以现在的CPU加入了高速缓存，高速缓存一般可以分为L1、L2、L3三级缓存。基于上面的例子我们知道了这导致了缓存一致性的问题，所以加入了缓存一致性协议，同时导致了内存可见性的问题，而编译器和CPU的重排序导致了原子性和有序性的问题，JMM内存模型正是对多线程操作下的一系列规范约束，因为不可能让陈雇员的代码去兼容所有的CPU，通过JMM我们才屏蔽了不同硬件和操作系统内存的访问差异，这样保证了Java程序在不同的平台下达到一致的内存访问效果，同时也是保证在高效并发的时候程序能够正确执行。\n\n原子性：Java内存模型通过read、load、assign、use、store、write来保证原子性操作，此外还有\n\nlock和unlock，直接对应着synchronized关键字的monitorenter和monitorexit字节码指令。\n\n可见性：可见性的问题在上面的回答已经说过，Java保证可见性可以认为通过volatile、\n\nsynchronized、ﬁnal来实现。\n\n有序性：由于处理器和编译器的重排序导致的有序性问题，Java通过volatile、synchronized来保证。\n\n# happen-before规则\n\n虽然指令重排提高了并发的性能，但是Java虚拟机会对指令重排做出一些规则限制，并不能让所有的指令都随意的改变执行位置，主要有以下几点：\n\n 1. 单线程每个操作，happen-before于该线程中任意后续操作\n\n 2. volatile写happen-before与后续对这个变量的读\n\n 3. synchronized解锁happen-before后续对这个锁的加锁\n\n 4. ﬁnal变量的写happen-before于ﬁnal域对象的读，happen-before后续对ﬁnal变量的读\n\n 5. 传递性规则，A先于B，B先于C，那么A一定先于C发生\n\n# 说了半天，到底工作内存和主内存是什么？\n\n主内存可以认为就是物理内存，Java内存模型中实际就是虚拟机内存的一部分。而工作内存就是\n\nCPU缓存，他有可能是寄存器也有可能是L1\\L2\\L3缓存，都是有可能的。\n\n\n# 38、多线程有什么用？\n\n一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓"知其然知其所以然"，"会用"只是"知其然"，"为什么用"才是"知其所以然"，只有达到"知其然知其所以然"的程度才可以说是把一个知识点运用自如。OK，下面说说我对这个问题的看法：\n\n# 发挥多核CPU的优势\n\n随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至 16核的也都不少见，如果是单线程的程序，那么在双核CPU上就浪费了50%，在4核CPU上就浪费了75%。单核 CPU 上所谓的多线程那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程同时运行罢了。多核CPU上的多线程才是真正的多线 程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核CPU的优势来，达到充分利用 CPU的目的。\n\n# 防止阻塞\n\n从程序运行效率的角度来看，单核CPU不但不会发挥出多线程的优势，反而会因为在单核CPU上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核CPU我们还是要应用多线程，就是为了防止阻塞。试想，如果单核CPU使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。\n\n# 便于建模\n\n这是另外一个没有这么明显的优点了。假设有一个大的任务A，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务A分解成几个小任务，任务B、任务C、任务 D，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。\n\n\n# 39、说说CyclicBarrier和CountDownLatch的区别？\n\n两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：\n\n（1） CyclicBarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；CountDownLatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行\n\n（2） CyclicBarrier只能唤起一个任务，CountDownLatch可以唤起多个任务\n\n（3） CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了\n\n\n# 40、什么是AQS？\n\n简单说一下AQS，AQS全称为AbstractQueuedSychronizer，翻译过来应该是抽象队列同步器。如果说java.util.concurrent的基础是CAS的话，那么AQS就是整个Java并发包的核心了，\n\nReentrantLock、CountDownLatch、Semaphore等等都用到了它。AQS实际上以双向队列的形式连接所有的Entry，比方说ReentrantLock，所有等待的线程都被放在一个Entry中并连成双向队\n\n列，前面一个线程使用ReentrantLock好了，则双向队列实际上的第一个Entry开始运行。\n\nAQS定义了对双向队列所有的操作，而只开放了tryLock和tryRelease方法给开发者使用，开发者可以根据自己的实现重写tryLock和tryRelease方法，以实现自己的并发功能。\n\n\n# 41、了解Semaphore吗？\n\nemaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。\n\n\n# 42、什么是Callable和Future?\n\n# Callable\n\nCallable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被 Future拿到，也就是说，Future可以拿到异步执行任务的返回值。可以认为是带有回调的 Runnable。\n\n# Future\n\nFuture接口表示异步任务，是还没有完成的任务给出的未来结果。所以说Callable用于产生结果， Future用于获取结果。\n\n\n# 43、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？\n\n阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。\n\n这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。\n\n阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。\n\nJDK7提供了7个阻塞队列。分别是：\n\n * ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。\n * LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。\n * PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列。\n * DelayQueue：一个使用优先级队列实现的无界阻塞队列。\n * SynchronousQueue：一个不存储元素的阻塞队列。\n * LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。\n * LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。\n\nJava 5之前实现同步存取时，可以使用普通的一个集合，然后在使用线程的协作和线程同步可以实现生产者，消费者模式，主要的技术就是用好，wait ,notify,notifyAll,sychronized这些关键字。而在java 5之后，可以使用阻塞队列来实现，此方式大大简少了代码量，使得多线程编程更加容易，安全方面也有保障。\n\nBlockingQueue接口是Queue的子接口，它的主要用途并不是作为容器，而是作为线程同步的的工具，因此他具有一个很明显的特性，当生产者线程试图向BlockingQueue放入元素时，如果队列已满，则线程被阻塞，当消费者线程试图从中取出一个元素时，如果队列为空，则该线程会被阻塞，正是因为它所具有这个特性，所以在程序中多个线程交替向BlockingQueue中放入元素，取出元 素，它可以很好的控制线程之间的通信。\n\n阻塞队列使用最经典的场景就是socket客户端数据的读取和解析，读取数据的线程不断将数据放入队列，然后解析线程不断从队列取数据解析\n\n\n# 44、什么是多线程中的上下文切换？\n\n在上下文切换过程中，CPU会停止处理当前运行的程序，并保存当前程序运行的具体位置以便之后继续运行。从这个角度来看，上下文切换有点像我们同时阅读几本书，在来回切换书本的同时我们需要记住每本书当前读到的页码。\n\n在程序中，上下文切换过程中的“页码”信息是保存在进程控制块（PCB）中的。PCB还经常被称作“切换桢”（switchframe）。“页码”信息会一直保存到CPU的内存中，直到他们被再次使用。\n\n上下文切换是存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行。上下文切换是多任务操作系统和多线程环境的基本特征。\n\n\n# 45、什么是Daemon线程？它有什么意义？\n\n所谓后台(daemon)线程，也叫守护线程，是指在程序运行的时候在后台提供一种通用服务的线程，并且这个线程并不属于程序中不可或缺的部分。\n\n因此，当所有的非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说， 只要有任何非后台线程还在运行，程序就不会终止。\n\n必须在线程启动之前调用setDaemon()方法，才能把它设置为后台线程。注意：后台进程在不执行\n\nﬁnally子句的情况下就会终止其run()方法。\n\n比如：JVM的垃圾回收线程就是Daemon线程，Finalizer也是守护线程。\n\n\n# 46、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？\n\n悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。\n\n传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。再比如Java里面的同步原语synchronized关键字的实现也是悲观锁。\n\n乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。\n\n乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。\n\n在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。\n\n# 乐观锁的实现方式：\n\n1、使用版本标识来确定读到的数据与提交时的数据是否一致。提交后修改版本标识，不一致时可以采取丢弃和再次尝试的策略。\n\n2、java中的Compare and Swap即CAS ，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。 CAS 操作中包含三个操作数 —— 需要读写的内存位置（V）、进行比较的预期原值（A）和拟写入的新值(B)。如果内存位置V的值与预期原值A相匹配，那么处理器会自动将该位置值更新为新值B。否则处理器不做任何操作。\n\n# CAS缺点：\n\n 1. **ABA问题：**比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出 A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行 CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但可能存在潜藏的问题。从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决 ABA问题。\n\n 2. **循环时间长开销大：**对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。\n\n 3. **只能保证一个共享变量的原子操作：**当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。',normalizedContent:'# 003.多线程&并发篇003\n\n\n# 31、cas的原理呢？\n\ncas叫做compareandswap，比较并交换，主要是通过处理器的指令来保证操作的原子性，它包含三个操作数：\n\n 1. 变量内存地址，v表示\n\n 2. 旧的预期值，a表示\n\n 3. 准备设置的新值，b表示\n\n当执行cas指令时，只有当v等于a时，才会用b去更新v的值，否则就不会执行更新操作。\n\n\n# 32、cas有什么缺点吗？\n\ncas的缺点主要有3点：\n\naba问题：aba的问题指的是在cas更新的过程中，当读取到的值是a，然后准备赋值的时候仍然是 a，但是实际上有可能a的值被改成了b，然后又被改回了a，这个cas更新的漏洞就叫做aba。只是 aba的问题大部分场景下都不影响并发的最终效果。\n\njava中有atomicstampedreference来解决这个问题，他加入了预期标志和更新后标志两个字段，更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。\n\n循环时间长开销大：自旋cas的方式如果长时间不成功，会给cpu带来很大的开销。\n\n只能保证一个共享变量的原子操作：只对一个共享变量操作可以保证原子性，但是多个则不行，多个可以通过atomicreference来处理或者使用锁synchronized实现。\n\n\n# 33、引用类型有哪些？有什么区别？\n\n引用类型主要分为强软弱虚四种：\n\n 1. 强引用指的就是代码中普遍存在的赋值方式，比如a a = new a()这种。强引用关联的对象，永远不会被gc回收。\n\n 2. 软引用可以用softreference来描述，指的是那些有用但是不是必须要的对象。系统在发生内存溢出前会对这类引用的对象进行回收。\n\n 3. 弱引用可以用weakreference来描述，他的强度比软引用更低一点，弱引用的对象下一次gc的时候一定会被回收，而不管内存是否足够。\n\n 4. 虚引用也被称作幻影引用，是最弱的引用关系，可以用phantomreference来描述，他必须和 referencequeue一起使用，同样的当发生gc的时候，虚引用也会被回收。可以用虚引用来管理堆外内存。\n\n\n# 34、说说threadlocal原理？\n\nhreadlocal可以理解为线程本地变量，他会在每个线程都创建一个副本，那么在线程之间访问内部副本变量就行了，做到了线程之间互相隔离，相比于synchronized的做法是用空间来换时间。\n\nthreadlocal有一个静态内部类threadlocalmap，threadlocalmap又包含了一个entry数组， entry本身是一个弱引用，他的key是指向threadlocal的弱引用，entry具备了保存key value键值对的能力。\n\n弱引用的目的是为了防止内存泄露，如果是强引用那么threadlocal对象除非线程结束否则始终无法被回收，弱引用则会在下一次gc的时候被回收。\n\n但是这样还是会存在内存泄露的问题，假如key和threadlocal对象被回收之后，entry中就存在key为null，但是value有值的entry对象，但是永远没办法被访问到，同样除非线程结束运行。\n\n但是只要threadlocal使用恰当，在使用完之后调用remove方法删除entry对象，实际上是不会出现这个问题的。\n\n\n# 35、线程池原理知道吗？以及核心参数\n\n# 核心参数\n\n 1. 最大线程数maximumpoolsize\n\n 2. 核心线程数corepoolsize\n\n 3. 活跃时间keepalivetime\n\n 4. 阻塞队列workqueue\n\n 5. 拒绝策略rejectedexecutionhandler\n\n# 执行流程\n\n 1. 当我们提交任务，线程池会根据corepoolsize大小创建若干任务数量线程执行任务\n\n 2. 当任务的数量超过corepoolsize数量，后续的任务将会进入阻塞队列阻塞排队\n\n 3. 当阻塞队列也满了之后，那么将会继续创建(maximumpoolsize-corepoolsize)个数量的线程来执行任务，如果任务处理完成，maximumpoolsize-corepoolsize额外创建的线程等待 keepalivetime之后被自动销毁\n\n 4. 如果达到maximumpoolsize，阻塞队列还是满的状态，那么将根据不同的拒绝策略对应处理\n\n\n# 36、 线程池的拒绝策略有哪些？\n\n主要有4种拒绝策略：\n\n 1. abortpolicy：直接丢弃任务，抛出异常，这是默认策略\n\n 2. callerrunspolicy：只用调用者所在的线程来处理任务\n\n 3. discardoldestpolicy：丢弃等待队列中最旧的任务，并执行当前任务\n\n 4. discardpolicy：直接丢弃任务，也不抛出异常\n\n\n# 37、说说你对jmm内存模型的理解？为什么需要jmm？\n\n随着cpu和内存的发展速度差异的问题，导致cpu的速度远快于内存，所以现在的cpu加入了高速缓存，高速缓存一般可以分为l1、l2、l3三级缓存。基于上面的例子我们知道了这导致了缓存一致性的问题，所以加入了缓存一致性协议，同时导致了内存可见性的问题，而编译器和cpu的重排序导致了原子性和有序性的问题，jmm内存模型正是对多线程操作下的一系列规范约束，因为不可能让陈雇员的代码去兼容所有的cpu，通过jmm我们才屏蔽了不同硬件和操作系统内存的访问差异，这样保证了java程序在不同的平台下达到一致的内存访问效果，同时也是保证在高效并发的时候程序能够正确执行。\n\n原子性：java内存模型通过read、load、assign、use、store、write来保证原子性操作，此外还有\n\nlock和unlock，直接对应着synchronized关键字的monitorenter和monitorexit字节码指令。\n\n可见性：可见性的问题在上面的回答已经说过，java保证可见性可以认为通过volatile、\n\nsynchronized、ﬁnal来实现。\n\n有序性：由于处理器和编译器的重排序导致的有序性问题，java通过volatile、synchronized来保证。\n\n# happen-before规则\n\n虽然指令重排提高了并发的性能，但是java虚拟机会对指令重排做出一些规则限制，并不能让所有的指令都随意的改变执行位置，主要有以下几点：\n\n 1. 单线程每个操作，happen-before于该线程中任意后续操作\n\n 2. volatile写happen-before与后续对这个变量的读\n\n 3. synchronized解锁happen-before后续对这个锁的加锁\n\n 4. ﬁnal变量的写happen-before于ﬁnal域对象的读，happen-before后续对ﬁnal变量的读\n\n 5. 传递性规则，a先于b，b先于c，那么a一定先于c发生\n\n# 说了半天，到底工作内存和主内存是什么？\n\n主内存可以认为就是物理内存，java内存模型中实际就是虚拟机内存的一部分。而工作内存就是\n\ncpu缓存，他有可能是寄存器也有可能是l1\\l2\\l3缓存，都是有可能的。\n\n\n# 38、多线程有什么用？\n\n一个可能在很多人看来很扯淡的一个问题：我会用多线程就好了，还管它有什么用？在我看来，这个回答更扯淡。所谓"知其然知其所以然"，"会用"只是"知其然"，"为什么用"才是"知其所以然"，只有达到"知其然知其所以然"的程度才可以说是把一个知识点运用自如。ok，下面说说我对这个问题的看法：\n\n# 发挥多核cpu的优势\n\n随着工业的进步，现在的笔记本、台式机乃至商用的应用服务器至少也都是双核的，4核、8核甚至 16核的也都不少见，如果是单线程的程序，那么在双核cpu上就浪费了50%，在4核cpu上就浪费了75%。单核 cpu 上所谓的多线程那是假的多线程，同一时间处理器只会处理一段逻辑，只不过线程之间切换得比较快，看着像多个线程同时运行罢了。多核cpu上的多线程才是真正的多线 程，它能让你的多段逻辑同时工作，多线程，可以真正发挥出多核cpu的优势来，达到充分利用 cpu的目的。\n\n# 防止阻塞\n\n从程序运行效率的角度来看，单核cpu不但不会发挥出多线程的优势，反而会因为在单核cpu上运行多线程导致线程上下文的切换，而降低程序整体的效率。但是单核cpu我们还是要应用多线程，就是为了防止阻塞。试想，如果单核cpu使用单线程，那么只要这个线程阻塞了，比方说远程读取某个数据吧，对端迟迟未返回又没有设置超时时间，那么你的整个程序在数据返回回来之前就停止运行了。多线程可以防止这个问题，多条线程同时运行，哪怕一条线程的代码执行读取数据阻塞，也不会影响其它任务的执行。\n\n# 便于建模\n\n这是另外一个没有这么明显的优点了。假设有一个大的任务a，单线程编程，那么就要考虑很多，建立整个程序模型比较麻烦。但是如果把这个大的任务a分解成几个小任务，任务b、任务c、任务 d，分别建立程序模型，并通过多线程分别运行这几个任务，那就简单很多了。\n\n\n# 39、说说cyclicbarrier和countdownlatch的区别？\n\n两个看上去有点像的类，都在java.util.concurrent下，都可以用来表示代码运行到某个点上，二者的区别在于：\n\n（1） cyclicbarrier的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；countdownlatch则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行\n\n（2） cyclicbarrier只能唤起一个任务，countdownlatch可以唤起多个任务\n\n（3） cyclicbarrier可重用，countdownlatch不可重用，计数值为0该countdownlatch就不可再用了\n\n\n# 40、什么是aqs？\n\n简单说一下aqs，aqs全称为abstractqueuedsychronizer，翻译过来应该是抽象队列同步器。如果说java.util.concurrent的基础是cas的话，那么aqs就是整个java并发包的核心了，\n\nreentrantlock、countdownlatch、semaphore等等都用到了它。aqs实际上以双向队列的形式连接所有的entry，比方说reentrantlock，所有等待的线程都被放在一个entry中并连成双向队\n\n列，前面一个线程使用reentrantlock好了，则双向队列实际上的第一个entry开始运行。\n\naqs定义了对双向队列所有的操作，而只开放了trylock和tryrelease方法给开发者使用，开发者可以根据自己的实现重写trylock和tryrelease方法，以实现自己的并发功能。\n\n\n# 41、了解semaphore吗？\n\nemaphore就是一个信号量，它的作用是限制某段代码块的并发数。semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。\n\n\n# 42、什么是callable和future?\n\n# callable\n\ncallable接口类似于runnable，从名字就可以看出来了，但是runnable不会返回结果，并且无法抛出返回结果的异常，而callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被 future拿到，也就是说，future可以拿到异步执行任务的返回值。可以认为是带有回调的 runnable。\n\n# future\n\nfuture接口表示异步任务，是还没有完成的任务给出的未来结果。所以说callable用于产生结果， future用于获取结果。\n\n\n# 43、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？\n\n阻塞队列（blockingqueue）是一个支持两个附加操作的队列。\n\n这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。\n\n阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。\n\njdk7提供了7个阻塞队列。分别是：\n\n * arrayblockingqueue ：一个由数组结构组成的有界阻塞队列。\n * linkedblockingqueue ：一个由链表结构组成的有界阻塞队列。\n * priorityblockingqueue ：一个支持优先级排序的无界阻塞队列。\n * delayqueue：一个使用优先级队列实现的无界阻塞队列。\n * synchronousqueue：一个不存储元素的阻塞队列。\n * linkedtransferqueue：一个由链表结构组成的无界阻塞队列。\n * linkedblockingdeque：一个由链表结构组成的双向阻塞队列。\n\njava 5之前实现同步存取时，可以使用普通的一个集合，然后在使用线程的协作和线程同步可以实现生产者，消费者模式，主要的技术就是用好，wait ,notify,notifyall,sychronized这些关键字。而在java 5之后，可以使用阻塞队列来实现，此方式大大简少了代码量，使得多线程编程更加容易，安全方面也有保障。\n\nblockingqueue接口是queue的子接口，它的主要用途并不是作为容器，而是作为线程同步的的工具，因此他具有一个很明显的特性，当生产者线程试图向blockingqueue放入元素时，如果队列已满，则线程被阻塞，当消费者线程试图从中取出一个元素时，如果队列为空，则该线程会被阻塞，正是因为它所具有这个特性，所以在程序中多个线程交替向blockingqueue中放入元素，取出元 素，它可以很好的控制线程之间的通信。\n\n阻塞队列使用最经典的场景就是socket客户端数据的读取和解析，读取数据的线程不断将数据放入队列，然后解析线程不断从队列取数据解析\n\n\n# 44、什么是多线程中的上下文切换？\n\n在上下文切换过程中，cpu会停止处理当前运行的程序，并保存当前程序运行的具体位置以便之后继续运行。从这个角度来看，上下文切换有点像我们同时阅读几本书，在来回切换书本的同时我们需要记住每本书当前读到的页码。\n\n在程序中，上下文切换过程中的“页码”信息是保存在进程控制块（pcb）中的。pcb还经常被称作“切换桢”（switchframe）。“页码”信息会一直保存到cpu的内存中，直到他们被再次使用。\n\n上下文切换是存储和恢复cpu状态的过程，它使得线程执行能够从中断点恢复执行。上下文切换是多任务操作系统和多线程环境的基本特征。\n\n\n# 45、什么是daemon线程？它有什么意义？\n\n所谓后台(daemon)线程，也叫守护线程，是指在程序运行的时候在后台提供一种通用服务的线程，并且这个线程并不属于程序中不可或缺的部分。\n\n因此，当所有的非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说， 只要有任何非后台线程还在运行，程序就不会终止。\n\n必须在线程启动之前调用setdaemon()方法，才能把它设置为后台线程。注意：后台进程在不执行\n\nﬁnally子句的情况下就会终止其run()方法。\n\n比如：jvm的垃圾回收线程就是daemon线程，finalizer也是守护线程。\n\n\n# 46、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？\n\n悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。\n\n传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。再比如java里面的同步原语synchronized关键字的实现也是悲观锁。\n\n乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。\n\n乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。\n\n在java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式cas实现的。\n\n# 乐观锁的实现方式：\n\n1、使用版本标识来确定读到的数据与提交时的数据是否一致。提交后修改版本标识，不一致时可以采取丢弃和再次尝试的策略。\n\n2、java中的compare and swap即cas ，当多个线程尝试使用cas同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。 cas 操作中包含三个操作数 —— 需要读写的内存位置（v）、进行比较的预期原值（a）和拟写入的新值(b)。如果内存位置v的值与预期原值a相匹配，那么处理器会自动将该位置值更新为新值b。否则处理器不做任何操作。\n\n# cas缺点：\n\n 1. **aba问题：**比如说一个线程one从内存位置v中取出a，这时候另一个线程two也从内存中取出 a，并且two进行了一些操作变成了b，然后two又将v位置的数据变成a，这时候线程one进行 cas操作发现内存中仍然是a，然后one操作成功。尽管线程one的cas操作成功，但可能存在潜藏的问题。从java1.5开始jdk的atomic包里提供了一个类atomicstampedreference来解决 aba问题。\n\n 2. **循环时间长开销大：**对于资源竞争严重（线程冲突严重）的情况，cas自旋的概率会比较大，从而浪费更多的cpu资源，效率低于synchronized。\n\n 3. **只能保证一个共享变量的原子操作：**当对一个共享变量执行操作时，我们可以使用循环cas的方式来保证原子操作，但是对多个共享变量操作时，循环cas就无法保证操作的原子性，这个时候就可以用锁。',charsets:{cjk:!0}},{title:"001.Spring篇001",frontmatter:{title:"001.Spring篇001",categories:["Java","Spring"],tags:["Java","Spring"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-11T16:47:29.000Z",permalink:"/pages/d9fe94/"},regularPath:"/07.Java/04.Spring%E7%AF%87/001.Spring%E7%AF%87001.html",relativePath:"07.Java/04.Spring篇/001.Spring篇001.md",key:"v-b7ae71e0",path:"/pages/d9fe94/",headers:[{level:2,title:"1、什么是spring?",slug:"_1、什么是spring",normalizedTitle:"1、什么是spring?",charIndex:21},{level:2,title:"2、你们项目中为什么使用Spring框架？",slug:"_2、你们项目中为什么使用spring框架",normalizedTitle:"2、你们项目中为什么使用spring框架？",charIndex:160},{level:2,title:"3、Autowired和Resource关键字的区别？",slug:"_3、autowired和resource关键字的区别",normalizedTitle:"3、autowired和resource关键字的区别？",charIndex:587},{level:3,title:"@Autowired",slug:"autowired",normalizedTitle:"@autowired",charIndex:626},{level:3,title:"@Resource",slug:"resource",normalizedTitle:"@resource",charIndex:616},{level:4,title:"装配顺序：",slug:"装配顺序",normalizedTitle:"装配顺序：",charIndex:1981},{level:2,title:"4、依赖注入的方式有几种，各是什么?",slug:"_4、依赖注入的方式有几种-各是什么",normalizedTitle:"4、依赖注入的方式有几种，各是什么?",charIndex:2279},{level:2,title:"5、讲一下什么是Spring",slug:"_5、讲一下什么是spring",normalizedTitle:"5、讲一下什么是spring",charIndex:2774},{level:2,title:"6、说说你对Spring MVC的理解",slug:"_6、说说你对spring-mvc的理解",normalizedTitle:"6、说说你对spring mvc的理解",charIndex:3173},{level:4,title:"分析：",slug:"分析",normalizedTitle:"分析：",charIndex:3231},{level:4,title:"工作原理:",slug:"工作原理",normalizedTitle:"工作原理:",charIndex:3677},{level:4,title:"组件说明：",slug:"组件说明",normalizedTitle:"组件说明：",charIndex:4214},{level:2,title:"7、 SpringMVC常用的注解有哪些？",slug:"_7、-springmvc常用的注解有哪些",normalizedTitle:"7、 springmvc常用的注解有哪些？",charIndex:6579},{level:2,title:"8、 谈谈你对Spring的AOP理解",slug:"_8、-谈谈你对spring的aop理解",normalizedTitle:"8、 谈谈你对spring的aop理解",charIndex:6782},{level:2,title:"9、Spring AOP和AspectJ AOP有什么区别？",slug:"_9、spring-aop和aspectj-aop有什么区别",normalizedTitle:"9、spring aop和aspectj aop有什么区别？",charIndex:7275},{level:3,title:"在Spring AOP 中，关注点和横切关注的区别是什么？",slug:"在spring-aop-中-关注点和横切关注的区别是什么",normalizedTitle:"在spring aop 中，关注点和横切关注的区别是什么？",charIndex:7580},{level:3,title:"什么是通知呢？有哪些类型呢？",slug:"什么是通知呢-有哪些类型呢",normalizedTitle:"什么是通知呢？有哪些类型呢？",charIndex:7809},{level:2,title:"10、说说你对Spring的IOC是怎么理解的？",slug:"_10、说说你对spring的ioc是怎么理解的",normalizedTitle:"10、说说你对spring的ioc是怎么理解的？",charIndex:8069},{level:2,title:"11、解释一下spring bean的生命周期",slug:"_11、解释一下spring-bean的生命周期",normalizedTitle:"11、解释一下spring bean的生命周期",charIndex:8479},{level:2,title:"12、解释Spring支持的几种bean的作用域？",slug:"_12、解释spring支持的几种bean的作用域",normalizedTitle:"12、解释spring支持的几种bean的作用域？",charIndex:9786},{level:2,title:"13、 Spring基于xml注入bean的几种方式?",slug:"_13、-spring基于xml注入bean的几种方式",normalizedTitle:"13、 spring基于xml注入bean的几种方式?",charIndex:10238},{level:2,title:"14、Spring框架中都用到了哪些设计模式？",slug:"_14、spring框架中都用到了哪些设计模式",normalizedTitle:"14、spring框架中都用到了哪些设计模式？",charIndex:10347},{level:2,title:"15、说说Spring 中 ApplicationContext 和 BeanFactory 的区别",slug:"_15、说说spring-中-applicationcontext-和-beanfactory-的区别",normalizedTitle:"15、说说spring 中 applicationcontext 和 beanfactory 的区别",charIndex:11734},{level:4,title:"类图",slug:"类图",normalizedTitle:"类图",charIndex:11788},{level:4,title:"国际化",slug:"国际化",normalizedTitle:"国际化",charIndex:11945},{level:4,title:"强大的事件机制（Event）",slug:"强大的事件机制-event",normalizedTitle:"强大的事件机制（event）",charIndex:12090},{level:4,title:"底层资源的访问",slug:"底层资源的访问",normalizedTitle:"底层资源的访问",charIndex:12323},{level:4,title:"对 Web 应用的支持",slug:"对-web-应用的支持",normalizedTitle:"对 web 应用的支持",charIndex:12438},{level:4,title:"延迟加载",slug:"延迟加载",normalizedTitle:"延迟加载",charIndex:12592},{level:4,title:"常用容器",slug:"常用容器",normalizedTitle:"常用容器",charIndex:13304},{level:2,title:"16、Spring 框架中的单例 Bean 是线程安全的么？",slug:"_16、spring-框架中的单例-bean-是线程安全的么",normalizedTitle:"16、spring 框架中的单例 bean 是线程安全的么？",charIndex:13638},{level:2,title:"17、Spring 是怎么解决循环依赖的？",slug:"_17、spring-是怎么解决循环依赖的",normalizedTitle:"17、spring 是怎么解决循环依赖的？",charIndex:13979},{level:2,title:"18、说说事务的隔离级别",slug:"_18、说说事务的隔离级别",normalizedTitle:"18、说说事务的隔离级别",charIndex:14461},{level:2,title:"19、说说事务的传播级别",slug:"_19、说说事务的传播级别",normalizedTitle:"19、说说事务的传播级别",charIndex:14963},{level:2,title:"20、Spring 事务实现方式",slug:"_20、spring-事务实现方式",normalizedTitle:"20、spring 事务实现方式",charIndex:15522},{level:2,title:"21、 Spring框架的事务管理有哪些优点",slug:"_21、-spring框架的事务管理有哪些优点",normalizedTitle:"21、 spring框架的事务管理有哪些优点",charIndex:15651},{level:2,title:"22、事务三要素是什么？",slug:"_22、事务三要素是什么",normalizedTitle:"22、事务三要素是什么？",charIndex:16093},{level:2,title:"23、 事务注解的本质是什么？",slug:"_23、-事务注解的本质是什么",normalizedTitle:"23、 事务注解的本质是什么？",charIndex:16253}],headersStr:"1、什么是spring? 2、你们项目中为什么使用Spring框架？ 3、Autowired和Resource关键字的区别？ @Autowired @Resource 装配顺序： 4、依赖注入的方式有几种，各是什么? 5、讲一下什么是Spring 6、说说你对Spring MVC的理解 分析： 工作原理: 组件说明： 7、 SpringMVC常用的注解有哪些？ 8、 谈谈你对Spring的AOP理解 9、Spring AOP和AspectJ AOP有什么区别？ 在Spring AOP 中，关注点和横切关注的区别是什么？ 什么是通知呢？有哪些类型呢？ 10、说说你对Spring的IOC是怎么理解的？ 11、解释一下spring bean的生命周期 12、解释Spring支持的几种bean的作用域？ 13、 Spring基于xml注入bean的几种方式? 14、Spring框架中都用到了哪些设计模式？ 15、说说Spring 中 ApplicationContext 和 BeanFactory 的区别 类图 国际化 强大的事件机制（Event） 底层资源的访问 对 Web 应用的支持 延迟加载 常用容器 16、Spring 框架中的单例 Bean 是线程安全的么？ 17、Spring 是怎么解决循环依赖的？ 18、说说事务的隔离级别 19、说说事务的传播级别 20、Spring 事务实现方式 21、 Spring框架的事务管理有哪些优点 22、事务三要素是什么？ 23、 事务注解的本质是什么？",content:'# 001.Spring篇001\n\n\n# 1、什么是spring?\n\nSpring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。\n\n\n# 2、你们项目中为什么使用Spring框架？\n\n这么问的话，就直接说Spring框架的好处就可以了。比如说Spring有以下特点：\n\n * **轻量：**Spring 是轻量的，基本的版本大约2MB。\n * **控制反转：**Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。\n * 面向切面的编程(AOP)：**Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。**容器：Spring 包含并管理应用中对象的生命周期和配置。\n * MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。**事务管理：**Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务\n * **异常处理：**Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。\n\n\n# 3、Autowired和Resource关键字的区别？\n\n@Resource和@Autowired都是做bean的注入时使用，其实**@Resource**并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。\n\n1、共同点\n\n两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。\n\n2、不同点\n\n\n# @Autowired\n\n@Autowired为Spring提供的注解，需要导入包 org.springframework.beans.factory.annotation.Autowired;只按照byType注入。\n\npublic class TestServiceImpl {\n    // 下面两种@Autowired只要使用一种即可\n    @Autowired\n    private UserDao userDao; // 用于字段上\n    \n    @Autowired\n    public void setUserDao(UserDao userDao) { // 用于属性的方法上\n    \tthis.userDao = userDao;\n    }\n}\n\n\n@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装 配，可以结合@Qualiﬁer注解一起使用。\n\npublic class TestServiceImpl {\n    @Autowired\n    @Qualifier("userDao")\n    private UserDao userDao;\n}\n\n\n\n# @Resource\n\n@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。 @Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为 bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。\n\npublic class TestServiceImpl {\n    // 下面两种@Resource只要使用一种即可\n    @Resource(name="userDao")\n    private UserDao userDao; // 用于字段上\n    \n    @Resource(name="userDao")\n    public void setUserDao(UserDao userDao) { // 用于属性的setter方法上\n   \t \tthis.userDao = userDao;\n    }\n}\n\n\n> 注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。\n\n# 装配顺序：\n\n①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。\n\n②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。\n\n③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。\n\n④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。\n\n@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。\n\n\n# 4、依赖注入的方式有几种，各是什么?\n\n一、构造器注入 将被依赖对象通过构造函数的参数注入给依赖对象，并且在初始化对象的时候注入。\n\n优点： 对象初始化完成后便可获得可使用的对象。\n\n缺点： 当需要注入的对象很多时，构造器参数列表将会很长； 不够灵活。若有多种注入方式，每种方式只需注入指定几个依赖，那么就需要提供多个重载的构造函数，麻烦。\n\n二、setter方法注入 IoC Service Provider通过调用成员变量提供的setter函数将被依赖对象注入给依赖类。\n\n优点： 灵活。可以选择性地注入需要的对象。\n\n缺点： 依赖对象初始化完成后由于尚未注入被依赖对象，因此还不能使用。\n\n三、接口注入 依赖类必须要实现指定的接口，然后实现该接口中的一个函数，该函数就是用于依赖注入。该函数的参数就是要注入的对象。\n\n优点 接口注入中，接口的名字、函数的名字都不重要，只要保证函数的参数是要注入的对象类型即可。\n\n缺点： 侵入行太强，不建议使用。\n\n> PS：什么是侵入行？ 如果类A要使用别人提供的一个功能，若为了使用这功能，需要在自己的类中增加额外的代码，这就是侵入性。\n\n\n# 5、讲一下什么是Spring\n\nSpring是一个轻量级的IoC和AOP容器框架。是为Java应用程序提供基础性服务的一套框架，目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。常见的配置方式有三种：基于 XML的配置、基于注解的配置、基于Java的配置。\n\n主要由以下几个模块组成：\n\nSpring Core：核心类库，提供IOC服务；\n\nSpring Context：提供框架式的Bean访问方式，以及企业级功能（JNDI、定时任务等）；\n\nSpring AOP：AOP服务；\n\nSpring DAO：对JDBC的抽象，简化了数据访问异常的处理；\n\nSpring ORM：对现有的ORM框架的支持；\n\nSpring Web：提供了基本的面向Web的综合特性，例如多方文件上传； Spring MVC：提供面向Web应用的Model-View-Controller实现。\n\n\n# 6、说说你对Spring MVC的理解\n\n什么是MVC模式\n\nMVC：MVC是一种设计模式\n\nMVC的原理图\n\n# 分析：\n\nM-Model 模型（完成业务逻辑：有javaBean构成，service+dao+entity）\n\nV-View 视图（做界面的展示 jsp，html……）\n\nC-Controller 控制器（接收请求—>调用模型—>根据结果派发页面）\n\nspringMVC是一个MVC的开源框架，springMVC=struts2+spring，springMVC就相当于是Struts2加上sring的整合，但是这里有一个疑惑就是，springMVC和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springMVC是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的MVC模块，可以简单的把springMVC理解为是spring的一个模块\n\n（类似AOP，IOC这样的模块），网络上经常会说springMVC和spring无缝集成，其实springMVC就是spring的一个子模块，所以根本不需要同spring进行整合。\n\n# 工作原理:\n\n\n\n1、 用户发送请求至前端控制器DispatcherServlet。\n\n2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。\n\n3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。\n\n4、 DispatcherServlet调用HandlerAdapter处理器适配器。\n\n5、 HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。\n\n6、 Controller执行完成返回ModelAndView。\n\n7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。\n\n8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器。\n\n9、 ViewReslover解析后返回具体View。\n\n10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。\n\n11、 DispatcherServlet响应用户。\n\n# 组件说明：\n\n以下组件通常使用框架提供实现：\n\nDispatcherServlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。\n\nHandlerMapping：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\nHandlAdapter：通过扩展处理器适配器，支持更多类型的处理器。\n\nViewResolver：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、 excel等。\n\n组件： 1、前端控制器DispatcherServlet（不需要工程师开发）,由框架提供\n\n作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherServlet减少了其它组件之间的耦合度。 用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。\n\n2、处理器映射器HandlerMapping(不需要工程师开发),由框架提供\n\n作用：根据请求的url查找 Handler HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\n3、处理器适配器HandlerAdapter\n\n作用：按照特定规则（HandlerAdapter要求的规则）去执行 Handler 通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。\n\n**4、处理器Handler(需要工程师开发) **\n\n注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler ,Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。 由于Handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发Handler。\n\n5、视图解析器View resolver(不需要工程师开发),由框架提供\n\n作用：进行视图解析，根据逻辑视图名解析成真正的视图（view） View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的View视图类型，包括：jstlView、 freemarkerView、pdfView等。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。\n\n6、视图View(需要工程师开发jsp...)\n\nView是一个接口，实现类支持不同的View类型（jsp、 freemarker、pdf...）\n\n核心架构的具体流程步骤如下：\n\n1、首先用户发送请求——>DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；\n\n2、DispatcherServlet——>HandlerMapping， HandlerMapping 将会把请求映射为 HandlerExecutionChain 对象（包含一个Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；\n\n3、 DispatcherServlet——>HandlerAdapter，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；\n\n4、 HandlerAdapter——>处理器功能处理方法的调用，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView 对象（包含模型数据、逻辑视图名）；\n\n5、ModelAndView的逻辑视图名——> ViewResolver， ViewResolver 将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；\n\n6、View——>渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；\n\n7、返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。\n\n看到这些步骤我相信大家很感觉非常的乱，这是正常的，但是这里主要是要大家理解springMVC中的几个组件：\n\n * 前端控制器（DispatcherServlet）：接收请求，响应结果，相当于电脑的CPU。处理器映射器（HandlerMapping）：根据URL去查找处理器。\n * 处理器（Handler）：需要程序员去写代码处理逻辑的。\n * 处理器适配器（HandlerAdapter）：会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）。\n * 视图解析器（ViewResovler）：进行视图解析，多返回的字符串，进行处理，可以解析成对应的页面\n\n\n# 7、 SpringMVC常用的注解有哪些？\n\n@RequestMapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的方法都是以该地址作为父路径。\n\n@RequestBody：注解实现接收http请求的json数据，将json转换为java对象。 @ResponseBody：注解实现将conreoller方法返回对象转化为json对象响应给客户。\n\n\n# 8、 谈谈你对Spring的AOP理解\n\nAOP（Aspect-Oriented Programming，面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可扩展性和可维护性。\n\nSpring AOP是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP就会使用JDK动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用JDK动态代理，转而使用CGlib动态代理生成一个被代理对象的子类来作为代理。 注意：图中的implements和extend。即一个是接口，一个是实现类。\n\n当然也可以使用AspectJ，Spring AOP中已经集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。使用AOP之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样可以大大简化代码量。我们需要增加新功能也方便，提高了系统的扩展性。日志功 能、事务管理和权限管理等场景都用到了AOP。\n\n\n# 9、Spring AOP和AspectJ AOP有什么区别？\n\nSpring AOP是属于运行时增强，而AspectJ是编译时增强。Spring AOP基于代理（Proxying），而 AspectJ基于字节码操作（Bytecode Manipulation）。\n\nSpring AOP已经集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。 AspectJ相比于Spring AOP功能更加强大，但是Spring AOP相对来说更简单。\n\n如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比\n\nSpringAOP快很多\n\n\n# 在Spring AOP 中，关注点和横切关注的区别是什么？\n\n关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。 横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。\n\n那什么是连接点呢？连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。\n\n\n# 什么是通知呢？有哪些类型呢？\n\n通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。\n\nSpring切面可以应用五种类型的通知：\n\n 1. before：前置通知，在一个方法执行前被调用。\n\n 2. after: 在方法执行之后调用的通知，无论方法执行是否成功。\n\n 3. after-returning: 仅当方法成功完成后执行的通知。 after-throwing: 在方法抛出异常退出时执行的通知。\n\n 4. around: 在方法执行之前和之后调用的通知\n\n\n# 10、说说你对Spring的IOC是怎么理解的？\n\n（1） IOC就是控制反转，是指创建对象的控制权的转移。以前创建对象的主动权和时机是由自己把控的，而现在这种权力转移到Spring容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系。对象与对象之间松散耦合，也利于功能的复用。DI依赖注入，和控制反转是同一个概念的不同角度的描述，即 应用程序在运行时依赖IoC容器来动态注入对象需要的外部资源。\n\n（2） 最直观的表达就是，IOC让对象的创建不用去new了，可以由spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。\n\n（3） Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。\n\n> IoC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。\n\n\n# 11、解释一下spring bean的生命周期\n\n首先说一下Servlet的生命周期：实例化，初始init，接收请求service，销毁destroy；\n\nSpring上下文中的Bean生命周期也类似，如下：\n\n * 实例化Bean：\n\n对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDeﬁnition对象中的信息，实例化所有的bean。\n\n * 设置对象属性（依赖注入）：\n\n实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDeﬁnition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成依赖注入。\n\n * 处理Aware接口：\n\n接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：\n\n 1. 如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值；\n\n 2. 如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。\n\n 3. 如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；\n\n * BeanPostProcessor：\n\n如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。\n\n * InitializingBean 与 init-method：\n\n如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。\n\n * 如果这个Bean实现了BeanPostProcessor接口，将会调用 postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；\n\n以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。\n\n * DisposableBean：\n\n当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；\n\n * destroy-method：\n\n最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法\n\n\n# 12、解释Spring支持的几种bean的作用域？\n\nSpring容器中的bean可以分为5个范围：\n\n（1） singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。\n\n（2） prototype：为每一个bean请求提供一个实例。\n\n（3） request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。\n\n（4） session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，\n\nbean会随之失效。\n\n（5） global-session：全局作用域，global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。全局作用域与Servlet中的session作用域效果相同。\n\n\n# 13、 Spring基于xml注入bean的几种方式?\n\n 1. Set方法注入；\n 2. 构造器注入：①通过index设置参数的位置；②通过type设置参数类型；\n 3. 静态工厂注入；\n 4. 实例工厂；\n\n\n# 14、Spring框架中都用到了哪些设计模式？\n\n简单工厂模式：Spring 中的 BeanFactory 就是简单工厂模式的体现。根据传入一个唯一的标识来获得 Bean 对象，但是在传入参数后创建还是传入参数前创建，要根据具体情况来定。 工厂模式：Spring 中的 FactoryBean 就是典型的工厂方法模式，实现了 FactoryBean 接口的 bean是一类叫做 factory 的 bean。其特点是，spring 在使用 getBean() 调用获得该 bean 时，会自动调用该 bean 的 getObject() 方法，所以返回的不是 factory 这个 bean，而是这个 bean.getOjbect()方法的返回值。 单例模式：在 spring 中用到的单例模式有： scope="singleton" ，注册式单例模式，bean 存放于Map 中。bean name 当做 key，bean 当做 value。 原型模式：在 spring 中用到的原型模式有： scope="prototype" ，每次获取的是通过克隆生成的新实例，对其进行修改时对原有实例对象不造成任何影响。 迭代器模式：在 Spring 中有个 CompositeIterator 实现了 Iterator，Iterable 接口和 Iterator 接口，这两个都是迭代相关的接口。可以这么认为，实现了 Iterable 接口，则表示某个对象是可被迭代的。Iterator 接口相当于是一个迭代器，实现了 Iterator 接口，等于具体定义了这个可被迭代的对象时如何进行迭代的。\n\n代理模式：Spring 中经典的 AOP，就是使用动态代理实现的，分 JDK 和 CGlib 动态代理。 适配器模式：Spring 中的 AOP 中 AdvisorAdapter 类，它有三个实现：MethodBeforAdviceAdapter、AfterReturnningAdviceAdapter、ThrowsAdviceAdapter。Spring会根据不同的 AOP 配置来使用对应的 Advice，与策略模式不同的是，一个方法可以同时拥有多个Advice。Spring 存在很多以 Adapter 结尾的，大多数都是适配器模式。 观察者模式：Spring 中的 Event 和 Listener。spring 事件：ApplicationEvent，该抽象类继承了EventObject 类，JDK 建议所有的事件都应该继承自 EventObject。spring 事件监听器：ApplicationListener，该接口继承了 EventListener 接口，JDK 建议所有的事件监听器都应该继承EventListener。 模板模式：Spring 中的 org.springframework.jdbc.core.JdbcTemplate 就是非常经典的模板模式的应用，里面的 execute 方法，把整个算法步骤都定义好了。\n\n责任链模式：DispatcherServlet 中的 doDispatch() 方法中获取与请求匹配的处理器HandlerExecutionChain，this.getHandler() 方法的处理使用到了责任链模式。\n\n\n# 15、说说Spring 中 ApplicationContext 和 BeanFactory 的区别\n\n# 类图\n\n\n\n包目录不同\n\n 1. spring-beans.jar 中 org.springframework.beans.factory.BeanFactory\n 2. spring-context.jar 中 org.springframework.context.ApplicationContext\n\n# 国际化\n\nBeanFactory 是不支持国际化功能的，因为 BeanFactory 没有扩展 Spring 中 MessageResource接口。相反，由于 ApplicationContext 扩展了 MessageResource 接口，因而具有消息处理的能力（i18N）。\n\n# 强大的事件机制（Event）\n\n基本上牵涉到事件（Event）方面的设计，就离不开观察者模式，ApplicationContext 的事件机制主要通过 ApplicationEvent 和 ApplicationListener 这两个接口来提供的，和 Java swing 中的事件机制一样。即当 ApplicationContext 中发布一个事件时，所有扩展了 ApplicationListener 的 Bean都将接受到这个事件，并进行相应的处理。\n\n# 底层资源的访问\n\nApplicationContext 扩展了 ResourceLoader（资源加载器）接口，从而可以用来加载多个 Resource，而 BeanFactory 是没有扩展 ResourceLoader。\n\n# 对 Web 应用的支持\n\n与 BeanFactory 通常以编程的方式被创建，ApplicationContext 能以声明的方式创建，如使用ContextLoader。当然你也可以使用 ApplicationContext 的实现方式之一，以编程的方式创建 ApplicationContext实例\n\n# 延迟加载\n\n 1. BeanFactroy 采用的是延迟加载形式来注入 Bean 的，即只有在使用到某个 Bean 时(调用 getBean())，才对该 Bean 进行加载实例化。这样，我们就不能发现一些存在的 spring 的配置问题。而 ApplicationContext 则相反，它是在容器启动时，一次性创建了所有的 Bean。这 样，在容器启动时，我们就可以发现 Spring 中存在的配置错误。\n\n 2. BeanFactory 和 ApplicationContext 都支持 BeanPostProcessor、 BeanFactoryPostProcessor 的使用。两者之间的区别是：BeanFactory 需要手动注册，而 ApplicationContext 则是自动注册。\n\n可以看到，ApplicationContext 继承了 BeanFactory，BeanFactory 是 Spring 中比较原始的 Factory，它不支持 AOP、Web 等 Spring 插件。而 ApplicationContext 不仅包含了 BeanFactory的所有功能，还支持 Spring 的各种插件，还以一种面向框架的方式工作以及对上下文进行分层和实现继承。\n\nBeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；而 ApplicationContext 面向使用 Spring 的开发者，相比 BeanFactory 提供了更多面向实际应用的功能，几乎所有场合都可以直接使用 ApplicationContext，而不是底层的 BeanFactory。\n\n# 常用容器\n\nBeanFactory 类型的有 XmlBeanFactory，它可以根据 XML 文件中定义的内容，创建相应的\n\nBean。\n\nApplicationContext 类型的常用容器有：\n\n 1. ClassPathXmlApplicationContext：从 ClassPath 的 XML 配置文件中读取上下文，并生成上下文定义。应用程序上下文从程序环境变量中取得。\n\n 2. FileSystemXmlApplicationContext：由文件系统中的 XML 配置文件读取上下文。\n\n 3. XmlWebApplicationContext：由 Web 应用的 XML 文件读取上下文。例如我们在 Spring MVC\n\n使用的情况。\n\n\n# 16、Spring 框架中的单例 Bean 是线程安全的么？\n\nSpring 框架并没有对单例 Bean 进行任何多线程的封装处理。\n\n * 关于单例 Bean 的线程安全和并发问题，需要开发者自行去搞定。\n * 单例的线程安全问题，并不是 Spring 应该去关心的。Spring 应该做的是，提供根据配置，创建单例 Bean 或多例 Bean 的功能。\n * 当然，但实际上，大部分的 Spring Bean 并没有可变的状态，所以在某种程度上说 Spring 的单例 Bean 是线程安全的。如果你的 Bean 有多种状态的话，就需要自行保证线程安全。最浅显的解决办法，就是将多态 Bean 的作用域（Scope）由 Singleton 变更为 Prototype。\n\n\n# 17、Spring 是怎么解决循环依赖的？\n\n\n\n整个流程大致如下：\n\n 1. 首先 A 完成初始化第一步并将自己提前曝光出来（通过 ObjectFactory 将自己提前曝光），在初始化的时候，发现自己依赖对象 B，此时就会去尝试 get(B)，这个时候发现 B 还没有被创建出来；\n\n 2. 然后 B 就走创建流程，在 B 初始化的时候，同样发现自己依赖 C，C 也没有被创建出来；\n\n 3. 这个时候 C 又开始初始化进程，但是在初始化的过程中发现自己依赖 A，于是尝试 get(A)。这个时候由于 A 已经添加至缓存中（一般都是添加至三级缓存 singletonFactories），通过 ObjectFactory 提前曝光，所以可以通过 ObjectFactory#getObject() 方法来拿到 A 对象。C 拿到 A 对象后顺利完成初始化，然后将自己添加到一级缓存中；\n\n 4. 回到 B，B 也可以拿到 C 对象，完成初始化，A 可以顺利拿到 B 完成初始化。到这里整个链路就已经完成了初始化过程了。\n\n关键字：三级缓存，提前曝光。\n\n\n# 18、说说事务的隔离级别\n\n * 未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据\n * 提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)\n * 可重复读(Repeated Read)：在同一个事务内的查询都是事务开始时刻一致的，Mysql的InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻读（多个事务同时修改同一条记录，事务之间不知道彼此存在，当事务提交之后，后面的事务修改的数据将会覆盖前事务，前一个事务就像发生幻觉一样）\n * 可串行化(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。 不可重复读和幻读的区别主要是：解决不可重复读需要锁定了当前满足条件的记录，而解决幻读需要锁定当前满足条件的记录及相近的记录。比如查询某个商品的信息，可重复读事务隔离级别可以保证当前商品信息被锁定，解决不可重复读；但是如果统计商品个数，中途有记录插入，可重复读事务隔离级别就不能保证两个事务统计的个数相同。\n\n\n# 19、说说事务的传播级别\n\nSpring事务定义了7种传播机制：\n\n 1. PROPAGATION_REQUIRED:默认的Spring事物传播级别，若当前存在事务，则加入该事务，若不存在事务，则新建一个事务。\n\n 2. PAOPAGATION_REQUIRE_NEW:若当前没有事务，则新建一个事务。若当前存在事务，则新建一个事务，新老事务相互独立。外部事务抛出异常回滚不会影响内部事务的正常提交。\n\n 3. PROPAGATION_NESTED:如果当前存在事务，则嵌套在当前事务中执行。如果当前没有事务，则新建一个事务，类似于REQUIRE_NEW。\n\n 4. PROPAGATION_SUPPORTS:支持当前事务，若当前不存在事务，以非事务的方式执行。\n\n 5. PROPAGATION_NOT_SUPPORTED:以非事务的方式执行，若当前存在事务，则把当前事务挂起。\n\n 6. PROPAGATION_MANDATORY:强制事务执行，若当前不存在事务，则抛出异常.\n\n 7. PROPAGATION_NEVER:以非事务的方式执行，如果当前存在事务，则抛出异常。\n\nSpring事务传播级别一般不需要定义，默认就是PROPAGATION_REQUIRED，除非在嵌套事务的情况下需要重点了解。\n\n\n# 20、Spring 事务实现方式\n\n 1. 编程式事务管理：这意味着你可以通过编程的方式管理事务，这种方式带来了很大的灵活性，但很难维护。\n 2. 声明式事务管理：这种方式意味着你可以将事务管理和业务代码分离。你只需要通过注解或者XML配置管理事务\n\n\n# 21、 Spring框架的事务管理有哪些优点\n\n 1. 它为不同的事务API(如JTA, JDBC, Hibernate, JPA, 和JDO)提供了统一的编程模型。它为编程式事务管理提供了一个简单的API而非一系列复杂的事务API(如JTA).它支持声明式事务管理。它可以和 Spring 的多种数据访问技术很好的融合。\n 2. 它为不同的事务API(如JTA, JDBC, Hibernate, JPA, 和JDO)提供了统一的编程模型。它为编程式事务管理提供了一个简单的API而非一系列复杂的事务API(如JTA).它支持声明式事务管理。它可以和 Spring 的多种数据访问技术很好的融合。\n 3. 它为不同的事务API(如JTA, JDBC, Hibernate, JPA, 和JDO)提供了统一的编程模型。它为编程式事务管理提供了一个简单的API而非一系列复杂的事务API(如JTA).它支持声明式事务管理。它可以和 Spring 的多种数据访问技术很好的融合。\n\n\n# 22、事务三要素是什么？\n\n 1. 数据源：表示具体的事务性资源，是事务的真正处理者，如MySQL等。\n 2. 事务管理器：像一个大管家，从整体上管理事务的处理过程，如打开、提交、回滚等。\n 3. 事务应用和属性配置：像一个标识符，表明哪些方法要参与事务，如何参与事务，以及一些相关属性如隔离级别、超时时间等。\n\n\n# 23、 事务注解的本质是什么？\n\n@Transactional 这个注解仅仅是一些（和事务相关的）元数据，在运行时被事务基础设施读取消费，并使用这些元数据来配置bean的事务行为。 大致来说具有两方面功能，一是表明该方法要参与事务，二是配置相关属性来定制事务的参与方式和运行行为\n\n声明式事务主要是得益于Spring AOP。使用一个事务拦截器，在方法调用的前后/周围进行事务性增强（advice），来驱动事务完成。\n\n@Transactional注解既可以标注在类上，也可以标注在方法上。当在类上时，默认应用到类里的所有方法。如果此时方法上也标注了，则方法上的优先级高。 另外注意方法一定要是public的。',normalizedContent:'# 001.spring篇001\n\n\n# 1、什么是spring?\n\nspring 是个java企业级应用的开源开发框架。spring主要用来开发java应用，但是有些扩展是针对构建j2ee平台的web应用。spring 框架目标是简化java企业级应用开发，并通过pojo为基础的编程模型促进良好的编程习惯。\n\n\n# 2、你们项目中为什么使用spring框架？\n\n这么问的话，就直接说spring框架的好处就可以了。比如说spring有以下特点：\n\n * **轻量：**spring 是轻量的，基本的版本大约2mb。\n * **控制反转：**spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。\n * 面向切面的编程(aop)：**spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。**容器：spring 包含并管理应用中对象的生命周期和配置。\n * mvc框架：spring的web框架是个精心设计的框架，是web框架的一个很好的替代品。**事务管理：**spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务\n * **异常处理：**spring 提供方便的api把具体技术相关的异常（比如由jdbc，hibernate or jdo抛出的）转化为一致的unchecked 异常。\n\n\n# 3、autowired和resource关键字的区别？\n\n@resource和@autowired都是做bean的注入时使用，其实**@resource**并不是spring的注解，它的包是javax.annotation.resource，需要导入，但是spring支持该注解的注入。\n\n1、共同点\n\n两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。\n\n2、不同点\n\n\n# @autowired\n\n@autowired为spring提供的注解，需要导入包 org.springframework.beans.factory.annotation.autowired;只按照bytype注入。\n\npublic class testserviceimpl {\n    // 下面两种@autowired只要使用一种即可\n    @autowired\n    private userdao userdao; // 用于字段上\n    \n    @autowired\n    public void setuserdao(userdao userdao) { // 用于属性的方法上\n    \tthis.userdao = userdao;\n    }\n}\n\n\n@autowired注解是按照类型（bytype）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byname）来装 配，可以结合@qualiﬁer注解一起使用。\n\npublic class testserviceimpl {\n    @autowired\n    @qualifier("userdao")\n    private userdao userdao;\n}\n\n\n\n# @resource\n\n@resource默认按照byname自动注入，由j2ee提供，需要导入包javax.annotation.resource。 @resource有两个重要的属性：name和type，而spring将@resource注解的name属性解析为 bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byname的自动注入策略，而使用type属性时则使用bytype自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byname自动注入策略。\n\npublic class testserviceimpl {\n    // 下面两种@resource只要使用一种即可\n    @resource(name="userdao")\n    private userdao userdao; // 用于字段上\n    \n    @resource(name="userdao")\n    public void setuserdao(userdao userdao) { // 用于属性的setter方法上\n   \t \tthis.userdao = userdao;\n    }\n}\n\n\n> 注：最好是将@resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。\n\n# 装配顺序：\n\n①如果同时指定了name和type，则从spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。\n\n②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。\n\n③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。\n\n④如果既没有指定name，又没有指定type，则自动按照byname方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。\n\n@resource的作用相当于@autowired，只不过@autowired按照bytype自动注入。\n\n\n# 4、依赖注入的方式有几种，各是什么?\n\n一、构造器注入 将被依赖对象通过构造函数的参数注入给依赖对象，并且在初始化对象的时候注入。\n\n优点： 对象初始化完成后便可获得可使用的对象。\n\n缺点： 当需要注入的对象很多时，构造器参数列表将会很长； 不够灵活。若有多种注入方式，每种方式只需注入指定几个依赖，那么就需要提供多个重载的构造函数，麻烦。\n\n二、setter方法注入 ioc service provider通过调用成员变量提供的setter函数将被依赖对象注入给依赖类。\n\n优点： 灵活。可以选择性地注入需要的对象。\n\n缺点： 依赖对象初始化完成后由于尚未注入被依赖对象，因此还不能使用。\n\n三、接口注入 依赖类必须要实现指定的接口，然后实现该接口中的一个函数，该函数就是用于依赖注入。该函数的参数就是要注入的对象。\n\n优点 接口注入中，接口的名字、函数的名字都不重要，只要保证函数的参数是要注入的对象类型即可。\n\n缺点： 侵入行太强，不建议使用。\n\n> ps：什么是侵入行？ 如果类a要使用别人提供的一个功能，若为了使用这功能，需要在自己的类中增加额外的代码，这就是侵入性。\n\n\n# 5、讲一下什么是spring\n\nspring是一个轻量级的ioc和aop容器框架。是为java应用程序提供基础性服务的一套框架，目的是用于简化企业应用程序的开发，它使得开发者只需要关心业务需求。常见的配置方式有三种：基于 xml的配置、基于注解的配置、基于java的配置。\n\n主要由以下几个模块组成：\n\nspring core：核心类库，提供ioc服务；\n\nspring context：提供框架式的bean访问方式，以及企业级功能（jndi、定时任务等）；\n\nspring aop：aop服务；\n\nspring dao：对jdbc的抽象，简化了数据访问异常的处理；\n\nspring orm：对现有的orm框架的支持；\n\nspring web：提供了基本的面向web的综合特性，例如多方文件上传； spring mvc：提供面向web应用的model-view-controller实现。\n\n\n# 6、说说你对spring mvc的理解\n\n什么是mvc模式\n\nmvc：mvc是一种设计模式\n\nmvc的原理图\n\n# 分析：\n\nm-model 模型（完成业务逻辑：有javabean构成，service+dao+entity）\n\nv-view 视图（做界面的展示 jsp，html……）\n\nc-controller 控制器（接收请求—>调用模型—>根据结果派发页面）\n\nspringmvc是一个mvc的开源框架，springmvc=struts2+spring，springmvc就相当于是struts2加上sring的整合，但是这里有一个疑惑就是，springmvc和spring是什么样的关系呢？这个在百度百科上有一个很好的解释：意思是说，springmvc是spring的一个后续产品，其实就是spring在原有基础上，又提供了web应用的mvc模块，可以简单的把springmvc理解为是spring的一个模块\n\n（类似aop，ioc这样的模块），网络上经常会说springmvc和spring无缝集成，其实springmvc就是spring的一个子模块，所以根本不需要同spring进行整合。\n\n# 工作原理:\n\n\n\n1、 用户发送请求至前端控制器dispatcherservlet。\n\n2、 dispatcherservlet收到请求调用handlermapping处理器映射器。\n\n3、 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给dispatcherservlet。\n\n4、 dispatcherservlet调用handleradapter处理器适配器。\n\n5、 handleradapter经过适配调用具体的处理器(controller，也叫后端控制器)。\n\n6、 controller执行完成返回modelandview。\n\n7、 handleradapter将controller执行结果modelandview返回给dispatcherservlet。\n\n8、 dispatcherservlet将modelandview传给viewreslover视图解析器。\n\n9、 viewreslover解析后返回具体view。\n\n10、dispatcherservlet根据view进行渲染视图（即将模型数据填充至视图中）。\n\n11、 dispatcherservlet响应用户。\n\n# 组件说明：\n\n以下组件通常使用框架提供实现：\n\ndispatcherservlet：作为前端控制器，整个流程控制的中心，控制其它组件执行，统一调度，降低组件之间的耦合性，提高每个组件的扩展性。\n\nhandlermapping：通过扩展处理器映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\nhandladapter：通过扩展处理器适配器，支持更多类型的处理器。\n\nviewresolver：通过扩展视图解析器，支持更多类型的视图解析，例如：jsp、freemarker、pdf、 excel等。\n\n组件： 1、前端控制器dispatcherservlet（不需要工程师开发）,由框架提供\n\n作用：接收请求，响应结果，相当于转发器，中央处理器。有了dispatcherservlet减少了其它组件之间的耦合度。 用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherservlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherservlet的存在降低了组件之间的耦合性。\n\n2、处理器映射器handlermapping(不需要工程师开发),由框架提供\n\n作用：根据请求的url查找 handler handlermapping负责根据用户请求找到handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\n3、处理器适配器handleradapter\n\n作用：按照特定规则（handleradapter要求的规则）去执行 handler 通过handleradapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。\n\n**4、处理器handler(需要工程师开发) **\n\n注意：编写handler时按照handleradapter的要求去做，这样适配器才可以去正确执行handler ,handler 是继dispatcherservlet前端控制器的后端控制器，在dispatcherservlet的控制下handler对具体的用户请求进行处理。 由于handler涉及到具体的用户业务请求，所以一般情况需要工程师根据业务需求开发handler。\n\n5、视图解析器view resolver(不需要工程师开发),由框架提供\n\n作用：进行视图解析，根据逻辑视图名解析成真正的视图（view） view resolver负责将处理结果生成view视图，view resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成view视图对象，最后对view进行渲染将处理结果通过页面展示给用户。 springmvc框架提供了很多的view视图类型，包括：jstlview、 freemarkerview、pdfview等。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由工程师根据业务需求开发具体的页面。\n\n6、视图view(需要工程师开发jsp...)\n\nview是一个接口，实现类支持不同的view类型（jsp、 freemarker、pdf...）\n\n核心架构的具体流程步骤如下：\n\n1、首先用户发送请求——>dispatcherservlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；\n\n2、dispatcherservlet——>handlermapping， handlermapping 将会把请求映射为 handlerexecutionchain 对象（包含一个handler 处理器（页面控制器）对象、多个 handlerinterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略；\n\n3、 dispatcherservlet——>handleradapter，handleradapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；\n\n4、 handleradapter——>处理器功能处理方法的调用，handleradapter 将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个modelandview 对象（包含模型数据、逻辑视图名）；\n\n5、modelandview的逻辑视图名——> viewresolver， viewresolver 将把逻辑视图名解析为具体的view，通过这种策略模式，很容易更换其他视图技术；\n\n6、view——>渲染，view会根据传进来的model模型数据进行渲染，此处的model实际是一个map数据结构，因此很容易支持其他视图技术；\n\n7、返回控制权给dispatcherservlet，由dispatcherservlet返回响应给用户，到此一个流程结束。\n\n看到这些步骤我相信大家很感觉非常的乱，这是正常的，但是这里主要是要大家理解springmvc中的几个组件：\n\n * 前端控制器（dispatcherservlet）：接收请求，响应结果，相当于电脑的cpu。处理器映射器（handlermapping）：根据url去查找处理器。\n * 处理器（handler）：需要程序员去写代码处理逻辑的。\n * 处理器适配器（handleradapter）：会把处理器包装成适配器，这样就可以支持多种类型的处理器，类比笔记本的适配器（适配器模式的应用）。\n * 视图解析器（viewresovler）：进行视图解析，多返回的字符串，进行处理，可以解析成对应的页面\n\n\n# 7、 springmvc常用的注解有哪些？\n\n@requestmapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的方法都是以该地址作为父路径。\n\n@requestbody：注解实现接收http请求的json数据，将json转换为java对象。 @responsebody：注解实现将conreoller方法返回对象转化为json对象响应给客户。\n\n\n# 8、 谈谈你对spring的aop理解\n\naop（aspect-oriented programming，面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可扩展性和可维护性。\n\nspring aop是基于动态代理的，如果要代理的对象实现了某个接口，那么spring aop就会使用jdk动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用jdk动态代理，转而使用cglib动态代理生成一个被代理对象的子类来作为代理。 注意：图中的implements和extend。即一个是接口，一个是实现类。\n\n当然也可以使用aspectj，spring aop中已经集成了aspectj，aspectj应该算得上是java生态系统中最完整的aop框架了。使用aop之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样可以大大简化代码量。我们需要增加新功能也方便，提高了系统的扩展性。日志功 能、事务管理和权限管理等场景都用到了aop。\n\n\n# 9、spring aop和aspectj aop有什么区别？\n\nspring aop是属于运行时增强，而aspectj是编译时增强。spring aop基于代理（proxying），而 aspectj基于字节码操作（bytecode manipulation）。\n\nspring aop已经集成了aspectj，aspectj应该算得上是java生态系统中最完整的aop框架了。 aspectj相比于spring aop功能更加强大，但是spring aop相对来说更简单。\n\n如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择aspectj，它比\n\nspringaop快很多\n\n\n# 在spring aop 中，关注点和横切关注的区别是什么？\n\n关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。 横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。\n\n那什么是连接点呢？连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个aop切面，它实际上是个应用程序执行spring aop的位置。\n\n\n# 什么是通知呢？有哪些类型呢？\n\n通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过springaop框架触发的代码段。\n\nspring切面可以应用五种类型的通知：\n\n 1. before：前置通知，在一个方法执行前被调用。\n\n 2. after: 在方法执行之后调用的通知，无论方法执行是否成功。\n\n 3. after-returning: 仅当方法成功完成后执行的通知。 after-throwing: 在方法抛出异常退出时执行的通知。\n\n 4. around: 在方法执行之前和之后调用的通知\n\n\n# 10、说说你对spring的ioc是怎么理解的？\n\n（1） ioc就是控制反转，是指创建对象的控制权的转移。以前创建对象的主动权和时机是由自己把控的，而现在这种权力转移到spring容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系。对象与对象之间松散耦合，也利于功能的复用。di依赖注入，和控制反转是同一个概念的不同角度的描述，即 应用程序在运行时依赖ioc容器来动态注入对象需要的外部资源。\n\n（2） 最直观的表达就是，ioc让对象的创建不用去new了，可以由spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。\n\n（3） spring的ioc有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。\n\n> ioc让相互协作的组件保持松散的耦合，而aop编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件。\n\n\n# 11、解释一下spring bean的生命周期\n\n首先说一下servlet的生命周期：实例化，初始init，接收请求service，销毁destroy；\n\nspring上下文中的bean生命周期也类似，如下：\n\n * 实例化bean：\n\n对于beanfactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createbean进行实例化。对于applicationcontext容器，当容器启动结束后，通过获取beandeﬁnition对象中的信息，实例化所有的bean。\n\n * 设置对象属性（依赖注入）：\n\n实例化后的对象被封装在beanwrapper对象中，紧接着，spring根据beandeﬁnition中的信息 以及 通过beanwrapper提供的设置属性的接口完成依赖注入。\n\n * 处理aware接口：\n\n接着，spring会检测该对象是否实现了xxxaware接口，并将相关的xxxaware实例注入给bean：\n\n 1. 如果这个bean已经实现了beannameaware接口，会调用它实现的setbeanname(string beanid)方法，此处传递的就是spring配置文件中bean的id值；\n\n 2. 如果这个bean已经实现了beanfactoryaware接口，会调用它实现的setbeanfactory()方法，传递的是spring工厂自身。\n\n 3. 如果这个bean已经实现了applicationcontextaware接口，会调用setapplicationcontext(applicationcontext)方法，传入spring上下文；\n\n * beanpostprocessor：\n\n如果想对bean进行一些自定义的处理，那么可以让bean实现了beanpostprocessor接口，那将会调用postprocessbeforeinitialization(object obj, string s)方法。\n\n * initializingbean 与 init-method：\n\n如果bean在spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。\n\n * 如果这个bean实现了beanpostprocessor接口，将会调用 postprocessafterinitialization(object obj, string s)方法；由于这个方法是在bean初始化结束时调用的，所以可以被应用于内存或缓存技术；\n\n以上几个步骤完成后，bean就已经被正确创建了，之后就可以使用这个bean了。\n\n * disposablebean：\n\n当bean不再需要时，会经过清理阶段，如果bean实现了disposablebean这个接口，会调用其实现的destroy()方法；\n\n * destroy-method：\n\n最后，如果这个bean的spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法\n\n\n# 12、解释spring支持的几种bean的作用域？\n\nspring容器中的bean可以分为5个范围：\n\n（1） singleton：默认，每个容器中只有一个bean的实例，单例的模式由beanfactory自身来维护。\n\n（2） prototype：为每一个bean请求提供一个实例。\n\n（3） request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。\n\n（4） session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，\n\nbean会随之失效。\n\n（5） global-session：全局作用域，global-session和portlet应用相关。当你的应用部署在portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。全局作用域与servlet中的session作用域效果相同。\n\n\n# 13、 spring基于xml注入bean的几种方式?\n\n 1. set方法注入；\n 2. 构造器注入：①通过index设置参数的位置；②通过type设置参数类型；\n 3. 静态工厂注入；\n 4. 实例工厂；\n\n\n# 14、spring框架中都用到了哪些设计模式？\n\n简单工厂模式：spring 中的 beanfactory 就是简单工厂模式的体现。根据传入一个唯一的标识来获得 bean 对象，但是在传入参数后创建还是传入参数前创建，要根据具体情况来定。 工厂模式：spring 中的 factorybean 就是典型的工厂方法模式，实现了 factorybean 接口的 bean是一类叫做 factory 的 bean。其特点是，spring 在使用 getbean() 调用获得该 bean 时，会自动调用该 bean 的 getobject() 方法，所以返回的不是 factory 这个 bean，而是这个 bean.getojbect()方法的返回值。 单例模式：在 spring 中用到的单例模式有： scope="singleton" ，注册式单例模式，bean 存放于map 中。bean name 当做 key，bean 当做 value。 原型模式：在 spring 中用到的原型模式有： scope="prototype" ，每次获取的是通过克隆生成的新实例，对其进行修改时对原有实例对象不造成任何影响。 迭代器模式：在 spring 中有个 compositeiterator 实现了 iterator，iterable 接口和 iterator 接口，这两个都是迭代相关的接口。可以这么认为，实现了 iterable 接口，则表示某个对象是可被迭代的。iterator 接口相当于是一个迭代器，实现了 iterator 接口，等于具体定义了这个可被迭代的对象时如何进行迭代的。\n\n代理模式：spring 中经典的 aop，就是使用动态代理实现的，分 jdk 和 cglib 动态代理。 适配器模式：spring 中的 aop 中 advisoradapter 类，它有三个实现：methodbeforadviceadapter、afterreturnningadviceadapter、throwsadviceadapter。spring会根据不同的 aop 配置来使用对应的 advice，与策略模式不同的是，一个方法可以同时拥有多个advice。spring 存在很多以 adapter 结尾的，大多数都是适配器模式。 观察者模式：spring 中的 event 和 listener。spring 事件：applicationevent，该抽象类继承了eventobject 类，jdk 建议所有的事件都应该继承自 eventobject。spring 事件监听器：applicationlistener，该接口继承了 eventlistener 接口，jdk 建议所有的事件监听器都应该继承eventlistener。 模板模式：spring 中的 org.springframework.jdbc.core.jdbctemplate 就是非常经典的模板模式的应用，里面的 execute 方法，把整个算法步骤都定义好了。\n\n责任链模式：dispatcherservlet 中的 dodispatch() 方法中获取与请求匹配的处理器handlerexecutionchain，this.gethandler() 方法的处理使用到了责任链模式。\n\n\n# 15、说说spring 中 applicationcontext 和 beanfactory 的区别\n\n# 类图\n\n\n\n包目录不同\n\n 1. spring-beans.jar 中 org.springframework.beans.factory.beanfactory\n 2. spring-context.jar 中 org.springframework.context.applicationcontext\n\n# 国际化\n\nbeanfactory 是不支持国际化功能的，因为 beanfactory 没有扩展 spring 中 messageresource接口。相反，由于 applicationcontext 扩展了 messageresource 接口，因而具有消息处理的能力（i18n）。\n\n# 强大的事件机制（event）\n\n基本上牵涉到事件（event）方面的设计，就离不开观察者模式，applicationcontext 的事件机制主要通过 applicationevent 和 applicationlistener 这两个接口来提供的，和 java swing 中的事件机制一样。即当 applicationcontext 中发布一个事件时，所有扩展了 applicationlistener 的 bean都将接受到这个事件，并进行相应的处理。\n\n# 底层资源的访问\n\napplicationcontext 扩展了 resourceloader（资源加载器）接口，从而可以用来加载多个 resource，而 beanfactory 是没有扩展 resourceloader。\n\n# 对 web 应用的支持\n\n与 beanfactory 通常以编程的方式被创建，applicationcontext 能以声明的方式创建，如使用contextloader。当然你也可以使用 applicationcontext 的实现方式之一，以编程的方式创建 applicationcontext实例\n\n# 延迟加载\n\n 1. beanfactroy 采用的是延迟加载形式来注入 bean 的，即只有在使用到某个 bean 时(调用 getbean())，才对该 bean 进行加载实例化。这样，我们就不能发现一些存在的 spring 的配置问题。而 applicationcontext 则相反，它是在容器启动时，一次性创建了所有的 bean。这 样，在容器启动时，我们就可以发现 spring 中存在的配置错误。\n\n 2. beanfactory 和 applicationcontext 都支持 beanpostprocessor、 beanfactorypostprocessor 的使用。两者之间的区别是：beanfactory 需要手动注册，而 applicationcontext 则是自动注册。\n\n可以看到，applicationcontext 继承了 beanfactory，beanfactory 是 spring 中比较原始的 factory，它不支持 aop、web 等 spring 插件。而 applicationcontext 不仅包含了 beanfactory的所有功能，还支持 spring 的各种插件，还以一种面向框架的方式工作以及对上下文进行分层和实现继承。\n\nbeanfactory 是 spring 框架的基础设施，面向 spring 本身；而 applicationcontext 面向使用 spring 的开发者，相比 beanfactory 提供了更多面向实际应用的功能，几乎所有场合都可以直接使用 applicationcontext，而不是底层的 beanfactory。\n\n# 常用容器\n\nbeanfactory 类型的有 xmlbeanfactory，它可以根据 xml 文件中定义的内容，创建相应的\n\nbean。\n\napplicationcontext 类型的常用容器有：\n\n 1. classpathxmlapplicationcontext：从 classpath 的 xml 配置文件中读取上下文，并生成上下文定义。应用程序上下文从程序环境变量中取得。\n\n 2. filesystemxmlapplicationcontext：由文件系统中的 xml 配置文件读取上下文。\n\n 3. xmlwebapplicationcontext：由 web 应用的 xml 文件读取上下文。例如我们在 spring mvc\n\n使用的情况。\n\n\n# 16、spring 框架中的单例 bean 是线程安全的么？\n\nspring 框架并没有对单例 bean 进行任何多线程的封装处理。\n\n * 关于单例 bean 的线程安全和并发问题，需要开发者自行去搞定。\n * 单例的线程安全问题，并不是 spring 应该去关心的。spring 应该做的是，提供根据配置，创建单例 bean 或多例 bean 的功能。\n * 当然，但实际上，大部分的 spring bean 并没有可变的状态，所以在某种程度上说 spring 的单例 bean 是线程安全的。如果你的 bean 有多种状态的话，就需要自行保证线程安全。最浅显的解决办法，就是将多态 bean 的作用域（scope）由 singleton 变更为 prototype。\n\n\n# 17、spring 是怎么解决循环依赖的？\n\n\n\n整个流程大致如下：\n\n 1. 首先 a 完成初始化第一步并将自己提前曝光出来（通过 objectfactory 将自己提前曝光），在初始化的时候，发现自己依赖对象 b，此时就会去尝试 get(b)，这个时候发现 b 还没有被创建出来；\n\n 2. 然后 b 就走创建流程，在 b 初始化的时候，同样发现自己依赖 c，c 也没有被创建出来；\n\n 3. 这个时候 c 又开始初始化进程，但是在初始化的过程中发现自己依赖 a，于是尝试 get(a)。这个时候由于 a 已经添加至缓存中（一般都是添加至三级缓存 singletonfactories），通过 objectfactory 提前曝光，所以可以通过 objectfactory#getobject() 方法来拿到 a 对象。c 拿到 a 对象后顺利完成初始化，然后将自己添加到一级缓存中；\n\n 4. 回到 b，b 也可以拿到 c 对象，完成初始化，a 可以顺利拿到 b 完成初始化。到这里整个链路就已经完成了初始化过程了。\n\n关键字：三级缓存，提前曝光。\n\n\n# 18、说说事务的隔离级别\n\n * 未提交读(read uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据\n * 提交读(read committed)：只能读取到已经提交的数据。oracle等多数数据库默认都是该级别 (不重复读)\n * 可重复读(repeated read)：在同一个事务内的查询都是事务开始时刻一致的，mysql的innodb默认级别。在sql标准中，该隔离级别消除了不可重复读，但是还存在幻读（多个事务同时修改同一条记录，事务之间不知道彼此存在，当事务提交之后，后面的事务修改的数据将会覆盖前事务，前一个事务就像发生幻觉一样）\n * 可串行化(serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞。 不可重复读和幻读的区别主要是：解决不可重复读需要锁定了当前满足条件的记录，而解决幻读需要锁定当前满足条件的记录及相近的记录。比如查询某个商品的信息，可重复读事务隔离级别可以保证当前商品信息被锁定，解决不可重复读；但是如果统计商品个数，中途有记录插入，可重复读事务隔离级别就不能保证两个事务统计的个数相同。\n\n\n# 19、说说事务的传播级别\n\nspring事务定义了7种传播机制：\n\n 1. propagation_required:默认的spring事物传播级别，若当前存在事务，则加入该事务，若不存在事务，则新建一个事务。\n\n 2. paopagation_require_new:若当前没有事务，则新建一个事务。若当前存在事务，则新建一个事务，新老事务相互独立。外部事务抛出异常回滚不会影响内部事务的正常提交。\n\n 3. propagation_nested:如果当前存在事务，则嵌套在当前事务中执行。如果当前没有事务，则新建一个事务，类似于require_new。\n\n 4. propagation_supports:支持当前事务，若当前不存在事务，以非事务的方式执行。\n\n 5. propagation_not_supported:以非事务的方式执行，若当前存在事务，则把当前事务挂起。\n\n 6. propagation_mandatory:强制事务执行，若当前不存在事务，则抛出异常.\n\n 7. propagation_never:以非事务的方式执行，如果当前存在事务，则抛出异常。\n\nspring事务传播级别一般不需要定义，默认就是propagation_required，除非在嵌套事务的情况下需要重点了解。\n\n\n# 20、spring 事务实现方式\n\n 1. 编程式事务管理：这意味着你可以通过编程的方式管理事务，这种方式带来了很大的灵活性，但很难维护。\n 2. 声明式事务管理：这种方式意味着你可以将事务管理和业务代码分离。你只需要通过注解或者xml配置管理事务\n\n\n# 21、 spring框架的事务管理有哪些优点\n\n 1. 它为不同的事务api(如jta, jdbc, hibernate, jpa, 和jdo)提供了统一的编程模型。它为编程式事务管理提供了一个简单的api而非一系列复杂的事务api(如jta).它支持声明式事务管理。它可以和 spring 的多种数据访问技术很好的融合。\n 2. 它为不同的事务api(如jta, jdbc, hibernate, jpa, 和jdo)提供了统一的编程模型。它为编程式事务管理提供了一个简单的api而非一系列复杂的事务api(如jta).它支持声明式事务管理。它可以和 spring 的多种数据访问技术很好的融合。\n 3. 它为不同的事务api(如jta, jdbc, hibernate, jpa, 和jdo)提供了统一的编程模型。它为编程式事务管理提供了一个简单的api而非一系列复杂的事务api(如jta).它支持声明式事务管理。它可以和 spring 的多种数据访问技术很好的融合。\n\n\n# 22、事务三要素是什么？\n\n 1. 数据源：表示具体的事务性资源，是事务的真正处理者，如mysql等。\n 2. 事务管理器：像一个大管家，从整体上管理事务的处理过程，如打开、提交、回滚等。\n 3. 事务应用和属性配置：像一个标识符，表明哪些方法要参与事务，如何参与事务，以及一些相关属性如隔离级别、超时时间等。\n\n\n# 23、 事务注解的本质是什么？\n\n@transactional 这个注解仅仅是一些（和事务相关的）元数据，在运行时被事务基础设施读取消费，并使用这些元数据来配置bean的事务行为。 大致来说具有两方面功能，一是表明该方法要参与事务，二是配置相关属性来定制事务的参与方式和运行行为\n\n声明式事务主要是得益于spring aop。使用一个事务拦截器，在方法调用的前后/周围进行事务性增强（advice），来驱动事务完成。\n\n@transactional注解既可以标注在类上，也可以标注在方法上。当在类上时，默认应用到类里的所有方法。如果此时方法上也标注了，则方法上的优先级高。 另外注意方法一定要是public的。',charsets:{cjk:!0}},{title:"001.MyBatis篇001",frontmatter:{title:"001.MyBatis篇001",categories:["Java","Spring"],tags:["Java","Spring"],sidebar:"auto",article:!0,comment:!0,date:"2023-01-13T15:36:47.000Z",permalink:"/pages/b9285d/"},regularPath:"/07.Java/05.MyBatis%E7%AF%87/001.MyBatis%E7%AF%87001.html",relativePath:"07.Java/05.MyBatis篇/001.MyBatis篇001.md",key:"v-518c8a5c",path:"/pages/b9285d/",headers:[{level:2,title:"1、什么是MyBatis",slug:"_1、什么是mybatis",normalizedTitle:"1、什么是mybatis",charIndex:22},{level:2,title:"2、说说MyBatis的优点和缺点",slug:"_2、说说mybatis的优点和缺点",normalizedTitle:"2、说说mybatis的优点和缺点",charIndex:395},{level:4,title:"优点：",slug:"优点",normalizedTitle:"优点：",charIndex:416},{level:4,title:"缺点",slug:"缺点",normalizedTitle:"缺点",charIndex:410},{level:2,title:"3、#{}和${}的区别是什么？",slug:"_3、-和-的区别是什么",normalizedTitle:"3、#{}和${}的区别是什么？",charIndex:816},{level:2,title:"4、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？",slug:"_4、当实体类中的属性名和表中的字段名不一样-怎么办",normalizedTitle:"4、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？",charIndex:979},{level:2,title:"5、Mybatis是如何进行分页的？分页插件的原理是什么？",slug:"_5、mybatis是如何进行分页的-分页插件的原理是什么",normalizedTitle:"5、mybatis是如何进行分页的？分页插件的原理是什么？",charIndex:1746},{level:2,title:"6、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？",slug:"_6、mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式",normalizedTitle:"6、mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？",charIndex:2010},{level:2,title:"7、 如何执行批量插入？",slug:"_7、-如何执行批量插入",normalizedTitle:"7、 如何执行批量插入？",charIndex:2195},{level:2,title:"8、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？",slug:"_8、xml映射文件中-除了常见的select-insert-updae-delete标签之外-还有哪些标签",normalizedTitle:"8、xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？",charIndex:2988},{level:2,title:"9、MyBatis实现一对一有几种方式?具体怎么操作的？",slug:"_9、mybatis实现一对一有几种方式-具体怎么操作的",normalizedTitle:"9、mybatis实现一对一有几种方式?具体怎么操作的？",charIndex:3101},{level:2,title:"10、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？",slug:"_10、mybatis是否支持延迟加载-如果支持-它的实现原理是什么",normalizedTitle:"10、mybatis是否支持延迟加载？如果支持，它的实现原理是什么？",charIndex:3297},{level:2,title:"11、说说Mybatis的缓存机制:",slug:"_11、说说mybatis的缓存机制",normalizedTitle:"11、说说mybatis的缓存机制:",charIndex:3731},{level:4,title:"一级缓存localCache",slug:"一级缓存localcache",normalizedTitle:"一级缓存localcache",charIndex:3765},{level:4,title:"二级缓存",slug:"二级缓存",normalizedTitle:"二级缓存",charIndex:4292},{level:2,title:"12、JDBC 编程有哪些步骤？",slug:"_12、jdbc-编程有哪些步骤",normalizedTitle:"12、jdbc 编程有哪些步骤？",charIndex:4908},{level:2,title:"13、MyBatis 中见过什么设计模式？",slug:"_13、mybatis-中见过什么设计模式",normalizedTitle:"13、mybatis 中见过什么设计模式？",charIndex:5238},{level:2,title:"14、MyBatis中比如UserMapper.java是接口，为什么没有实现类还能调用？",slug:"_14、mybatis中比如usermapper-java是接口-为什么没有实现类还能调用",normalizedTitle:"14、mybatis中比如usermapper.java是接口，为什么没有实现类还能调用？",charIndex:5266}],headersStr:"1、什么是MyBatis 2、说说MyBatis的优点和缺点 优点： 缺点 3、#{}和${}的区别是什么？ 4、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？ 5、Mybatis是如何进行分页的？分页插件的原理是什么？ 6、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？ 7、 如何执行批量插入？ 8、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？ 9、MyBatis实现一对一有几种方式?具体怎么操作的？ 10、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？ 11、说说Mybatis的缓存机制: 一级缓存localCache 二级缓存 12、JDBC 编程有哪些步骤？ 13、MyBatis 中见过什么设计模式？ 14、MyBatis中比如UserMapper.java是接口，为什么没有实现类还能调用？",content:'# 001.MyBatis篇001\n\n\n# 1、什么是MyBatis\n\n 1. Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。\n 2. MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。\n 3. 通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。\n\n\n# 2、说说MyBatis的优点和缺点\n\n# 优点：\n\n（1） 基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。\n\n（2） 与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；\n\n（3） 很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。\n\n（4） 能够与Spring很好的集成；\n\n（5） 提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。\n\n# 缺点\n\n（1） SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。\n\n（2） SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。\n\n\n# 3、#{}和${}的区别是什么？\n\n#{}是预编译处理，${}是字符串替换。\n\nMybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值； Mybatis在处理${}时，就是把${}替换成变量的值。\n\n使用#{}可以有效的防止SQL注入，提高系统安全性。\n\n\n# 4、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？\n\n * 第1种： 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。\n\n<select id=”selectorder” parametertype=”int” resultetype=”me.gacl.domain.order”>\n\tselect order_id id, order_no orderno ,order_price price form orders where order_id=#{id};\n</select>\n\n\n * 第2种： 通过来映射字段名和实体类属性名的一一对应的关系。\n\n<select id="getOrder" parameterType="int" resultMap="orderresultmap">\n\tselect * from orders where order_id=#{id}\n</select>\n    <resultMap type=”me.gacl.domain.order” id=”orderresultmap”>\n        <!–用id属性来映射主键字段–>\n        <id property=”id” column=”order_id”>\n            \n        <!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–>\n        <result property = “orderno” column =”order_no”/>\n        <result property=”price” column=”order_price” />\n    </reslutMap>\n\n\n\n# 5、Mybatis是如何进行分页的？分页插件的原理是什么？\n\nMybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接拼写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页，比如：MySQL数据的时候，在原有SQL后面拼写limit。\n\n分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\n\n\n# 6、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？\n\n第一种是使用标签，逐一定义数据库列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列的别名书写为对象属性名。\n\n有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。\n\n\n# 7、 如何执行批量插入？\n\n首先,创建一个简单的insert语句:\n\n<insert id=”insertname”>\n\tinsert into names (name) values (#{value})\n</insert>\n\n\n然后在java代码中像下面这样执行批处理插入:\n\n    list<string> names = new arraylist();\n        names.add(“fred”);\n        names.add(“barney”);\n        names.add(“betty”);\n        names.add(“wilma”);\n        // 注意这里 executortype.batch\n        sqlsession sqlsession = sqlsessionfactory.opensession(executortype.batch);\n        try {\n       \t\t namemapper mapper = sqlsession.getmapper(namemapper.class);\n        for (string name : names) {\n       \t\t mapper.insertname(name);\n        }\n        \tsqlsession.commit();\n        }catch(Exception e){\n            e.printStackTrace();\n            sqlSession.rollback();\n        \tthrow e;\n    \t}\n        finally {\n       \t\t sqlsession.close();\n        }\n\n\n\n# 8、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？\n\n加上动态sql的9个标签，其中为sql片段标签，通过标签引入sql片段，为不支持自增的主键生成策略标签。\n\n\n# 9、MyBatis实现一对一有几种方式?具体怎么操作的？\n\n有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap里面配置\n\nassociation节点配置一对一的类就可以完成；\n\n嵌套查询是先查一个表，根据这个表里面的结果的 外键id，去再另外一个表里面查询数据,也是通过\n\nassociation配置，但另外一个表的查询通过select属性配置。\n\n\n# 10、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？\n\nMybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载 lazyLoadingEnabled=true|false。\n\n它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成 a.getB().getName()方法的调用。这就是延迟加载的基本原理。\n\n当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。\n\n\n# 11、说说Mybatis的缓存机制:\n\nMybatis整体：\n\n# 一级缓存localCache\n\n在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的 SQL， MyBatis 提供了一级缓存的方案优化这部分场景，如果是相同的 SQL 语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。\n\n每个 SqlSession 中持有了 Executor，每个 Executor 中有一个 LocalCache。当用户发起查询时， MyBatis 根据当前执行的语句生成 MappedStatement，在 Local Cache 进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入 Local Cache，最后返回结果给用户。具体实现类的类关系图如下图所示：\n\n 1. MyBatis 一级缓存的生命周期和 SqlSession 一致。\n\n 2. MyBatis 一级缓存内部设计简单，只是一个没有容量限定的 HashMap，在缓存的功能性上有所欠缺。\n\n 3. MyBatis 的一级缓存最大范围是 SqlSession 内部，有多个 SqlSession 或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为 Statement。\n\n# 二级缓存\n\n在上文中提到的一级缓存中，其最大的共享范围就是一个 SqlSession 内部，如果多个 SqlSession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用 CachingExecutor 装饰 Executor，进入一级缓存的查询流程前，先在 CachingExecutor 进行二级缓存的查询，具体的工作流程如下所示。\n\n二级缓存开启后，同一个 namespace 下的所有操作语句，都影响着同一个 Cache，即二级缓存被多个 SqlSession 共享，是一个全局的变量。\n\n> 当开启缓存后，数据的查询执行的流程为：二级缓存 -> 一级缓存 -> 数据库\n\n 1. MyBatis 的二级缓存相对于一级缓存来说，实现了 SqlSession 之间缓存数据的共享，同时粒度更加细，能够到 namespace 级别，通过 Cache 接口实现类不同的组合，对 Cache 的可控性也更强。\n\n 2. MyBatis 在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。\n\n 3. 在分布式环境下，由于默认的 MyBatis Cache 实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将 MyBatis 的 Cache 接口实现，有一定的开发成本，直接使用 Redis、Memcached 等分布式缓存可能成本更低，安全性也更高。\n\n\n# 12、JDBC 编程有哪些步骤？\n\n 1. 装载相应的数据库的 JDBC 驱动并进行初始化：\n\nClass.forName("com.mysql.jdbc.Driver");\n\n\n 2. 建立 JDBC 和数据库之间的 Connection 连接：\n\nConnection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/test?\ncharacterEncoding=UTF-8", "root", "123456");\n\n\n 3. 创建 Statement 或者 PreparedStatement 接口，执行 SQL 语句。\n 4. 处理和显示结果。\n 5. 释放资源。\n\n\n# 13、MyBatis 中见过什么设计模式？\n\n\n\n\n# 14、MyBatis中比如UserMapper.java是接口，为什么没有实现类还能调用？\n\n使用JDK动态代理+MapperProxy。本质上调用的是MapperProxy的invoke方法。',normalizedContent:'# 001.mybatis篇001\n\n\n# 1、什么是mybatis\n\n 1. mybatis是一个半orm（对象关系映射）框架，它内部封装了jdbc，开发时只需要关注sql语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。\n 2. mybatis 可以使用 xml 或注解来配置和映射原生信息，将 pojo映射成数据库中的记录，避免了几乎所有的 jdbc 代码和手动设置参数以及获取结果集。\n 3. 通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。\n\n\n# 2、说说mybatis的优点和缺点\n\n# 优点：\n\n（1） 基于sql语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，sql写在xml里，解除sql与程序代码的耦合，便于统一管理；提供xml标签，支持编写动态sql语句，并可重用。\n\n（2） 与jdbc相比，减少了50%以上的代码量，消除了jdbc大量冗余的代码，不需要手动开关连接；\n\n（3） 很好的与各种数据库兼容（因为mybatis使用jdbc来连接数据库，所以只要jdbc支持的数据库mybatis都支持）。\n\n（4） 能够与spring很好的集成；\n\n（5） 提供映射标签，支持对象与数据库的orm字段关系映射；提供对象关系映射标签，支持对象关系组件维护。\n\n# 缺点\n\n（1） sql语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写sql语句的功底有一定要求。\n\n（2） sql语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。\n\n\n# 3、#{}和${}的区别是什么？\n\n#{}是预编译处理，${}是字符串替换。\n\nmybatis在处理#{}时，会将sql中的#{}替换为?号，调用preparedstatement的set方法来赋值； mybatis在处理${}时，就是把${}替换成变量的值。\n\n使用#{}可以有效的防止sql注入，提高系统安全性。\n\n\n# 4、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？\n\n * 第1种： 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。\n\n<select id=”selectorder” parametertype=”int” resultetype=”me.gacl.domain.order”>\n\tselect order_id id, order_no orderno ,order_price price form orders where order_id=#{id};\n</select>\n\n\n * 第2种： 通过来映射字段名和实体类属性名的一一对应的关系。\n\n<select id="getorder" parametertype="int" resultmap="orderresultmap">\n\tselect * from orders where order_id=#{id}\n</select>\n    <resultmap type=”me.gacl.domain.order” id=”orderresultmap”>\n        <!–用id属性来映射主键字段–>\n        <id property=”id” column=”order_id”>\n            \n        <!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–>\n        <result property = “orderno” column =”order_no”/>\n        <result property=”price” column=”order_price” />\n    </reslutmap>\n\n\n\n# 5、mybatis是如何进行分页的？分页插件的原理是什么？\n\nmybatis使用rowbounds对象进行分页，它是针对resultset结果集执行的内存分页，而非物理分页。可以在sql内直接拼写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页，比如：mysql数据的时候，在原有sql后面拼写limit。\n\n分页插件的基本原理是使用mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\n\n\n# 6、mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？\n\n第一种是使用标签，逐一定义数据库列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列的别名书写为对象属性名。\n\n有了列名与属性名的映射关系后，mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。\n\n\n# 7、 如何执行批量插入？\n\n首先,创建一个简单的insert语句:\n\n<insert id=”insertname”>\n\tinsert into names (name) values (#{value})\n</insert>\n\n\n然后在java代码中像下面这样执行批处理插入:\n\n    list<string> names = new arraylist();\n        names.add(“fred”);\n        names.add(“barney”);\n        names.add(“betty”);\n        names.add(“wilma”);\n        // 注意这里 executortype.batch\n        sqlsession sqlsession = sqlsessionfactory.opensession(executortype.batch);\n        try {\n       \t\t namemapper mapper = sqlsession.getmapper(namemapper.class);\n        for (string name : names) {\n       \t\t mapper.insertname(name);\n        }\n        \tsqlsession.commit();\n        }catch(exception e){\n            e.printstacktrace();\n            sqlsession.rollback();\n        \tthrow e;\n    \t}\n        finally {\n       \t\t sqlsession.close();\n        }\n\n\n\n# 8、xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？\n\n加上动态sql的9个标签，其中为sql片段标签，通过标签引入sql片段，为不支持自增的主键生成策略标签。\n\n\n# 9、mybatis实现一对一有几种方式?具体怎么操作的？\n\n有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultmap里面配置\n\nassociation节点配置一对一的类就可以完成；\n\n嵌套查询是先查一个表，根据这个表里面的结果的 外键id，去再另外一个表里面查询数据,也是通过\n\nassociation配置，但另外一个表的查询通过select属性配置。\n\n\n# 10、mybatis是否支持延迟加载？如果支持，它的实现原理是什么？\n\nmybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在mybatis配置文件中，可以配置是否启用延迟加载 lazyloadingenabled=true|false。\n\n它的原理是，使用cglib创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getb().getname()，拦截器invoke()方法发现a.getb()是null值，那么就会单独发送事先保存好的查询关联b对象的sql，把b查询上来，然后调用a.setb(b)，于是a的对象b属性就有值了，接着完成 a.getb().getname()方法的调用。这就是延迟加载的基本原理。\n\n当然了，不光是mybatis，几乎所有的包括hibernate，支持延迟加载的原理都是一样的。\n\n\n# 11、说说mybatis的缓存机制:\n\nmybatis整体：\n\n# 一级缓存localcache\n\n在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的 sql， mybatis 提供了一级缓存的方案优化这部分场景，如果是相同的 sql 语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。\n\n每个 sqlsession 中持有了 executor，每个 executor 中有一个 localcache。当用户发起查询时， mybatis 根据当前执行的语句生成 mappedstatement，在 local cache 进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入 local cache，最后返回结果给用户。具体实现类的类关系图如下图所示：\n\n 1. mybatis 一级缓存的生命周期和 sqlsession 一致。\n\n 2. mybatis 一级缓存内部设计简单，只是一个没有容量限定的 hashmap，在缓存的功能性上有所欠缺。\n\n 3. mybatis 的一级缓存最大范围是 sqlsession 内部，有多个 sqlsession 或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为 statement。\n\n# 二级缓存\n\n在上文中提到的一级缓存中，其最大的共享范围就是一个 sqlsession 内部，如果多个 sqlsession之间需要共享缓存，则需要使用到二级缓存。开启二级缓存后，会使用 cachingexecutor 装饰 executor，进入一级缓存的查询流程前，先在 cachingexecutor 进行二级缓存的查询，具体的工作流程如下所示。\n\n二级缓存开启后，同一个 namespace 下的所有操作语句，都影响着同一个 cache，即二级缓存被多个 sqlsession 共享，是一个全局的变量。\n\n> 当开启缓存后，数据的查询执行的流程为：二级缓存 -> 一级缓存 -> 数据库\n\n 1. mybatis 的二级缓存相对于一级缓存来说，实现了 sqlsession 之间缓存数据的共享，同时粒度更加细，能够到 namespace 级别，通过 cache 接口实现类不同的组合，对 cache 的可控性也更强。\n\n 2. mybatis 在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。\n\n 3. 在分布式环境下，由于默认的 mybatis cache 实现都是基于本地的，分布式环境下必然会出现读取到脏数据，需要使用集中式缓存将 mybatis 的 cache 接口实现，有一定的开发成本，直接使用 redis、memcached 等分布式缓存可能成本更低，安全性也更高。\n\n\n# 12、jdbc 编程有哪些步骤？\n\n 1. 装载相应的数据库的 jdbc 驱动并进行初始化：\n\nclass.forname("com.mysql.jdbc.driver");\n\n\n 2. 建立 jdbc 和数据库之间的 connection 连接：\n\nconnection c = drivermanager.getconnection("jdbc:mysql://127.0.0.1:3306/test?\ncharacterencoding=utf-8", "root", "123456");\n\n\n 3. 创建 statement 或者 preparedstatement 接口，执行 sql 语句。\n 4. 处理和显示结果。\n 5. 释放资源。\n\n\n# 13、mybatis 中见过什么设计模式？\n\n\n\n\n# 14、mybatis中比如usermapper.java是接口，为什么没有实现类还能调用？\n\n使用jdk动态代理+mapperproxy。本质上调用的是mapperproxy的invoke方法。',charsets:{cjk:!0}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-70767908",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-74fdeb5c",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-00210ffc",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Home",frontmatter:{home:!0,heroImage:"/img/logo.png",heroText:"vuepress-theme-vdoing",tagline:"🚀一款简洁高效的VuePress 知识管理",actionText:"开始使用 →",actionLink:"/pages/a2f161/",bannerBg:"none",features:[{title:"知识管理",details:"包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台"},{title:"简洁高效",details:"以 Markdown 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点"},{title:"沉浸式阅读",details:"专为阅读设计的UI，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-0ef24a56",path:"/",headers:[{level:2,title:"🎖特别用户",slug:"🎖特别用户",normalizedTitle:"🎖特别用户",charIndex:2},{level:2,title:"🎉上新推荐",slug:"🎉上新推荐",normalizedTitle:"🎉上新推荐",charIndex:620}],headersStr:"🎖特别用户 🎉上新推荐",content:"# 🎖特别用户\n\nMyBatis-Plus官网\n\n🚀为简化开发而生\n\nDeepin 社区\n\nDeepin 应用开发技术分享、DTK开发经验等\n\nVForm官网\n\n低代码表单优选方案，拖拽式设计，一键生成源码\n\n# - name: OpenHarmony\n#   desc: 开放原子开源基金会\n#   link: https://docs.openharmony.cn/pages/000000/\n#   bgColor: '#f1f1f1'\n#   textColor: '#2A3344'\n- name: MyBatis-Plus官网\n  desc: 🚀为简化开发而生\n  link: https://baomidou.com/\n  bgColor: '#f1f1f1'\n  textColor: '#2A3344'\n- name: Deepin 社区\n  desc: Deepin 应用开发技术分享、DTK开发经验等\n  link: https://docs.deepin.org\n  bgColor: '#f1f1f1'\n  textColor: '#2A3344'\n- name: VForm官网\n  desc: 低代码表单优选方案，拖拽式设计，一键生成源码\n  link: http://www.vform666.com\n  bgColor: '#f1f1f1'\n  textColor: '#2A3344'\n\n\n\n\n# 🎉上新推荐\n\n * v1.12.x\n   * 新增配置项pageStyle，用于切换页面的风格样式，可选卡片、 线条风格。详情\n   * 新增配置项bodyBgImgInterval，用于在设置了多张背景大图时修改大图切换的时间间隔。详情\n   * 新增配置项defaultMode，用于修改默认外观模式(v1.12.3)。详情\n * v1.11.x：新增配置项extendFrontmatter，用于扩展自动生成front matter。详情\n * v1.10.x：新增右侧目录栏对h2~h6标题的适配，并优化了UI，详情。\n * v1.9.x：新增配置文件对TypeScript的支持，参考config.ts。新增标题标记。\n * v1.8.x：新增 Markdown中使用的组件：代码块选项卡 。\n * v1.7.x：新增 自定义html模块 配置，可用于插入广告模块。\n * v1.6.x：支持四级目录，提高站点结构可塑性。\n * v1.5.x：新增笔记容器，轻松插入笔记框。\n * v1.4.x：新增了文章内容区块的 背景底纹配置，让你的文章看起来像笔记本的风格~\n * v1.2.x：这个版本对整体的UI细节做了很多优化，比如标签栏和分类栏等\n * v1.1.x：从这个版本开始主题新增超好用、高颜值的Markdown容器，快去 体验 吧~\n\n更多上新请查阅：更新日志\n\n",normalizedContent:"# 🎖特别用户\n\nmybatis-plus官网\n\n🚀为简化开发而生\n\ndeepin 社区\n\ndeepin 应用开发技术分享、dtk开发经验等\n\nvform官网\n\n低代码表单优选方案，拖拽式设计，一键生成源码\n\n# - name: openharmony\n#   desc: 开放原子开源基金会\n#   link: https://docs.openharmony.cn/pages/000000/\n#   bgcolor: '#f1f1f1'\n#   textcolor: '#2a3344'\n- name: mybatis-plus官网\n  desc: 🚀为简化开发而生\n  link: https://baomidou.com/\n  bgcolor: '#f1f1f1'\n  textcolor: '#2a3344'\n- name: deepin 社区\n  desc: deepin 应用开发技术分享、dtk开发经验等\n  link: https://docs.deepin.org\n  bgcolor: '#f1f1f1'\n  textcolor: '#2a3344'\n- name: vform官网\n  desc: 低代码表单优选方案，拖拽式设计，一键生成源码\n  link: http://www.vform666.com\n  bgcolor: '#f1f1f1'\n  textcolor: '#2a3344'\n\n\n\n\n# 🎉上新推荐\n\n * v1.12.x\n   * 新增配置项pagestyle，用于切换页面的风格样式，可选卡片、 线条风格。详情\n   * 新增配置项bodybgimginterval，用于在设置了多张背景大图时修改大图切换的时间间隔。详情\n   * 新增配置项defaultmode，用于修改默认外观模式(v1.12.3)。详情\n * v1.11.x：新增配置项extendfrontmatter，用于扩展自动生成front matter。详情\n * v1.10.x：新增右侧目录栏对h2~h6标题的适配，并优化了ui，详情。\n * v1.9.x：新增配置文件对typescript的支持，参考config.ts。新增标题标记。\n * v1.8.x：新增 markdown中使用的组件：代码块选项卡 。\n * v1.7.x：新增 自定义html模块 配置，可用于插入广告模块。\n * v1.6.x：支持四级目录，提高站点结构可塑性。\n * v1.5.x：新增笔记容器，轻松插入笔记框。\n * v1.4.x：新增了文章内容区块的 背景底纹配置，让你的文章看起来像笔记本的风格~\n * v1.2.x：这个版本对整体的ui细节做了很多优化，比如标签栏和分类栏等\n * v1.1.x：从这个版本开始主题新增超好用、高颜值的markdown容器，快去 体验 吧~\n\n更多上新请查阅：更新日志\n\n",charsets:{cjk:!0}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"指南",link:"/pages/a2f161/",items:[{text:"主题初衷与诞生",link:"/pages/52d5c3/"},{text:"介绍",link:"/pages/a2f161/"},{text:"快速上手",link:"/pages/793dcb/"},{text:"目录结构",link:"/pages/2f674a/"},{text:"核心配置和约定",link:"/pages/33d574/"},{text:"自动生成front matter",link:"/pages/088c16/"},{text:"Markdown 容器",link:"/pages/d0d7eb/"},{text:"Markdown 中使用组件",link:"/pages/197691/"},{text:"相关文章",items:[{text:"使目录栏支持h2~h6标题",link:"/pages/8dfab5/"},{text:"如何让你的笔记更有表现力",link:"/pages/dd027d/"},{text:"批量操作front matter工具",link:"/pages/2b8e22/"},{text:"部署",link:"/pages/0fc1d2/"},{text:"关于写文章和H1标题",link:"/pages/9ae0bd/"},{text:"关于博客搭建与管理",link:"/pages/26997d/"},{text:"在线编辑和新增文章的方法",link:"/pages/c5a54d/"}]}]},{text:"配置",link:"/pages/a20ce8/",items:[{text:"主题配置",link:"/pages/a20ce8/"},{text:"首页配置",link:"/pages/f14bdb/"},{text:"front matter配置",link:"/pages/3216b0/"},{text:"目录页配置",link:"/pages/54651a/"},{text:"添加摘要",link:"/pages/1cc523/"},{text:"修改主题颜色和样式",link:"/pages/f51918/"},{text:"评论栏",link:"/pages/ce175c/"}]},{text:"资源",link:"/pages/db78e2/"},{text:"案例",link:"/pages/5d571c/"},{text:"问答",link:"/pages/9cc27d/"},{text:"赞助",link:"/pages/1b12ed/"}],sidebarDepth:2,logo:"/img/logo.png",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.test1/":[{title:"指南",collapsable:!1,children:[["01.指南/01.主题初衷与诞生.md","主题初衷与诞生","/pages/52d5c3"],["01.指南/02.介绍.md","介绍","/pages/a2f161"],["01.指南/03.快速上手.md","快速上手","/pages/793dcb"],["01.指南/04.目录结构.md","目录结构","/pages/2f674a"],["01.指南/05.核心配置和约定.md","构建结构化站点的核心配置和约定","/pages/33d574"],["01.指南/06.自动生成front matter.md","自动生成front matter","/pages/088c16"],["01.指南/07.Markdown 容器.md","Markdown 容器","/pages/d0d7eb/"],["01.指南/08.Markdown 中使用组件.md","Markdown 中使用组件","/pages/197691/"],["01.指南/09.主题初衷与诞生 copy 2.md","09.主题初衷与诞生 copy","/pages/2721d5/"],["01.指南/10.主题初衷与诞生 copy.md","10.主题初衷与诞生 copy","/pages/e19315/"]]},{title:"相关文章",collapsable:!1,children:[["02.相关文章/03.使目录栏支持h2~h6标题.md","使目录栏支持h2~h6标题","/pages/8dfab5/"],["02.相关文章/06.如何让你的笔记更有表现力.md","如何让你的笔记更有表现力","/pages/dd027d/"],["02.相关文章/07.批量操作front matter工具.md","批量操作front matter工具","/pages/2b8e22"],["02.相关文章/08.部署.md","部署","/pages/0fc1d2"],["02.相关文章/09.关于写文章和一级标题.md","关于写文章和一级标题","/pages/9ae0bd"],["02.相关文章/10.关于博客搭建与管理.md","关于博客搭建与管理","/pages/26997d"],["02.相关文章/11.在线编辑和新增文章的方法.md","在线编辑和新增文章的方法","/pages/c5a54d"]]}],catalogue:{},"/02.test12/":[{title:"配置",collapsable:!1,children:[["01.配置/01.主题配置.md","主题配置","/pages/a20ce8"],["01.配置/02.首页配置.md","首页配置","/pages/f14bdb"],["01.配置/03.front matter配置.md","front matter配置","/pages/3216b0"],["01.配置/04.目录页配置.md","目录页配置","/pages/54651a"],["01.配置/05.添加摘要.md","添加摘要","/pages/1cc523"],["01.配置/06.修改主题颜色和样式.md","修改主题颜色和样式","/pages/f51918"],["01.配置/07.评论栏.md","评论栏","/pages/ce175c"]]}],"/03.test123/":[["01.资源.md","资源","/pages/db78e2"]],"/04.test1234/":[["01.案例.md","案例","/pages/5d571c"]],"/05.test12345/":[["01.问答.md","问答","/pages/9cc27d"]],"/06.test12345/":[["01.赞助.md","支持这个项目","/pages/1b12ed"]],"/07.Java/":[{title:"基础篇",collapsable:!1,children:[["01.基础篇/001.基础篇001.md","001.基础篇001","/pages/0d3040/"],["01.基础篇/002.基础篇002.md","002.基础篇002","/pages/cd3bc7/"],["01.基础篇/003.基础篇003.md","003.基础篇003","/pages/f7bc57/"]]},{title:"JVM篇",collapsable:!1,children:[["02.JVM篇/001.JVM001.md","001.JVM001","/pages/d236d6/"],["02.JVM篇/002.JVM002.md","002.JVM002","/pages/723756/"]]},{title:"多线程&并发篇",collapsable:!1,children:[["03.多线程&并发篇/001.多线程&并发篇001.md","001.多线程&并发篇001","/pages/7c6a10/"],["03.多线程&并发篇/002.多线程&并发篇002.md","002.多线程&并发篇002","/pages/35e1a9/"],["03.多线程&并发篇/003.多线程&并发篇003.md","003.多线程&并发篇003","/pages/9a2810/"]]},{title:"Spring篇",collapsable:!1,children:[["04.Spring篇/001.Spring篇001.md","001.Spring篇001","/pages/d9fe94/"]]},{title:"MyBatis篇",collapsable:!1,children:[["05.MyBatis篇/001.MyBatis篇001.md","001.MyBatis篇001","/pages/b9285d/"]]}]},updateBar:{showToArticle:!1},pageStyle:"line",category:!0,tag:!0,author:{name:"云少"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:2071916845@qq.com"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=755597173"}]},footer:{createYear:2023},htmlModules:{}}};var jl=t(95),kl=t(96),_l=t(11);var Cl={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:a}}=n;return!(e||!1===t||!0===a)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,a=e.frontmatter.sticky;return t&&a?t==a?Object(_l.a)(n,e):t-a:t&&!a?-1:!t&&a?1:Object(_l.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(_l.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let a=0,r=n.length;a<r;a++){const{frontmatter:{categories:r,tags:i}}=n[a];"array"===Object(_l.n)(r)&&r.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[a]))}),"array"===Object(_l.n)(i)&&i.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[a]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ut.component(jl.default),Ut.component(kl.default);function Sl(n){return n.toString().padStart(2,"0")}t(244);Ut.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,373))),Ut.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,95))),Ut.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,96)));t(245);var Tl={name:"GoTop",data:()=>({visibilityHeight:500,catStyle:"hide-cat"}),mounted(){window.addEventListener("scroll",this.handleScroll,!0)},destroyed(){window.removeEventListener("scroll",this.handleScroll)},methods:{handleScroll(){this.catStyle=this.getScrollTop()>this.visibilityHeight?"show-cat":"hide-cat"},getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,goTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},zl=(t(246),Object(bl.a)(Tl,(function(){return(0,this._self._c)("div",{class:this.catStyle,attrs:{id:"goTop"},on:{click:this.goTop}})}),[],!1,null,"bf92849a",null).exports),Al=[({Vue:n,options:e,router:t,siteData:a,isServer:r})=>{r||t.afterEach(()=>{var n;n=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content");n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(n,1):document.addEventListener("DOMContentLoaded",n),setTimeout(()=>{const n=document.querySelector(".page-wwads");if(!n)return;const e=n.querySelector(".wwads-hide");e&&(e.onclick=()=>{n.style.display="none"}),"none"===n.style.display&&(n.style.display="flex")},900)})},({Vue:n,options:e,router:t,siteData:a})=>{a.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${Sl(n.getUTCMonth()+1)}-${Sl(n.getUTCDate())} ${Sl(n.getUTCHours())}:${Sl(n.getUTCMinutes())}:${Sl(n.getUTCSeconds())}`}(e)),t?n.author=t:a.themeConfig.author&&(n.author=a.themeConfig.author)}),n.mixin(Cl)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:n})=>{n.component("GoTop",zl)},({router:n})=>{"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},()=>{"undefined"!=typeof window&&function(n,e,t){function a(n){var t=e.createElement("div");t.className="heart",r.push({el:t,x:n.clientX-5,y:n.clientY-5,scale:1,alpha:1,color:"#11a8cd"}),e.body.appendChild(t)}var r=[];n.requestAnimationFrame=n.requestAnimationFrame||n.webkitRequestAnimationFrame||n.mozRequestAnimationFrame||n.oRequestAnimationFrame||n.msRequestAnimationFrame||function(n){setTimeout(n,1e3/60)},function(n){var t=e.createElement("style");t.type="text/css";try{t.appendChild(e.createTextNode(n))}catch(e){t.styleSheet.cssText=n}e.getElementsByTagName("head")[0].appendChild(t)}(".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"),function(){var e="function"==typeof n.onclick&&n.onclick;n.onclick=function(n){let t=!0;n.path&&n.path.forEach(n=>{1===n.nodeType&&"string"==typeof n.className&&n.className.indexOf("theme-vdoing-content")>-1&&(t=!1)}),t&&(e&&e(),a(n))}}(),function n(){for(var t=0;t<r.length;t++)r[t].alpha<=0?(e.body.removeChild(r[t].el),r.splice(t,1)):(r[t].y--,r[t].scale+=.004,r[t].alpha-=.013,r[t].el.style.cssText="left:"+r[t].x+"px;top:"+r[t].y+"px;opacity:"+r[t].alpha+";transform:scale("+r[t].scale+","+r[t].scale+") rotate(45deg);background:"+r[t].color+";z-index:99999");requestAnimationFrame(n)}()}(window,document)},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],El=["GoTop"];class Il extends class{constructor(){this.store=new Ut({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Ut.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Il.prototype,{getPageAsyncComponent:os,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:cs});var Ml={install(n){const e=new Il;n.$vuepress=e,n.prototype.$vuepress=e}};function Ol(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Bl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ps("pageKey",e),Ut.component(e)||Ut.component(e,os(e)),Ut.component(e)?n(e):n("")}},Pl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Jl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ll=(t(247),t(248),Object(bl.a)(Jl,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Dl={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Ut.config.productionTip=!1,Ut.use(Ho),Ut.use(Ml),Ut.mixin(function(n,e,t=Ut){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const a=new(n(t.$vuepress.$get("siteData"))),r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),i={};return Object.keys(r).reduce((n,e)=>(e.startsWith("$")&&(n[e]=r[e].get),n),i),{computed:i}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const a in n)"/"===a?t=n[a]:0===this.$page.path.indexOf(a)&&(e=n[a]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,a=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?a?a+" | "+t:t:a||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const a=n[t];if(a.path.toLowerCase()===e.toLowerCase())return a}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},wl)),Ut.component("Content",Bl),Ut.component("ContentSlotsDistributor",Pl),Ut.component("OutboundLink",Ll),Ut.component("ClientOnly",Dl),Ut.component("Layout",ss("Layout")),Ut.component("NotFound",ss("NotFound")),Ut.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.9",hash:""},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:wl.routerBase||wl.base,t=new Ho({base:e,mode:"history",fallback:!1,routes:xl,scrollBehavior:(n,e,t)=>t||(n.hash?!Ut.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,a)=>{if(Ol(n,e.path))a();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Ol(n,t)?a(t):a()}else a();else{const t=e.path+"/",r=e.path+".html";Ol(n,r)?a(r):Ol(n,t)?a(t):a()}})}(t);const a={};try{await Promise.all(Al.filter(n=>"function"==typeof n).map(e=>e({Vue:Ut,options:a,router:t,siteData:wl,isServer:n})))}catch(n){console.error(n)}return{app:new Ut(Object.assign(a,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},El.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);