(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{361:function(a,s,t){"use strict";t.r(s);var e=t(3),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"基础篇003"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础篇003"}},[a._v("#")]),a._v(" 基础篇003")]),a._v(" "),s("h2",{attrs:{id:"_31、说说list-set-map三者的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31、说说list-set-map三者的区别"}},[a._v("#")]),a._v(" 31、说说List,Set,Map三者的区别？")]),a._v(" "),s("ul",[s("li",[a._v("List(对付顺序的好帮手)： List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象")]),a._v(" "),s("li",[a._v("Set(注重独一无二的性质): 不允许重复的集合。不会有多个元素引用相同的对象。")]),a._v(" "),s("li",[a._v("Map(用Key来搜索的专家): 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。")])]),a._v(" "),s("h2",{attrs:{id:"_32-、object-有哪些常用方法-大致说一下每个方法的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-、object-有哪些常用方法-大致说一下每个方法的含义"}},[a._v("#")]),a._v(" 32.、Object 有哪些常用方法？大致说一下每个方法的含义")]),a._v(" "),s("h3",{attrs:{id:"java-lang-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-object"}},[a._v("#")]),a._v(" java.lang.Object")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://npm.elemecdn.com/@it985/docsimages/001/java.lang.Object.png",alt:"java.lang.Object"}})]),a._v(" "),s("p",[a._v("下面是对应方法的含义。")]),a._v(" "),s("h4",{attrs:{id:"clone-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clone-方法"}},[a._v("#")]),a._v(" clone 方法")]),a._v(" "),s("p",[a._v("保护方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出CloneNotSupportedException 异常，深拷贝也需要实现 Cloneable，同时其成员变量为引用类型的也需要实现 Cloneable，然后重写 clone 方法。")]),a._v(" "),s("h4",{attrs:{id:"finalize-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finalize-方法"}},[a._v("#")]),a._v(" finalize 方法")]),a._v(" "),s("p",[a._v("该方法和垃圾收集器有关系，判断一个对象是否可以被回收的最后一步就是判断是否重写了此方法。")]),a._v(" "),s("h4",{attrs:{id:"equals-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals-方法"}},[a._v("#")]),a._v(" equals 方法")]),a._v(" "),s("p",[a._v("该方法使用频率非常高。一般 equals 和 == 是不一样的，但是在 Object 中两者是一样的。子类一般都要重写这个方法。")]),a._v(" "),s("h4",{attrs:{id:"hashcode-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-方法"}},[a._v("#")]),a._v(" hashCode 方法")]),a._v(" "),s("p",[a._v("该方法用于哈希查找，重写了 equals 方法一般都要重写 hashCode 方法，这个方法在一些具有哈希功能的 Collection 中用到。\n一般必须满足 obj1.equals(obj2)==true 。可以推出 obj1.hashCode()==obj2.hashCode() ，但是hashCode 相等不一定就满足 equals。不过为了提高效率，应该尽量使上面两个条件接近等价。")]),a._v(" "),s("ul",[s("li",[a._v("JDK 1.6、1.7 默认是返回随机数；")]),a._v(" "),s("li",[a._v("JDK 1.8 默认是通过和当前线程有关的一个随机数 + 三个确定值，运用 Marsaglia’s xorshift scheme 随机数算法得到的一个随机数。")])]),a._v(" "),s("h4",{attrs:{id:"wait-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-方法"}},[a._v("#")]),a._v(" wait 方法")]),a._v(" "),s("p",[a._v("配合 synchronized 使用，wait 方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait() 方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。调用该方法后当前线程进入睡眠状态，直到以下事件发生。")]),a._v(" "),s("ol",[s("li",[a._v("其他线程调用了该对象的 notify 方法；")]),a._v(" "),s("li",[a._v("其他线程调用了该对象的 notifyAll 方法；")]),a._v(" "),s("li",[a._v("其他线程调用了 interrupt 中断该线程；")]),a._v(" "),s("li",[a._v("时间间隔到了。\n此时该线程就可以被调度了，如果是被中断的话就抛出一个 InterruptedException 异常。")])]),a._v(" "),s("h4",{attrs:{id:"notify-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notify-方法"}},[a._v("#")]),a._v(" notify 方法")]),a._v(" "),s("p",[a._v("配合 synchronized 使用，该方法唤醒在该对象上等待队列中的某个线程（同步队列中的线程是给抢占 CPU 的线程，等待队列中的线程指的是等待唤醒的线程）。")]),a._v(" "),s("h4",{attrs:{id:"notifyall-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifyall-方法"}},[a._v("#")]),a._v(" notifyAll 方法")]),a._v(" "),s("p",[a._v("配合 synchronized 使用，该方法唤醒在该对象上等待队列中的所有线程。")]),a._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("p",[a._v("只要把上面几个方法熟悉就可以了，toString 和 getClass 方法可以不用去讨论它们。该题目考察的是对 Object 的熟悉程度，平时用的很多方法并没看其定义但是也在用，比如说：wait() 方法，equals() 方法等。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" is the root of the "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("hierarchy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Every")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" has "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" as a\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("superclass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v(" All")]),a._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" including arrays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" implement the methods of "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n")])])]),s("p",[a._v("大致意思：Object 是所有类的根，是所有类的父类，所有对象包括数组都实现了 Object 的方法。")]),a._v(" "),s("h2",{attrs:{id:"_33、java-创建对象有几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33、java-创建对象有几种方式"}},[a._v("#")]),a._v(" 33、Java 创建对象有几种方式？")]),a._v(" "),s("p",[a._v("这题目看似简单，要好好回答起来还是有点小复杂的，我们来看看，到底有哪些方式可以创建对象？\n"),s("strong",[a._v("使用 new 关键字")]),a._v("，这也是我们平时使用的最多的创建对象的方式，示例：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[s("strong",[a._v("使用反射方式创建对象")]),a._v("，使用 newInstance()，但是得处理两个异常 InstantiationException、IllegalAccessException：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("newInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" object"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java.lang.Object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("newInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[s("strong",[a._v("使用 clone 方法")]),a._v("，前面题目中 clone 是 Object 的方法，所以所有对象都有这个方法。\n"),s("strong",[a._v("使用反序列化创建对象")]),a._v("，调用 ObjectInputStream 类的 readObject() 方法。\n我们反序列化一个对象，JVM 会给我们创建一个单独的对象。JVM 创建对象并不会调用任何构造函数。一个对象实现了 Serializable 接口，就可以把对象写入到文件中，并通过读取文件来创建对象。\n"),s("strong",[a._v("总结")]),a._v("\n创建对象的方式关键字：new、反射、clone 拷贝、反序列化。")]),a._v(" "),s("h2",{attrs:{id:"_34、获取一个类class对象的方式有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34、获取一个类class对象的方式有哪些"}},[a._v("#")]),a._v(" 34、获取一个类Class对象的方式有哪些？")]),a._v(" "),s("p",[a._v("搞清楚类对象和实例对象，但都是对象。\n第一种：通过"),s("strong",[a._v("类对象的 getClass()")]),a._v(" 方法获取，细心点的都知道，这个 getClass 是 Object 类里面的\n方法")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//clazz就是一个User的类对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" clazz"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("第二种：通过"),s("strong",[a._v("类的静态成员")]),a._v("表示，每个类都有隐含的静态成员 class。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//clazz就是一个User的类对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" clazz"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("第三种：通过 Class 类的"),s("strong",[a._v("静态方法 forName()")]),a._v(" 方法获取。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" clazz "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"com.tian.User"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"_35、arraylist-和-linkedlist-的区别有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35、arraylist-和-linkedlist-的区别有哪些"}},[a._v("#")]),a._v(" 35、ArrayList 和 LinkedList 的区别有哪些？")]),a._v(" "),s("h3",{attrs:{id:"arraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[a._v("#")]),a._v(" ArrayList")]),a._v(" "),s("ul",[s("li",[a._v("优点：ArrayList 是实现了基于动态数组的数据结构，因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。")]),a._v(" "),s("li",[a._v("缺点：因为地址连续，ArrayList 要移动数据，所以插入和删除操作效率比较低。")])]),a._v(" "),s("h3",{attrs:{id:"linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[a._v("#")]),a._v(" LinkedList")]),a._v(" "),s("ul",[s("li",[a._v("优点：LinkedList 基于链表的数据结构，地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址。对于新增和删除操作，LinkedList 比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景。")]),a._v(" "),s("li",[a._v("缺点：因为 LinkedList 要移动指针，所以查询操作性能比较低")])]),a._v(" "),s("h3",{attrs:{id:"适用场景分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用场景分析"}},[a._v("#")]),a._v(" 适用场景分析")]),a._v(" "),s("ul",[s("li",[a._v("当需要对数据进行对随机访问的时候，选用 ArrayList。")]),a._v(" "),s("li",[a._v("当需要对数据进行多次增加删除修改时，采用 LinkedList。")])]),a._v(" "),s("p",[a._v("如果容量固定，并且只会添加到尾部，不会引起扩容，优先采用 ArrayList。当然，绝大数业务的场景下，使用 ArrayList 就够了，但需要注意避免 ArrayList 的扩容，以及非顺序的插入。")]),a._v(" "),s("h2",{attrs:{id:"_36、用过-arraylist-吗-说一下它有什么特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36、用过-arraylist-吗-说一下它有什么特点"}},[a._v("#")]),a._v(" 36、用过 ArrayList 吗？说一下它有什么特点？")]),a._v(" "),s("p",[a._v("只要是搞 Java 的肯定都会回答“用过”。所以，回答题目的后半部分——ArrayList 的特点。可以从这几个方面去回答：\n1.Java 集合框架中的一种存放相同类型的元素数据，是一种变长的集合类，基于定长数组实现，当加入数据达到一定程度后，会实行自动扩容，即扩大数组大小。\n2.底层是使用数组实现，添加元素。")]),a._v(" "),s("ul",[s("li",[a._v("如果 add(o)，添加到的是数组的尾部，如果要增加的数据量很大，应该使用 ensureCapacity()方法，该方法的作用是预先设置 ArrayList 的大小，这样可以大大提高初始化速度。")]),a._v(" "),s("li",[a._v("如果使用 add(int,o)，添加到某个位置，那么可能会挪动大量的数组元素，并且可能会触发扩容机制。")])]),a._v(" "),s("p",[a._v("3.高并发的情况下，线程不安全。多个线程同时操作 ArrayList，会引发不可预知的异常或错误。ArrayList 实现了 Cloneable 接口，标识着它可以被复制。注意：ArrayList 里面的 clone() 复制其实是浅复制。")]),a._v(" "),s("h2",{attrs:{id:"_37、有数组了为什么还要搞个-arraylist-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37、有数组了为什么还要搞个-arraylist-呢"}},[a._v("#")]),a._v(" 37、有数组了为什么还要搞个 ArrayList 呢？")]),a._v(" "),s("p",[a._v("通常我们在使用的时候，如果在不明确要插入多少数据的情况下，普通数组就很尴尬了，因为你不知道需要初始化数组大小为多少，而 ArrayList 可以使用默认的大小，当元素个数到达一定程度后，会自动扩容。\n可以这么来理解：我们常说的数组是定死的数组，ArrayList 却是动态数组。")]),a._v(" "),s("h3",{attrs:{id:"_38、说说什么是-fail-fast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38、说说什么是-fail-fast"}},[a._v("#")]),a._v(" 38、说说什么是 fail-fast？")]),a._v(" "),s("p",[a._v("fail-fast 机制是 Java 集合（Collection）中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生 fail-fast 事件。\n例如：当某一个线程 A 通过 iterator 去遍历某集合的过程中，若该集合的内容被其他线程所改变了，那么线程 A 访问集合时，就会抛出 ConcurrentModificationException 异常，产生 fail-fast 事件。这里的操作主要是指 add、remove 和 clear，对集合元素个数进行修改。\n解决办法：建议使用“java.util.concurrent 包下的类”去取代“java.util 包下的类”。可以这么理解：在遍历之前，把 modCount 记下来 expectModCount，后面 expectModCount 去和 modCount 进行比较，如果不相等了，证明已并发了，被修改了，于是抛出\nConcurrentModificationException 异常。")]),a._v(" "),s("h2",{attrs:{id:"_39、说说hashtable-与-hashmap-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39、说说hashtable-与-hashmap-的区别"}},[a._v("#")]),a._v(" 39、说说Hashtable 与 HashMap 的区别")]),a._v(" "),s("ol",[s("li",[a._v("出生的版本不一样，Hashtable 出生于 Java 发布的第一版本 JDK 1.0，HashMap 出生于 JDK1.2。")]),a._v(" "),s("li",[a._v("都实现了 Map、Cloneable、Serializable（当前 JDK 版本 1.8）。")]),a._v(" "),s("li",[a._v("HashMap 继承的是 AbstractMap，并且 AbstractMap 也实现了 Map 接口。Hashtable 继承Dictionary。")]),a._v(" "),s("li",[a._v("Hashtable 中大部分 public 修饰普通方法都是 synchronized 字段修饰的，是线程安全的，HashMap 是非线程安全的。")]),a._v(" "),s("li",[a._v("Hashtable 的 key 不能为 null，value 也不能为 null，这个可以从 Hashtable 源码中的 put 方法看到，判断如果 value 为 null 就直接抛出空指针异常，在 put 方法中计算 key 的 hash 值之前并没有判断 key 为 null 的情况，那说明，这时候如果 key 为空，照样会抛出空指针异常。")]),a._v(" "),s("li",[a._v("HashMap 的 key 和 value 都可以为 null。在计算 hash 值的时候，有判断，如果key==null ，则其 hash=0 ；至于 value 是否为 null，根本没有判断过。")]),a._v(" "),s("li",[a._v("Hashtable 直接使用对象的 hash 值。hash 值是 JDK 根据对象的地址或者字符串或者数字算出来的 int 类型的数值。然后再使用除留余数法来获得最终的位置。然而除法运算是非常耗费时间的，效率很低。HashMap 为了提高计算效率，将哈希表的大小固定为了 2 的幂，这样在取模预算时，不需要做除法，只需要做位运算。位运算比除法的效率要高很多。")]),a._v(" "),s("li",[a._v("Hashtable、HashMap 都使用了 Iterator。而由于历史原因，Hashtable 还使用了Enumeration 的方式。")]),a._v(" "),s("li",[a._v("默认情况下，初始容量不同，Hashtable 的初始长度是 11，之后每次扩充容量变为之前的2n+1（n 为上一次的长度）而 HashMap 的初始长度为 16，之后每次扩充变为原来的两倍。")])]),a._v(" "),s("p",[a._v("另外在 Hashtable 源码注释中有这么一句话：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hashtable")]),a._v(" is "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("synchronized"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v(" If")]),a._v(" a thread"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("safe implementation is not needed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" it is\nrecommended "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("to")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("use")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),a._v(" in place of "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hashtable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" If")]),a._v(" a thread"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("safe highlyconcurrent\nimplementation is desired"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" then it is recommended "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("to")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("use")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConcurrentHashMap")]),a._v(" in place of "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hashtable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n")])])]),s("p",[a._v("大致意思：Hashtable 是线程安全，推荐使用 HashMap 代替 Hashtable；如果需要线程安全高并发的话，推荐使用 ConcurrentHashMap 代替 Hashtable。\n这个回答完了，面试官可能会继续问：HashMap 是线程不安全的，那么在需要线程安全的情况下还要考虑性能，有什么解决方式？\n这里最好的选择就是 ConcurrentHashMap 了，但面试官肯定会叫你继续说一下ConcurrentHashMap 数据结构以及底层原理等。")]),a._v(" "),s("p",[a._v("40、HashMap 中的 key 我们可以使用任何类作为 key 吗？")]),a._v(" "),s("p",[a._v("平时可能大家使用的最多的就是使用 String 作为 HashMap 的 key，但是现在我们想使用某个自定义类作为 HashMap 的 key，那就需要注意以下几点：")]),a._v(" "),s("ul",[s("li",[a._v("如果类重写了 equals 方法，它也应该重写 hashCode 方法。")]),a._v(" "),s("li",[a._v("类的所有实例需要遵循与 equals 和 hashCode 相关的规则。")]),a._v(" "),s("li",[a._v("如果一个类没有使用 equals，你不应该在 hashCode 中使用它。")]),a._v(" "),s("li",[a._v("咱们自定义 key 类的最佳实践是使之为不可变的，这样，hashCode 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode 和 equals 在未来不会改变，这样就会解决与可变相关的问题了。")])]),a._v(" "),s("h2",{attrs:{id:"_41、hashmap-的长度为什么是-2-的-n-次方呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_41、hashmap-的长度为什么是-2-的-n-次方呢"}},[a._v("#")]),a._v(" 41、HashMap 的长度为什么是 2 的 N 次方呢？")]),a._v(" "),s("p",[a._v("为了能让 HashMap 存数据和取数据的效率高，尽可能地减少 hash 值的碰撞，也就是说尽量把数据能均匀的分配，每个链表或者红黑树长度尽量相等。我们首先可能会想到 % 取模的操作来实现。\n下面是回答的重点哟：")]),a._v(" "),s("blockquote",[s("p",[a._v("取余（%）操作中如果除数是 2 的幂次，则等价于与其除数减一的与（&）操作（也就是说hash % length == hash &(length - 1) 的前提是 length 是 2 的 n 次方）。并且，采用二进 制位操作 & ，相对于 % 能够提高运算效率。")])]),a._v(" "),s("p",[a._v("这就是为什么 HashMap 的长度需要 2 的 N 次方了。")]),a._v(" "),s("h2",{attrs:{id:"_42、hashmap-与-concurrenthashmap-的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42、hashmap-与-concurrenthashmap-的异同"}},[a._v("#")]),a._v(" 42、HashMap 与 ConcurrentHashMap 的异同")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("都是 key-value 形式的存储数据；")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 是线程不安全的，ConcurrentHashMap 是 JUC 下的线程安全的；")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 底层数据结构是数组 + 链表（JDK 1.8 之前）。JDK 1.8 之后是数组 + 链表 + 红黑树。当链表中元素个数达到 8 的时候，链表的查询速度不如红黑树快，链表会转为红黑树，红黑树查询速度快；")])]),a._v(" "),s("li",[s("p",[a._v("HashMap 初始数组大小为 16（默认），当出现扩容的时候，以 0.75 * 数组大小的方式进行扩容；")])]),a._v(" "),s("li",[s("p",[a._v("ConcurrentHashMap 在 JDK 1.8 之前是采用分段锁来现实的 Segment + HashEntry，Segment 数组大小默认是 16，2 的 n 次方；JDK 1.8 之后，采用 Node + CAS + Synchronized来保证并发安全进行实现。")])])]),a._v(" "),s("h2",{attrs:{id:"_43、红黑树有哪几个特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_43、红黑树有哪几个特征"}},[a._v("#")]),a._v(" 43、红黑树有哪几个特征？")]),a._v(" "),s("p",[a._v("紧接上个问题，面试官很有可能会问红黑树，下面把红黑树的几个特征列出来：\n"),s("img",{attrs:{src:"https://npm.elemecdn.com/@it985/docsimages/001/RedBlackTree.png",alt:"红黑树"}})]),a._v(" "),s("h2",{attrs:{id:"_44、说说你平时是怎么处理-java-异常的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44、说说你平时是怎么处理-java-异常的"}},[a._v("#")]),a._v(" 44、说说你平时是怎么处理 Java 异常的")]),a._v(" "),s("p",[a._v("try-catch-finally")]),a._v(" "),s("ul",[s("li",[a._v("try 块负责监控可能出现异常的代码")]),a._v(" "),s("li",[a._v("catch 块负责捕获可能出现的异常，并进行处理")]),a._v(" "),s("li",[a._v("finally 块负责清理各种资源，不管是否出现异常都会执行")]),a._v(" "),s("li",[a._v("其中 try 块是必须的，catch 和 finally 至少存在一个标准异常处理流程\n"),s("img",{attrs:{src:"https://npm.elemecdn.com/@it985/docsimages/001/try-catch-finally.png",alt:"try-catch-finally"}})])]),a._v(" "),s("blockquote",[s("p",[a._v("抛出异常→捕获异常→捕获成功（当 catch 的异常类型与抛出的异常类型匹配时，捕获成功）\n→异常被处理，程序继续运行 抛出异常→捕获异常→捕获失败（当 catch 的异常类型与抛出异\n常类型不匹配时，捕获失败）→异常未被处理，程序中断运行")])]),a._v(" "),s("p",[a._v("在开发过程中会使用到自定义异常，在通常情况下，程序很少会自己抛出异常，因为异常的类名通常也包含了该异常的有用信息，所以在选择抛出异常的时候，应该选择合适的异常类，从而可以明确地描述该异常情况，所以这时候往往都是自定义异常。自定义异常通常是通过继承 java.lang.Exception 类，如果想自定义 Runtime 异常的话，可以继承java.lang.RuntimeException 类，实现一个无参构造和一个带字符串参数的有参构造方法。在业务代码里，可以针对性的使用自定义异常。比如说：该用户不具备某某权限、余额不足等。")]),a._v(" "),s("h2",{attrs:{id:"_45、说说深拷贝和浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_45、说说深拷贝和浅拷贝"}},[a._v("#")]),a._v(" 45、说说深拷贝和浅拷贝？")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，")])]),a._v(" "),s("li",[s("p",[a._v("深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，")])]),a._v(" "),s("li",[s("p",[a._v("使用深拷贝的情况下，释放内存的时候不会因为出现浅拷贝时释放同一个内存的错误。")])])]),a._v(" "),s("p",[a._v("注：最好是结合克隆已经原型模式联系在一起哈，记得复习的时候，把这几个联系起来的。")])])}),[],!1,null,null,null);s.default=n.exports}}]);